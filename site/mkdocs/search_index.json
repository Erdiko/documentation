{
    "docs": [
        {
            "location": "/", 
            "text": "Erdiko\n\n\n\n\nA micro MVC framework and suite of packages to build lean web apps and APIs\n\n\nLearn more about the Erdiko framework\n\n\n\n\nWhat is Erdiko?\n\n\nErdiko framework Quick Start\n\n\nHow it works\n\n\n\n\nPopular packages\n\n\n\n\nUser Admin\n - An easy to use user system with a modular admin\n\n\nUsers\n - A lean user system including \nauthentication\n \n \nauthorization", 
            "title": "Home"
        }, 
        {
            "location": "/#erdiko", 
            "text": "A micro MVC framework and suite of packages to build lean web apps and APIs  Learn more about the Erdiko framework   What is Erdiko?  Erdiko framework Quick Start  How it works   Popular packages   User Admin  - An easy to use user system with a modular admin  Users  - A lean user system including  authentication     authorization", 
            "title": "Erdiko"
        }, 
        {
            "location": "/framework/quickstart/", 
            "text": "System Requirements\n\n\nWebserver\n\n\n\n\nNGINX, Apache (with mod rewrite) or equivalent server\n\n\n\n\nPHP\n\n\n\n\nPHP 5.4 or higher\n\n\n\n\nQuick Installation\n\n\nVia Composer\n\n\n\n\nThe Eridko framework utilizes Composer for installation and dependency management. If you have not install Composer, start by installing Composer.\n\n\n\n\nAfter you installed Composer, you can run the following command in your terminal:\n\n\ncomposer create-project erdiko/erdiko project-name\n\n\n\nThis command will download and install a fresh copy of Erdiko in a new project-name folder within your current directory. Then, you can move to next step to \nSetup web environment\n\n\nVia Git\n\n\n\n\nStep #1: \nDownload Erdiko\n\n\nStep #2: \nSetup web environment\n\n\n\n\nDownload Erdiko\n\n\nTo download Erdiko from our Git repository, enter the following command in command prompt:\n\n\n    git clone https://github.com/arroyolabs/erdiko\n\n\n\nIt will clone our Git repository to your local machine. Then, go to the Erdiko root folder and install Erdiko using Composer.\n\n\n    composer install\n\n\n\nSetup your environment\n\n\n\n\n\n\nOpen the config file of your web server\n\n\n\n\n\n\nChange the webroot to \n[local erdiko code path]/public\n\n\n\n\n\n\nCreate a folder named var in  \n[local erdiko code path]/\n and change the group of the \n/var\n folder to \nwww-data\n using chgrp www-data\n   \n[local erdiko code path]/var\n\n\n\n\n\n\nSave changes and restart your web server.\n\n\n\n\n\n\nType http://localhost into your browser (or your virtual host name)\n\n\n\n\n\n\nIf you can see the Hello world page, you have successfully installed Erdiko!\n\n\n\n\n\n\n\n\nKeep in mind\nAll of your server side application code should go in the /app folder.\n\n\nAll js, css, or media files or asset should go in the /public folder.\n\n\nTheme files go in the /app/themes folder while view files and application code goes in the /app/views folder.\n\n\nDo not modify files in /vendor/erdiko/* if you want to maintain an easy upgrade path with Erdiko.\n\n\n\n\n\n\nCreate add your first page\n\n\n\n\n\n\nWe will first need to add a tab to the menu.  To do so, open the main config file located at \nErdiko/app/config/application/default.json\n\n\n\n\n\n\nFind the menu section and insert the following code.\n\n\n\n\n\n\n\n\n\n\n\nAfter inserting the code above, the menu section should look like this.\n\n\n\n\n\n\n\n\n\nSave the changes of the file, and open the site in your browser.\n   You should be able to see that there is a new tab on the menu.\n\n\n\n\n\n\nWhen you click on the tab, it will show error.\n\n\nThis is normal because you have not set any contents to the page.\n\n\n\n\nSet content of a page\n\n\n\n\n\n\nTo add contents to a page, open the page config file located at \nErdiko/app/controllers/Example.php\n.\n\n\n\n\n\n\nAdd the following function inside the Index class\n\n\n\n\n\n\n\n\n\n\n\nSave the changes and open the site in your browser.\n   You should be able to see your first page.\n\n\n\n\nWell done!\n  You successfully create your first page using Erdiko.\n\n\n\n\nNote\nIf you want to create a full page, you can add the following line in the getMyfirstpage function. \n\n\n$this-\nsetTemplate('fullpage');\n\n\n\n\n\n\nUse a PHP template\n\n\n\n\n\n\nOpen the corresponding controller file under the folder \nErdiko/app/controllers/\n.\n\n\n\n\n\n\nInside the controller, find the function of the page you want to use PHP.\n\n\n\n\n\n\nInsert the following code:\n\n\n$this-\naddView('[Path of the .php file]');\n\n\n\n\n\n\n\n\n\nThe root of the path is \nErdiko/app/views\nFor example, if you want to use the php file located at \nErdiko/app/views/example/test.php\n, the path will be \n/example/test\n\n\n\n\n\n\nAdd JavaScript to a page\n\n\n\n\n\n\nOpen the corresponding controller file under the folder \nErdiko/www/app/controllers/\n.\n\n\n\n\n\n\nInside the controller, find the function of the page you want to use Javascript.\n\n\n\n\n\n\nInsert the following code:\n\n\n$this-\naddJs('[Path of the .js file]');\n\n\n\n\n\n\n\n\n\nThe webserver root is \n/public\nFor example, if you want to include an example.js file the path will be \n/public/themes/bootstrap/js/example.js\n.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/framework/quickstart/#system-requirements", 
            "text": "", 
            "title": "System Requirements"
        }, 
        {
            "location": "/framework/quickstart/#webserver", 
            "text": "NGINX, Apache (with mod rewrite) or equivalent server", 
            "title": "Webserver"
        }, 
        {
            "location": "/framework/quickstart/#php", 
            "text": "PHP 5.4 or higher", 
            "title": "PHP"
        }, 
        {
            "location": "/framework/quickstart/#quick-installation", 
            "text": "", 
            "title": "Quick Installation"
        }, 
        {
            "location": "/framework/quickstart/#via-composer", 
            "text": "The Eridko framework utilizes Composer for installation and dependency management. If you have not install Composer, start by installing Composer.   After you installed Composer, you can run the following command in your terminal:  composer create-project erdiko/erdiko project-name  This command will download and install a fresh copy of Erdiko in a new project-name folder within your current directory. Then, you can move to next step to  Setup web environment", 
            "title": "Via Composer"
        }, 
        {
            "location": "/framework/quickstart/#via-git", 
            "text": "Step #1:  Download Erdiko  Step #2:  Setup web environment", 
            "title": "Via Git"
        }, 
        {
            "location": "/framework/quickstart/#download-erdiko", 
            "text": "To download Erdiko from our Git repository, enter the following command in command prompt:      git clone https://github.com/arroyolabs/erdiko  It will clone our Git repository to your local machine. Then, go to the Erdiko root folder and install Erdiko using Composer.      composer install", 
            "title": "Download Erdiko"
        }, 
        {
            "location": "/framework/quickstart/#setup-your-environment", 
            "text": "Open the config file of your web server    Change the webroot to  [local erdiko code path]/public    Create a folder named var in   [local erdiko code path]/  and change the group of the  /var  folder to  www-data  using chgrp www-data\n    [local erdiko code path]/var    Save changes and restart your web server.    Type http://localhost into your browser (or your virtual host name)    If you can see the Hello world page, you have successfully installed Erdiko!     Keep in mind All of your server side application code should go in the /app folder.  All js, css, or media files or asset should go in the /public folder.  Theme files go in the /app/themes folder while view files and application code goes in the /app/views folder.  Do not modify files in /vendor/erdiko/* if you want to maintain an easy upgrade path with Erdiko.", 
            "title": "Setup your environment"
        }, 
        {
            "location": "/framework/quickstart/#create-add-your-first-page", 
            "text": "We will first need to add a tab to the menu.  To do so, open the main config file located at  Erdiko/app/config/application/default.json    Find the menu section and insert the following code.      After inserting the code above, the menu section should look like this.     Save the changes of the file, and open the site in your browser.\n   You should be able to see that there is a new tab on the menu.    When you click on the tab, it will show error.  This is normal because you have not set any contents to the page.", 
            "title": "Create add your first page"
        }, 
        {
            "location": "/framework/quickstart/#set-content-of-a-page", 
            "text": "To add contents to a page, open the page config file located at  Erdiko/app/controllers/Example.php .    Add the following function inside the Index class      Save the changes and open the site in your browser.\n   You should be able to see your first page.   Well done!   You successfully create your first page using Erdiko.   Note If you want to create a full page, you can add the following line in the getMyfirstpage function.   $this- setTemplate('fullpage');", 
            "title": "Set content of a page"
        }, 
        {
            "location": "/framework/quickstart/#use-a-php-template", 
            "text": "Open the corresponding controller file under the folder  Erdiko/app/controllers/ .    Inside the controller, find the function of the page you want to use PHP.    Insert the following code:  $this- addView('[Path of the .php file]');     The root of the path is  Erdiko/app/views For example, if you want to use the php file located at  Erdiko/app/views/example/test.php , the path will be  /example/test", 
            "title": "Use a PHP template"
        }, 
        {
            "location": "/framework/quickstart/#add-javascript-to-a-page", 
            "text": "Open the corresponding controller file under the folder  Erdiko/www/app/controllers/ .    Inside the controller, find the function of the page you want to use Javascript.    Insert the following code:  $this- addJs('[Path of the .js file]');     The webserver root is  /public For example, if you want to include an example.js file the path will be  /public/themes/bootstrap/js/example.js .", 
            "title": "Add JavaScript to a page"
        }, 
        {
            "location": "/framework/", 
            "text": "Erdiko Framework Overview\n\n\nInstallation:\n\n\ncomposer create erdiko/erdiko\n\n\n\n\nGit repo: \nhttps://github.com/Erdiko/erdiko\n\n\nConfig\n\n\nThe config folder is stored in \n/app/config/\n directory and the default application config file is located at \n/app/config/application/default.json\n.\nIn the config file, you can modify some settings of the site and plugins, such as logging, cache, and analytics.  \n\n\nIf you wish to store configurations for other applications, we recommend you to create a new config file under \n/app/config/\n directory. Moreover, all config files are stored in JSON format and you can retrieve config from the config file though the getConfig function in Erdiko class.  \n\n\nFor example, to read the configuration of Cache which is located at \n/app/config/cache.json\n directory, you can use the following code:\n\n\n$config = \\Erdiko::getConfig(\nlocal/cache\n);\n$host = $config[\nmemcached\n][\nhost\n];               \n$port = $config[\nmemcached\n][\nport\n];\n\n\n\n\nRoutes\n\n\nApplication routes are defined in the file, \n/app/config/application/routes.json\n\nUpdate your app's routes in this file.\n\n\nErdiko uses the same routing conventions defined by ToroPHP (modeled after Tornado, a python framework)\n\n\nTo route the root of the site to the Example controller\n\n\n    \"/\": \"\\app\\controllers\\Example\"\n\n\n\nTo route example.com/examples/token, where the token is an alpha only name used in the controller\n\n\n    \"examples/:alpha\": \"\\app\\controllers\\Example\"\n\n\n\nFor more information on routing see \nToro PHP routing\n\n\nTokens\n\n\nyou can use convenient tokens in your routes.  These token are simply convenient regular expressions and defined as follows.\n\n\n':string' // '([a-zA-Z]+)'\n':number' // '([0-9]+)',\n':alpha'  // '([a-zA-Z0-9-_]+)',\n':action' // '([a-zA-Z0-9-_/]+)'\n\n\n\n\nExamples\n\n\n// This will match /page/one\n\npage/:string\n: \n\\app\\controllers\\Page\n\n\n// This will match /page/123\n\npage/:number\n: \n\\app\\controllers\\Page\n\n\n// This will match /page/123 and /page/one\n\npage/:alpha\n: \n\\app\\controllers\\Page\n\n\n// This will match /book/1/page/123 and pass the everything including\n// the '/' to the method so it can be further parsed. e.g. '1/page/123'\n\nbook/:action\n: \n\\app\\controllers\\Book\n\n\n\n\n\nRESTful routes\n\n\nYour route will come in based off of the route and http request type\n\n\n// Route (in routes.json)\n\nrest/:alpha\n: \n\\app\\controllers\\Rest\n\n\n// Controller\nclass Rest extends \\erdiko\\core\\Controller\n{\n    function get() {}\n    function post() {}\n    function get_xhr() {}\n    function post_xhr() {}\n}\n\n\n\n\nAuto routes\n\n\nIf you do not explicitly define a route for get(), post(), etc then Erdiko will automatically route based off of a naming convention.\n\n\nLets look at this route\n\n\n    \"examples/:alpha\": \"\\app\\controllers\\Example\"\n\n\n\nIf you go to yoursite.com/examples/hello, this will resolve to Example-\ngetHello().  Where Example is the controller and getHello() is the method\n\n\nControllers\n\n\nIf you have already configurated the routes file, the next step would be creating controllers which determine the content of pages.  Controllers are typically stored in \napp/controllers/\n directory.  Since Erdiko uses Composer to auto-load our PHP classes, you may place controllers in other directory as long as they have the same namespace anc corresponding folder structure.\n\n\nHere is an example of a basic controller class:\n\n\nclass Example extends \\erdiko\\core\\Controller\n{\n        /** Before */\n        public function _before()\n        {\n                $this-\nsetThemeName('bootstrap');\n                $this-\nprepareTheme();\n        }\n\n        /** Get Hello */\n        public function getHello()\n        {\n                $this-\nsetTitle('Hello World');\n                $this-\nsetContent(\nHello World\n);\n        }\n}\n\n\n\n\nIn a controller class, every function whose name starts with 'get' represents the logic of a page. For example, if you are running the site on your local machine, the url of the site on the example above would be \nhttp://localhost/hello\n.\n\n\nViews\n\n\nThe views are stored in \napp/views/\n directory.  Views is similar to Layout, however, they are not actually the same. Layout can set inside a layout or a view which view can only contain Layout. Moreover, you can put any HTML or PHP code inside a view.\n\n\nHere is an example of a view:\n\n\n    \np\nThis is a view template.\n/p\n\n    \np\n?php echo $data[0] ?\n world\n/p\n\n\n\n\nIt supports HTML tags and ables to use PHP to retrieve variables.\n\n\nModels\n\n\nErdiko is a mash-up framework and our goal is to make Erdiko be able to mash-up multiple applications/frameworks like Drupal, Magento, WordPress, Zend, and etc.  There are lots of different models out there and it is not feasible to cover all of that.  Therefore, you may design your model layer depending on your needs.\n\n\nFor example, if you site is using database MySQL, Oracle, Microsoft SQL Server, PostgreSQL, SAP Sybase SQL Anywhere, SQLite, or Drizzle, you may consider to adopt Doctrine's Database Abstraction Layer framework to Erdiko.\nHere is a link to a tutorial of basic usage.\n\n\nHooks\n\n\nIn Erdiko, a hook is mainly driven by the ToroPHP router. Hook is very useful in Erdiko framework and it allows you to execute code before and after a controller is called.  It can also increase the security when communicating with third party applications.  For example, when you made a request to a third party application which is going to do a call-back action to your site, you can use hooks to hooks to verfiy the session.\n\n\nFor more hooks information, please see https://github.com/anandkunal/ToroPHP#torohook-callbacks\n\n\nAbout Erdiko\n\n\nErdiko wants to make your php development easier. If you need a lightweight MVC framework you have come to the right place. Our goal is to offer a clean framework to create sites optimized for mobile devices, APIs and multiple browsers.  Get work done without a lot of unneccessary plumbing to get in the way.  It is camptible with composer, which makes it easy to use with other PHP projects like Doctrine\n\n\nErdiko can act as a middleware framework, hence the name which means 'middle' in the Basque language (Euskara). Use Erdiko if you need to mash-up multiple applications/frameworks like Drupal, Magento, WordPress, and Zend into a unified application.\n\n\nTeam\n\n\nAuthor\n\n\n\n\nJohn Arroyo - Architect, Lead Developer\n\n\n\n\nContributors\n\n\n\n\nAndy Armstrong - Development\n\n\nLeo Daidone - Development\n\n\n\n\nTo see all the see all the contributors go to \nerdiko\n and \ncore\n\n\nIf you want to help, please do, we'd love more code! Make your enhancements and do a pull request. If you want to get to even more involved please contact us!\n\n\nSpecial Thanks\n\n\nArroyo Labs - For sponsoring development, \nhttp://arroyolabs.com", 
            "title": "Overview"
        }, 
        {
            "location": "/framework/#erdiko-framework-overview", 
            "text": "Installation:  composer create erdiko/erdiko  Git repo:  https://github.com/Erdiko/erdiko", 
            "title": "Erdiko Framework Overview"
        }, 
        {
            "location": "/framework/#config", 
            "text": "The config folder is stored in  /app/config/  directory and the default application config file is located at  /app/config/application/default.json .\nIn the config file, you can modify some settings of the site and plugins, such as logging, cache, and analytics.    If you wish to store configurations for other applications, we recommend you to create a new config file under  /app/config/  directory. Moreover, all config files are stored in JSON format and you can retrieve config from the config file though the getConfig function in Erdiko class.    For example, to read the configuration of Cache which is located at  /app/config/cache.json  directory, you can use the following code:  $config = \\Erdiko::getConfig( local/cache );\n$host = $config[ memcached ][ host ];               \n$port = $config[ memcached ][ port ];", 
            "title": "Config"
        }, 
        {
            "location": "/framework/#routes", 
            "text": "Application routes are defined in the file,  /app/config/application/routes.json \nUpdate your app's routes in this file.  Erdiko uses the same routing conventions defined by ToroPHP (modeled after Tornado, a python framework)  To route the root of the site to the Example controller      \"/\": \"\\app\\controllers\\Example\"  To route example.com/examples/token, where the token is an alpha only name used in the controller      \"examples/:alpha\": \"\\app\\controllers\\Example\"  For more information on routing see  Toro PHP routing", 
            "title": "Routes"
        }, 
        {
            "location": "/framework/#tokens", 
            "text": "you can use convenient tokens in your routes.  These token are simply convenient regular expressions and defined as follows.  ':string' // '([a-zA-Z]+)'\n':number' // '([0-9]+)',\n':alpha'  // '([a-zA-Z0-9-_]+)',\n':action' // '([a-zA-Z0-9-_/]+)'", 
            "title": "Tokens"
        }, 
        {
            "location": "/framework/#examples", 
            "text": "// This will match /page/one page/:string :  \\app\\controllers\\Page \n\n// This will match /page/123 page/:number :  \\app\\controllers\\Page \n\n// This will match /page/123 and /page/one page/:alpha :  \\app\\controllers\\Page \n\n// This will match /book/1/page/123 and pass the everything including\n// the '/' to the method so it can be further parsed. e.g. '1/page/123' book/:action :  \\app\\controllers\\Book", 
            "title": "Examples"
        }, 
        {
            "location": "/framework/#restful-routes", 
            "text": "Your route will come in based off of the route and http request type  // Route (in routes.json) rest/:alpha :  \\app\\controllers\\Rest \n\n// Controller\nclass Rest extends \\erdiko\\core\\Controller\n{\n    function get() {}\n    function post() {}\n    function get_xhr() {}\n    function post_xhr() {}\n}", 
            "title": "RESTful routes"
        }, 
        {
            "location": "/framework/#auto-routes", 
            "text": "If you do not explicitly define a route for get(), post(), etc then Erdiko will automatically route based off of a naming convention.  Lets look at this route      \"examples/:alpha\": \"\\app\\controllers\\Example\"  If you go to yoursite.com/examples/hello, this will resolve to Example- getHello().  Where Example is the controller and getHello() is the method", 
            "title": "Auto routes"
        }, 
        {
            "location": "/framework/#controllers", 
            "text": "If you have already configurated the routes file, the next step would be creating controllers which determine the content of pages.  Controllers are typically stored in  app/controllers/  directory.  Since Erdiko uses Composer to auto-load our PHP classes, you may place controllers in other directory as long as they have the same namespace anc corresponding folder structure.  Here is an example of a basic controller class:  class Example extends \\erdiko\\core\\Controller\n{\n        /** Before */\n        public function _before()\n        {\n                $this- setThemeName('bootstrap');\n                $this- prepareTheme();\n        }\n\n        /** Get Hello */\n        public function getHello()\n        {\n                $this- setTitle('Hello World');\n                $this- setContent( Hello World );\n        }\n}  In a controller class, every function whose name starts with 'get' represents the logic of a page. For example, if you are running the site on your local machine, the url of the site on the example above would be  http://localhost/hello .", 
            "title": "Controllers"
        }, 
        {
            "location": "/framework/#views", 
            "text": "The views are stored in  app/views/  directory.  Views is similar to Layout, however, they are not actually the same. Layout can set inside a layout or a view which view can only contain Layout. Moreover, you can put any HTML or PHP code inside a view.  Here is an example of a view:       p This is a view template. /p \n     p ?php echo $data[0] ?  world /p   It supports HTML tags and ables to use PHP to retrieve variables.", 
            "title": "Views"
        }, 
        {
            "location": "/framework/#models", 
            "text": "Erdiko is a mash-up framework and our goal is to make Erdiko be able to mash-up multiple applications/frameworks like Drupal, Magento, WordPress, Zend, and etc.  There are lots of different models out there and it is not feasible to cover all of that.  Therefore, you may design your model layer depending on your needs.  For example, if you site is using database MySQL, Oracle, Microsoft SQL Server, PostgreSQL, SAP Sybase SQL Anywhere, SQLite, or Drizzle, you may consider to adopt Doctrine's Database Abstraction Layer framework to Erdiko.\nHere is a link to a tutorial of basic usage.", 
            "title": "Models"
        }, 
        {
            "location": "/framework/#hooks", 
            "text": "In Erdiko, a hook is mainly driven by the ToroPHP router. Hook is very useful in Erdiko framework and it allows you to execute code before and after a controller is called.  It can also increase the security when communicating with third party applications.  For example, when you made a request to a third party application which is going to do a call-back action to your site, you can use hooks to hooks to verfiy the session.  For more hooks information, please see https://github.com/anandkunal/ToroPHP#torohook-callbacks", 
            "title": "Hooks"
        }, 
        {
            "location": "/framework/#about-erdiko", 
            "text": "Erdiko wants to make your php development easier. If you need a lightweight MVC framework you have come to the right place. Our goal is to offer a clean framework to create sites optimized for mobile devices, APIs and multiple browsers.  Get work done without a lot of unneccessary plumbing to get in the way.  It is camptible with composer, which makes it easy to use with other PHP projects like Doctrine  Erdiko can act as a middleware framework, hence the name which means 'middle' in the Basque language (Euskara). Use Erdiko if you need to mash-up multiple applications/frameworks like Drupal, Magento, WordPress, and Zend into a unified application.", 
            "title": "About Erdiko"
        }, 
        {
            "location": "/framework/#team", 
            "text": "Author   John Arroyo - Architect, Lead Developer   Contributors   Andy Armstrong - Development  Leo Daidone - Development   To see all the see all the contributors go to  erdiko  and  core  If you want to help, please do, we'd love more code! Make your enhancements and do a pull request. If you want to get to even more involved please contact us!", 
            "title": "Team"
        }, 
        {
            "location": "/framework/#special-thanks", 
            "text": "Arroyo Labs - For sponsoring development,  http://arroyolabs.com", 
            "title": "Special Thanks"
        }, 
        {
            "location": "/framework/databases/", 
            "text": "Databases\n\n\nConfiguring a database\n\n\nYour database credentials belong in \napp/config/shared/database.json\n\n\nThe default settings are good for most projects, but can be easily changed.  At a minimum, you will need to update 'host', 'database', 'username', and 'password'.\n\n\n{\n    \ndefault\n: \nmaster\n,\n    \nentities\n: \n/entities\n,\n    \nis_dev_mode\n: 1,\n    \nconnections\n: {\n        \nmaster\n: {\n            \ndriver\n: \npdo_mysql\n,\n            \nhost\n: \nlocalhost\n,\n            \ndatabase\n: \norms\n,\n            \nusername\n: \nwebuser\n,\n            \npassword\n: \nwebuserpass\n,\n            \ncharset\n: \nutf8\n,\n            \ncollation\n: \nutf8_unicode_ci\n,\n            \nprefix\n: \n\n        }\n    }\n}\n\n\n\n\nPick your ORM or db adapter\n\n\nWe have built in support for the (arguably) two most popular database ORMs in the PHP community.  These are Doctrine and Eloquent.\n\n\nInstall one of the existing adapters by using composer.  Update the database.json config file and use following composer commands to add the ORM of choice.\n\n\nDoctrine\n\n\ncomposer require erdiko/doctrine\n\n\n\n\nSee more information on \nGithub\n\n\nEloquent\n\n\ncomposer require erdiko/eloquent\n\n\n\n\nSee more information on \nGithub\n\n\nRoll your own\n\n\nLook at the above packages for examples of how you can easily create your own.  Reach out to us if you have some ideas or need help using other ORMs or database adapters with Erdiko.\n\n\nWe have used erdiko with other database packages but have not officially supported them.  We have been contemplating adding \nzend-db\n and \npropel\n and \nspot\n.  If you wish to contribute an integration package please let us know.", 
            "title": "Databases"
        }, 
        {
            "location": "/framework/databases/#databases", 
            "text": "", 
            "title": "Databases"
        }, 
        {
            "location": "/framework/databases/#configuring-a-database", 
            "text": "Your database credentials belong in  app/config/shared/database.json  The default settings are good for most projects, but can be easily changed.  At a minimum, you will need to update 'host', 'database', 'username', and 'password'.  {\n     default :  master ,\n     entities :  /entities ,\n     is_dev_mode : 1,\n     connections : {\n         master : {\n             driver :  pdo_mysql ,\n             host :  localhost ,\n             database :  orms ,\n             username :  webuser ,\n             password :  webuserpass ,\n             charset :  utf8 ,\n             collation :  utf8_unicode_ci ,\n             prefix :  \n        }\n    }\n}", 
            "title": "Configuring a database"
        }, 
        {
            "location": "/framework/databases/#pick-your-orm-or-db-adapter", 
            "text": "We have built in support for the (arguably) two most popular database ORMs in the PHP community.  These are Doctrine and Eloquent.  Install one of the existing adapters by using composer.  Update the database.json config file and use following composer commands to add the ORM of choice.", 
            "title": "Pick your ORM or db adapter"
        }, 
        {
            "location": "/framework/databases/#doctrine", 
            "text": "composer require erdiko/doctrine  See more information on  Github", 
            "title": "Doctrine"
        }, 
        {
            "location": "/framework/databases/#eloquent", 
            "text": "composer require erdiko/eloquent  See more information on  Github", 
            "title": "Eloquent"
        }, 
        {
            "location": "/framework/databases/#roll-your-own", 
            "text": "Look at the above packages for examples of how you can easily create your own.  Reach out to us if you have some ideas or need help using other ORMs or database adapters with Erdiko.  We have used erdiko with other database packages but have not officially supported them.  We have been contemplating adding  zend-db  and  propel  and  spot .  If you wish to contribute an integration package please let us know.", 
            "title": "Roll your own"
        }, 
        {
            "location": "/framework/example/", 
            "text": "Add a BMI calculator page using Javascript\n\n\n\n\n\n\nOpen the main config file located at \napp/config/default/application.json\n\n\n\n\n\n\nFind the menu section, for example:\n\n\n\n\n\n\nmenu\n: {\n    \nmain\n: [{\n        \nhref\n: \n/examples/examples\n,\n        \ntitle\n: \nExamples\n\n    }, {\n        \nhref\n: \n/examples/markup\n,\n        \ntitle\n: \nMark-Up\n\n    } ...\n\n\n\n\nInsert the following json code under main:\n\n\n    {\n        \nhref\n:\n/examples/bmi\n,\n        \ntitle\n:\nBMI\n\n    }\n\n\n\n\n\n\n\n\nOpen the routing config file located at \n/app/config/default/routes.json\n.\n    We can see that sites located at \n/\n will be routed to the controller Index and sites located at \n/examples/\n will be routed to the controller Example.\n\n\n\n\n\n\nOpen the controller Example located at \n/app/controllers/Examples.php\n\n\n\n\n\n\nAdd the following function inside the Examples class\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a file called \nbmi.php\n under \n/app/views/examples/\n\n\n\n\n\n\nOpen the bmi.php and add the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate \nexample.js\n under the folder \n/app/themes/hello/js/\n\n\n\n\n\n\nPaste the following code to \nexample.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave all changes, and open a web brower.\n\n\n\n\n\n\nGo to localhost, click the BMI tab on the menu, and then you should see \nthis\n.\n\n\n\n\n\n\nAdd a BMI calculator page using new route\n\n\n\n\n\n\nOpen the main config file located at \n/app/config/default/application.json\n\n\n\n\n\n\nFind the menu section and insert the following code.\n\n\n\n\n\n\n{\n    \nhref\n:\n/Calculator/bmi_version2\n,\n    \ntitle\n:\nBMI\n\n}\n\n\n\n\n\n\n\n\nOpen the routing config file located at \napp/config/default/routes.json\n.  Add a new rule to the route.\n\n\n[\"Calculator/([a-zA-Z0-9_\\-/]+)\", \"\\app\\controllers\\Calculator\"],\n\n\n\n\n\n\n\nThen, we will need to create a new controller for the new route.\n    To create a new controller, create \nCalculator.php\n under the folder \n/app/controllers/\n\n\n\n\n\n\nPaste the following code inside \nCalculator.php\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a view called \nbmi.php\n under \n/app/views/examples/\n\n\n\n\n\n\nOpen bmi.php and add the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a file called \nbmi_post.php\n under \n/app/views/examples/\n\n\n\n\n\n\nOpen the bmi_post.php and add the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave all changes, and open the site in your web brower.\n\n\n\n\n\n\nClick the BMI tab on the menu, and then you should see the following results.", 
            "title": "Example App"
        }, 
        {
            "location": "/framework/example/#add-a-bmi-calculator-page-using-javascript", 
            "text": "Open the main config file located at  app/config/default/application.json    Find the menu section, for example:    menu : {\n     main : [{\n         href :  /examples/examples ,\n         title :  Examples \n    }, {\n         href :  /examples/markup ,\n         title :  Mark-Up \n    } ...  Insert the following json code under main:      {\n         href : /examples/bmi ,\n         title : BMI \n    }    Open the routing config file located at  /app/config/default/routes.json .\n    We can see that sites located at  /  will be routed to the controller Index and sites located at  /examples/  will be routed to the controller Example.    Open the controller Example located at  /app/controllers/Examples.php    Add the following function inside the Examples class       Create a file called  bmi.php  under  /app/views/examples/    Open the bmi.php and add the following code:       Create  example.js  under the folder  /app/themes/hello/js/    Paste the following code to  example.js       Save all changes, and open a web brower.    Go to localhost, click the BMI tab on the menu, and then you should see  this .", 
            "title": "Add a BMI calculator page using Javascript"
        }, 
        {
            "location": "/framework/example/#add-a-bmi-calculator-page-using-new-route", 
            "text": "Open the main config file located at  /app/config/default/application.json    Find the menu section and insert the following code.    {\n     href : /Calculator/bmi_version2 ,\n     title : BMI \n}    Open the routing config file located at  app/config/default/routes.json .  Add a new rule to the route.  [\"Calculator/([a-zA-Z0-9_\\-/]+)\", \"\\app\\controllers\\Calculator\"],    Then, we will need to create a new controller for the new route.\n    To create a new controller, create  Calculator.php  under the folder  /app/controllers/    Paste the following code inside  Calculator.php       Create a view called  bmi.php  under  /app/views/examples/    Open bmi.php and add the following code:       Create a file called  bmi_post.php  under  /app/views/examples/    Open the bmi_post.php and add the following code:       Save all changes, and open the site in your web brower.    Click the BMI tab on the menu, and then you should see the following results.", 
            "title": "Add a BMI calculator page using new route"
        }, 
        {
            "location": "/user-admin/", 
            "text": "User Admin\n\n\nerdiko/user-admin package\n\n\nInstallation:\n\n\ncomposer create erdiko/user-admin\n\n\n\n\nGit repo: \nhttps://github.com/Erdiko/user-admin\n\n\nIntro\n\n\nThe user-admin package provides a secure and attractive UI for managing users with our Erdiko framework. The UX is provided by an \nAngularJS\n Application served by our very own \nErdiko framework\n.\n\n\nThe Angular Application itself is based on a Angular CLI application that imports our custom \nngx-user-admin\n package from npm. This package is used to define the angular routes and provide the services and components used to create the UX.\n\n\nThe Erdiko application serves the JS files required for the Angular application as well as providing the routes for the AJAX requests.\n\n\nExample page: Create user\n\n\n\nDocker (Quick Start)\n\n\nTo use docker and composer to start your environment\n\n\ncomposer create erdiko/user-admin\ncd user-admin\ndocker-compose up -d\n\n\n\n\nThis will give you a set of containers for a working website (running mysql, php and nginx).  In order to use the admin and get started managing users you still need to populate the database.  We have a convenient script to do just that.\n\n\ndocker exec -it erdiko_users_php /code/scripts/install-db.sh\n\n\n\n\nNow you are ready to login and use the Erdiko User Admin.\n\n\n\n\nNote\n\n\nIf you don't have composer, refer to \nthese installation instructions\n.\nFor the most up to date installation instructions refer to the \nuser-admin README file\n.\n\n\n\n\nDefault Login\n\n\nIf you followed the quick start instructions from the readme, it will create a sample admin user for you.  You can login with the following credentials:\n\n\n\n\nusername: erdiko@arroyolabs.com\n\n\npassword: password\n\n\n\n\nHow Erdiko serves the Angular application (GUI)\n\n\nThis Erdiko application serves up the Ajax endpoints and the JavaScript files that bootstrap the Angular JS application.\n\n\nIn our user-admin erdiko theme, \nuser-admin\\app\\themes\\user-admin\n, we use the \ntheme.json\n file to define which Javascript files are included on the page to serve the Angular application. Please refer to our \nerdiko documentation\n for more information on customizing themes and routes.\n\n\nThe build npm script (noted below) from the Angular CLI application actually compiles the typecsript into common JS files. We would highly recommend reviewing this file if you plan on editing any of the Angular code.\n\n\nSetup / Configuration of ngx-user-admin for local development (optional)\n\n\nIf you wish to modify the existing Angular application you will need to have a local development environment.  For example you may wish to customize a component by extending it or create a new component and add it to your app.\n\n\nRunning the Angular CLI application locally is an easy way to see your changes quickly before \"building\" and allowing the Erdiko Application to serve the compiled files.\n\n\nThe source of the Angular code is at \nuser-admin/app/themes/user-admin/src/app\n\n\nNPM Local Server\n\n\nThis command will start the npm server locally. Files in the angular application are then \"watched\" and updates to the angular application will be displayed once you save the files.\n\n\nYou can view the local server at this address: http://localhost:4200\n\n\ncd app/themes/user-admin/src/app\nnpm run start\n\n\n\n\nCompiling your changes\n\n\nOnce you have tested and completed your updates, you must \"build\" the application to compile the typescript to be served by the erdiko application. This step is required before any code can be deployed to a staging or production server.\n\n\nnpm run build\n\n\n\n\nYou can view the Erdiko application at this address: http://docker.local:8088", 
            "title": "Overview"
        }, 
        {
            "location": "/user-admin/#user-admin", 
            "text": "erdiko/user-admin package  Installation:  composer create erdiko/user-admin  Git repo:  https://github.com/Erdiko/user-admin", 
            "title": "User Admin"
        }, 
        {
            "location": "/user-admin/#intro", 
            "text": "The user-admin package provides a secure and attractive UI for managing users with our Erdiko framework. The UX is provided by an  AngularJS  Application served by our very own  Erdiko framework .  The Angular Application itself is based on a Angular CLI application that imports our custom  ngx-user-admin  package from npm. This package is used to define the angular routes and provide the services and components used to create the UX.  The Erdiko application serves the JS files required for the Angular application as well as providing the routes for the AJAX requests.  Example page: Create user", 
            "title": "Intro"
        }, 
        {
            "location": "/user-admin/#docker-quick-start", 
            "text": "To use docker and composer to start your environment  composer create erdiko/user-admin\ncd user-admin\ndocker-compose up -d  This will give you a set of containers for a working website (running mysql, php and nginx).  In order to use the admin and get started managing users you still need to populate the database.  We have a convenient script to do just that.  docker exec -it erdiko_users_php /code/scripts/install-db.sh  Now you are ready to login and use the Erdiko User Admin.   Note  If you don't have composer, refer to  these installation instructions .\nFor the most up to date installation instructions refer to the  user-admin README file .", 
            "title": "Docker (Quick Start)"
        }, 
        {
            "location": "/user-admin/#default-login", 
            "text": "If you followed the quick start instructions from the readme, it will create a sample admin user for you.  You can login with the following credentials:   username: erdiko@arroyolabs.com  password: password", 
            "title": "Default Login"
        }, 
        {
            "location": "/user-admin/#how-erdiko-serves-the-angular-application-gui", 
            "text": "This Erdiko application serves up the Ajax endpoints and the JavaScript files that bootstrap the Angular JS application.  In our user-admin erdiko theme,  user-admin\\app\\themes\\user-admin , we use the  theme.json  file to define which Javascript files are included on the page to serve the Angular application. Please refer to our  erdiko documentation  for more information on customizing themes and routes.  The build npm script (noted below) from the Angular CLI application actually compiles the typecsript into common JS files. We would highly recommend reviewing this file if you plan on editing any of the Angular code.", 
            "title": "How Erdiko serves the Angular application (GUI)"
        }, 
        {
            "location": "/user-admin/#setup-configuration-of-ngx-user-admin-for-local-development-optional", 
            "text": "If you wish to modify the existing Angular application you will need to have a local development environment.  For example you may wish to customize a component by extending it or create a new component and add it to your app.  Running the Angular CLI application locally is an easy way to see your changes quickly before \"building\" and allowing the Erdiko Application to serve the compiled files.  The source of the Angular code is at  user-admin/app/themes/user-admin/src/app", 
            "title": "Setup / Configuration of ngx-user-admin for local development (optional)"
        }, 
        {
            "location": "/user-admin/#npm-local-server", 
            "text": "This command will start the npm server locally. Files in the angular application are then \"watched\" and updates to the angular application will be displayed once you save the files.  You can view the local server at this address: http://localhost:4200  cd app/themes/user-admin/src/app\nnpm run start", 
            "title": "NPM Local Server"
        }, 
        {
            "location": "/user-admin/#compiling-your-changes", 
            "text": "Once you have tested and completed your updates, you must \"build\" the application to compile the typescript to be served by the erdiko application. This step is required before any code can be deployed to a staging or production server.  npm run build  You can view the Erdiko application at this address: http://docker.local:8088", 
            "title": "Compiling your changes"
        }, 
        {
            "location": "/user-admin/gui/", 
            "text": "User Admin GUI\n\n\nIf you are able to see the page in the screenshot below then...congratulations you're ready to start using the admin!\n\n\nNow, let's get started with an overview of what this application does.\n\n\nLog-In\n\n\n\n\nAt the very start of the app, you should see the Email and Password form.\n\n\nYou can use the following credentials to start the log-in process.\n\n\nUser:\n\n\nerdiko@arroyolabs.com\n\n\n\nPassword:\n\n\npassword\n\n\n\nAssuming everything goes well, you should be brought into the home page and a message that tells you that the Login is Successful.\nLets click on \nCreate User\n below the Erdiko User Admin header title to create our first User.\n\n\n\n\nCreate User\n\n\nWhen Create a User is clicked from the home page, you will be directed to the following page:\n\n\n\n\nThe User information requires a name, valid email address, a role (Admin, User, etc) as well as a password that requires at least a numeric character and at least 5 characters.\n\n\nLet's create a User name created at random ...say Cody Bellinger.\n\n\n\n\nWhen valid name, email address and password is used, a new user will be created.\n\n\n\n\nUser List\n\n\nWhen User List is clicked from either the navigation bar or the content. Below is the list of names containing the names generated from our database.\n(If you have jumped in straight to the User List without creating a user, the list will be empty).\nThe user list will be generated as soon as you start creating users! (Cody Bellinger is available at top of the list from our previous examplef).\n\n\n\n\nUsers-Event-Log\n\n\nErdiko's User Admin package collects significant histories of action taken by each user. When \nUser Event Log\n is clicked, a brief overview of every action every user has made is generated.\n\n\n\n\nEdit / Update User Information\n\n\nIf/When you decide that the user information is outdated and needs to be changed, click on the \nEdit\n link in the Row of a user you would like changed.\nIn the Edit-User Page's \nEdit User\n tab, all the User information is available for change. In the Edit-User page, value of name, email and user's role which are initially given in the Create User section can be changed.\nWhen all the editable information are valid, the \nSave\n button will be enabled.\n\n\n\n\nCody Bellinger's name and email will be replaced by Clark Kent and his email address. (Notice how the User ID, Joined Date as well as Last Login is same as before).\n\n\n\n\nCody Bellinger is now Clark Kent!\n\n\n\n\nYou can go back to the User-List to confirm the change.\n\n\n\n\nEdit / Update User Password\n\n\nJust like changing the User Information, User Password can also be changed with ease.\n\n\nClick on the \nUpdate Password\n tab next to the \nEdit User\n tab to create a new password. Just like as in \nCreate User\n, the new password also requires at least a numeric character and at least 5 characters.\n\n\nPassword being changed is shown below:\n\n\n\n\nUser-Event Log\n\n\nBelow the Edit User form is an User Event Log. This table generates the grid listing all the actions taken by this specified user. Because this user has not taken any action thus far, none is generated.\n\n\nDelete User\n\n\nIf the User happenned to be created by a mistake, the red \nDelete\n button is available at the last column of the \nUser List\n. Please click the Delete button of the User's Row you want deleted.\n\n\nIt will prompt you one last time to ensure this is the action you would want to take.\n\n\n\nAfter confirming the action, quick glance at the top of User List will verify that Clark Kent is no more.\n\n\n\n\nLog-Out\n\n\nIf everything is well finished, click the \nLogout\n link in the Navigation Bar to logout.", 
            "title": "User Interface (GUI)"
        }, 
        {
            "location": "/user-admin/gui/#user-admin-gui", 
            "text": "If you are able to see the page in the screenshot below then...congratulations you're ready to start using the admin!  Now, let's get started with an overview of what this application does.", 
            "title": "User Admin GUI"
        }, 
        {
            "location": "/user-admin/gui/#log-in", 
            "text": "At the very start of the app, you should see the Email and Password form.  You can use the following credentials to start the log-in process.  User:  erdiko@arroyolabs.com  Password:  password  Assuming everything goes well, you should be brought into the home page and a message that tells you that the Login is Successful.\nLets click on  Create User  below the Erdiko User Admin header title to create our first User.", 
            "title": "Log-In"
        }, 
        {
            "location": "/user-admin/gui/#create-user", 
            "text": "When Create a User is clicked from the home page, you will be directed to the following page:   The User information requires a name, valid email address, a role (Admin, User, etc) as well as a password that requires at least a numeric character and at least 5 characters.  Let's create a User name created at random ...say Cody Bellinger.   When valid name, email address and password is used, a new user will be created.", 
            "title": "Create User"
        }, 
        {
            "location": "/user-admin/gui/#user-list", 
            "text": "When User List is clicked from either the navigation bar or the content. Below is the list of names containing the names generated from our database.\n(If you have jumped in straight to the User List without creating a user, the list will be empty).\nThe user list will be generated as soon as you start creating users! (Cody Bellinger is available at top of the list from our previous examplef).", 
            "title": "User List"
        }, 
        {
            "location": "/user-admin/gui/#users-event-log", 
            "text": "Erdiko's User Admin package collects significant histories of action taken by each user. When  User Event Log  is clicked, a brief overview of every action every user has made is generated.", 
            "title": "Users-Event-Log"
        }, 
        {
            "location": "/user-admin/gui/#edit-update-user-information", 
            "text": "If/When you decide that the user information is outdated and needs to be changed, click on the  Edit  link in the Row of a user you would like changed.\nIn the Edit-User Page's  Edit User  tab, all the User information is available for change. In the Edit-User page, value of name, email and user's role which are initially given in the Create User section can be changed.\nWhen all the editable information are valid, the  Save  button will be enabled.   Cody Bellinger's name and email will be replaced by Clark Kent and his email address. (Notice how the User ID, Joined Date as well as Last Login is same as before).   Cody Bellinger is now Clark Kent!   You can go back to the User-List to confirm the change.", 
            "title": "Edit / Update User Information"
        }, 
        {
            "location": "/user-admin/gui/#edit-update-user-password", 
            "text": "Just like changing the User Information, User Password can also be changed with ease.  Click on the  Update Password  tab next to the  Edit User  tab to create a new password. Just like as in  Create User , the new password also requires at least a numeric character and at least 5 characters.  Password being changed is shown below:", 
            "title": "Edit / Update User Password"
        }, 
        {
            "location": "/user-admin/gui/#user-event-log", 
            "text": "Below the Edit User form is an User Event Log. This table generates the grid listing all the actions taken by this specified user. Because this user has not taken any action thus far, none is generated.", 
            "title": "User-Event Log"
        }, 
        {
            "location": "/user-admin/gui/#delete-user", 
            "text": "If the User happenned to be created by a mistake, the red  Delete  button is available at the last column of the  User List . Please click the Delete button of the User's Row you want deleted.  It will prompt you one last time to ensure this is the action you would want to take.  After confirming the action, quick glance at the top of User List will verify that Clark Kent is no more.", 
            "title": "Delete User"
        }, 
        {
            "location": "/user-admin/gui/#log-out", 
            "text": "If everything is well finished, click the  Logout  link in the Navigation Bar to logout.", 
            "title": "Log-Out"
        }, 
        {
            "location": "/user-admin/angular/", 
            "text": "The GUI for the user-admin is created using that latest \nAngular framework\n.  Lets take a look at how this works.\n\n\nDirectory Hierarchy\n\n\nThe following is a brief hiearchy that highlights the components and the services.\n\n\n\u251c\u2500\u2500 auth.guard.ts\n\u251c\u2500\u2500 auth.service.ts\n\u251c\u2500\u2500 header\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 header.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 header.component.ts\n\u251c\u2500\u2500 home\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 home.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 home.component.ts\n\u251c\u2500\u2500 login\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 login.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 login.component.ts\n\u251c\u2500\u2500 message\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 message.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 message.component.ts\n\u251c\u2500\u2500 message.service.ts\n\u251c\u2500\u2500 password\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 password.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 password.component.ts\n\u251c\u2500\u2500 user-admin.module.ts\n\u251c\u2500\u2500 user-edit\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 user-edit.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user-edit.component.ts\n\u251c\u2500\u2500 user-event-log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 user-event-log.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user-event-log.component.ts\n\u251c\u2500\u2500 user-list\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 user-list.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user-list.component.ts\n\u251c\u2500\u2500 user-resolve.service.ts\n\u251c\u2500\u2500 user.model.ts\n\u251c\u2500\u2500 users-event-log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 users-event-log.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users-event-log.component.ts\n\u2514\u2500\u2500 users.service.ts\n\n\n\n\nComponents\n\n\nNgx-User-Admins are broken up in following Components.\nNote: tpl.ts is used instead of HTML due to compilation process with rollup.js\n\n\nHeader Component\n\n\nHeader Component contains the header menu used to navigate to User List and User Event Log.\nAt logged in state, the option to log out is available.\n\n\nComponent \n Template Files\n\n\n\n\nheader.component.tpl.ts\n\n\nheader.component.ts\n\n\n\n\nHome Component\n\n\nHome Component holds the page the user-admin will see once logged in. From there, the user-admin can opt to create a user, go to User List or go to User Event Log.\n\n\nComponent \n Template Files\n\n\n\n\nhome.component.tpl.ts\n\n\nhome.component.ts\n\n\n\n\nLogin\n\n\nLogin Components displays the Login form that is displayed when user is to log in. It also houses the user login form validation.\n\n\nComponent \n Template Files\n\n\n\n\nlogin.component.tpl.ts\n\n\nlogin.component.ts\n\n\n\n\nMessage\n\n\nMessage Components hold small notification on the UI whenever there are updates. If the user-admin is successfully / unsuccessfully adding, editing, deleting\nusers in the database, this component is responsible of such notification.\n\n\nComponent \n Template Files\n\n\n\n\nmessage.component.tpl.ts\n\n\nmessage.component.ts\n\n\n\n\nPassword\n\n\nPassword Component is responsible for changing the user's password.\n\n\nComponent \n Template Files\n\n\n\n\npassword.component.tpl.ts\n\n\npassword.component.ts\n\n\n\n\nUser-Edit\n\n\nUser Edit Component's function is split into to two tabs:\n\n\n\n\nEdit the name, email address, role associated with the user\n\n\nChange the password assoiated with the user (See Password Component).\n\n\n\n\nComponent \n Template Files\n\n\n\n\nuser-edit.component.tpl.ts\n\n\nuser-edit.component.ts\n\n\n\n\nUser-Event-Log\n\n\nUser Event Log Component is nested within the User-Edit component and is displayed under the user-edit form.\nIt retrieves recorded action the specified user has taken. The component also features sort and pagination for easy organization.\n\n\nComponent \n Template Files\n\n\n\n\nuser-event-log.component.tpl.ts\n\n\nuser-event-log.component.ts\n\n\n\n\nUser-List\n\n\nUser-List Component retrieves all the users that are on the database. From here user-admin may target specific user to edit or delete.\n\n\nComponent \n Template Files\n\n\n\n\nuser-list.component.tpl.ts\n\n\nuser-list.component.ts\n\n\n\n\nUsers-Event-Log\n\n\nUsers-Event-Log component generates aggregate of all actions taken by every user.\nThe component also features sort and pagination for easy organization.\n\n\nComponent \n Template Files\n\n\n\n\nuser-event-log.component.tpl.ts\n\n\nuser-event-log.component.ts\n\n\n\n\nServices\n\n\nAuth - auth.service.ts\n\n\nThis service handles logging the users in and out.\n\n\nComponents/Services Using this service:\n - Header Component\n - Login Component\n - Users Service\n\n\nMessage - message.service.ts\n\n\nThis service handles the observables which relays information from source to the message component.\n\n\nComponents/Services Using this service:\n - Message Component\n - User Edit Component\n - User List Component\n\n\nUser Resolve - user-resolve.service.ts\n\n\nThis service returns a User model for a provided ID, if one is found.\nIf not found, it returns false and navigate the user to the default route\n\n\nComponents/Services Using this service:\n- Users Service\n\n\nUsers - users.service.ts\n\n\nThis service deals with create/retrieve/update/delete aspects of the Users.\nIt is also responsible of listing the users as well as retrieving the user events.\n\n\nComponents/Services Using this service:\n\n\n\n\nUser Edit Component\n\n\nAuth Service\n\n\nUser Event Log Component\n\n\nUser List Component\n\n\nUsers Event Log Component\n\n\nUser Resolve Service", 
            "title": "Angular UI"
        }, 
        {
            "location": "/user-admin/angular/#directory-hierarchy", 
            "text": "The following is a brief hiearchy that highlights the components and the services.  \u251c\u2500\u2500 auth.guard.ts\n\u251c\u2500\u2500 auth.service.ts\n\u251c\u2500\u2500 header\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 header.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 header.component.ts\n\u251c\u2500\u2500 home\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 home.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 home.component.ts\n\u251c\u2500\u2500 login\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 login.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 login.component.ts\n\u251c\u2500\u2500 message\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 message.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 message.component.ts\n\u251c\u2500\u2500 message.service.ts\n\u251c\u2500\u2500 password\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 password.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 password.component.ts\n\u251c\u2500\u2500 user-admin.module.ts\n\u251c\u2500\u2500 user-edit\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 user-edit.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user-edit.component.ts\n\u251c\u2500\u2500 user-event-log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 user-event-log.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user-event-log.component.ts\n\u251c\u2500\u2500 user-list\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 user-list.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 user-list.component.ts\n\u251c\u2500\u2500 user-resolve.service.ts\n\u251c\u2500\u2500 user.model.ts\n\u251c\u2500\u2500 users-event-log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 users-event-log.component.tpl.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users-event-log.component.ts\n\u2514\u2500\u2500 users.service.ts", 
            "title": "Directory Hierarchy"
        }, 
        {
            "location": "/user-admin/angular/#components", 
            "text": "Ngx-User-Admins are broken up in following Components.\nNote: tpl.ts is used instead of HTML due to compilation process with rollup.js", 
            "title": "Components"
        }, 
        {
            "location": "/user-admin/angular/#header-component", 
            "text": "Header Component contains the header menu used to navigate to User List and User Event Log.\nAt logged in state, the option to log out is available.  Component   Template Files   header.component.tpl.ts  header.component.ts", 
            "title": "Header Component"
        }, 
        {
            "location": "/user-admin/angular/#home-component", 
            "text": "Home Component holds the page the user-admin will see once logged in. From there, the user-admin can opt to create a user, go to User List or go to User Event Log.  Component   Template Files   home.component.tpl.ts  home.component.ts", 
            "title": "Home Component"
        }, 
        {
            "location": "/user-admin/angular/#login", 
            "text": "Login Components displays the Login form that is displayed when user is to log in. It also houses the user login form validation.  Component   Template Files   login.component.tpl.ts  login.component.ts", 
            "title": "Login"
        }, 
        {
            "location": "/user-admin/angular/#message", 
            "text": "Message Components hold small notification on the UI whenever there are updates. If the user-admin is successfully / unsuccessfully adding, editing, deleting\nusers in the database, this component is responsible of such notification.  Component   Template Files   message.component.tpl.ts  message.component.ts", 
            "title": "Message"
        }, 
        {
            "location": "/user-admin/angular/#password", 
            "text": "Password Component is responsible for changing the user's password.  Component   Template Files   password.component.tpl.ts  password.component.ts", 
            "title": "Password"
        }, 
        {
            "location": "/user-admin/angular/#user-edit", 
            "text": "User Edit Component's function is split into to two tabs:   Edit the name, email address, role associated with the user  Change the password assoiated with the user (See Password Component).   Component   Template Files   user-edit.component.tpl.ts  user-edit.component.ts", 
            "title": "User-Edit"
        }, 
        {
            "location": "/user-admin/angular/#user-event-log", 
            "text": "User Event Log Component is nested within the User-Edit component and is displayed under the user-edit form.\nIt retrieves recorded action the specified user has taken. The component also features sort and pagination for easy organization.  Component   Template Files   user-event-log.component.tpl.ts  user-event-log.component.ts", 
            "title": "User-Event-Log"
        }, 
        {
            "location": "/user-admin/angular/#user-list", 
            "text": "User-List Component retrieves all the users that are on the database. From here user-admin may target specific user to edit or delete.  Component   Template Files   user-list.component.tpl.ts  user-list.component.ts", 
            "title": "User-List"
        }, 
        {
            "location": "/user-admin/angular/#users-event-log", 
            "text": "Users-Event-Log component generates aggregate of all actions taken by every user.\nThe component also features sort and pagination for easy organization.  Component   Template Files   user-event-log.component.tpl.ts  user-event-log.component.ts", 
            "title": "Users-Event-Log"
        }, 
        {
            "location": "/user-admin/angular/#services", 
            "text": "", 
            "title": "Services"
        }, 
        {
            "location": "/user-admin/angular/#auth-authservicets", 
            "text": "This service handles logging the users in and out.  Components/Services Using this service:\n - Header Component\n - Login Component\n - Users Service", 
            "title": "Auth - auth.service.ts"
        }, 
        {
            "location": "/user-admin/angular/#message-messageservicets", 
            "text": "This service handles the observables which relays information from source to the message component.  Components/Services Using this service:\n - Message Component\n - User Edit Component\n - User List Component", 
            "title": "Message - message.service.ts"
        }, 
        {
            "location": "/user-admin/angular/#user-resolve-user-resolveservicets", 
            "text": "This service returns a User model for a provided ID, if one is found.\nIf not found, it returns false and navigate the user to the default route  Components/Services Using this service:\n- Users Service", 
            "title": "User Resolve - user-resolve.service.ts"
        }, 
        {
            "location": "/user-admin/angular/#users-usersservicets", 
            "text": "This service deals with create/retrieve/update/delete aspects of the Users.\nIt is also responsible of listing the users as well as retrieving the user events.  Components/Services Using this service:   User Edit Component  Auth Service  User Event Log Component  User List Component  Users Event Log Component  User Resolve Service", 
            "title": "Users - users.service.ts"
        }, 
        {
            "location": "/user-admin/extending-angular/", 
            "text": "Extending the ngx-user-admin Package\n\n\nExtending the ngx-user-admin package is simple and a safe way to extend the package for usage in your package. While the official \nAngular Docs\n have more complete instructions and tips on how to extend elements, I have created an example that we dissect below where we extend two components and we provide custom a custom HTML template: Home Component \n User Edit Component.\n\n\nYou can see the full example on my \ngithub repo here\n).\n\n\nThis example is a \"fresh\" vanilla Angular CLI application I created for this example via the simple command \nng new ngx-user-admin-test\n.  \n\n\nWhy do I need to extend the components?\n\n\nExtending components allows you to add or manipulate existing code so you can use it more effectively in your application. The reason we suggest extending this package is for package re-use, the parent class is unaffected no matter what you do in your custom code.\n\n\nExtending the components also allows the underlying package to be upgraded without need to patch your custom code.\n\n\nCreate your Components \n Application Module Set Up\n\n\nI created two components (MyhomeComponent \n MyusereditComponent) with the following commands:\n\n\nng generate component myhome \n ng generate component myuseredit\n\n\nAfter importing the \n@erdiko/ngx-user-admin\n module, you will need to import these into your new Application module as seen below:\n\n\n(\nNOTE\n - Custom code will be noted by comments prefixed with \n**UPDATE**\n)\n\n\nFile: \napp/app.module.ts\n\n\n...\n\n// **UPDATE** Import the ngx-user-admin module\nimport { UserAdminModule }      from '@erdiko/ngx-user-admin';\n\n...\n\n// your extended components from ngx-user-admin package added \n// automatically by ng-cli\n\nimport { MyhomeComponent }      from './myhome/myhome.component';\nimport { MyusereditComponent }  from './myuseredit/myuseredit.component';\n\n\n\n\nYou will then have to create some custom routing to load your soon to be extended components and import this into your module:\n\n\nFile: \napp/app.module.ts\n\n\n...\n\n/**\n  **UPDATE** Custom routing to make sure we use our extended components\n */\n\n// clang-format off\nconst routes: Routes = [\n     {\n         path: 'user',\n         component: MyusereditComponent\n     },\n     {\n         path: '',\n         component: MyhomeComponent\n     },\n     {\n         path: '**',\n         redirectTo: ''\n     }\n];\n// clang-format on\n\n@NgModule({\n  declarations: [\n    AppComponent,\n\n    // declare our custom components, this is added automatically by ng-cli\n    MyhomeComponent,\n    MyusereditComponent\n  ],\n  imports: [\n\n    ...\n\n    // **UPDATE** Import our custom routes\n    RouterModule.forRoot(routes),\n  ],\n  providers: [ ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n\nAnd then you will need to update the Application component HTML template to include the \nrouter-outlet\n component so we can see the router output.\n\n\nFile: \napp/app.component.html\n\n\n!-- **UPDATE** add all this HTML below to your template --\n\n\nh1\n\n  {{title}}\n\n/h1\n\n\ndiv class=\npage-content\n\n    \nrouter-outlet\n/router-outlet\n\n\n/div\n\n\n\n\n\nExtended Component Example: Home Component\n\n\nBelow is an example of an extended version of the ngx-user-admin Home Component. This simple example shows how we can provide a custom HTML template to the component so we can provide a different list of links for the user. \n\n\nA screenshot of this custom component in action:\n\n\n\n\nHere are the two files that make up our custom component:\n\n\n(\nNOTE\n - Custom code will be noted by comments prefixed with \n**UPDATE**\n)\n\n\nFile: \nmyhome/myhome.component.ts\n\n\n...\n\n// **UPDATE** Import the component we will extend\nimport { HomeComponent }   from '@erdiko/ngx-user-admin';\n\n@Component({\n  selector: 'app-myhome',\n  templateUrl: './myhome.component.html'\n})\nexport class MyhomeComponent extends HomeComponent {\n\n  constructor() {\n    // **UPDATE** call the parent component's constructor method\n    super();\n  }\n\n}\n\n\n\n\nFile: \nmyhome/myhome.component.html\n\n\n!-- **UPDATE** copy and paste this html into the template --\n\n\ndiv class=\nrow\n\n  \ndiv class=\ncol-xs-12\n\n    \nh1 id=\nwelcome-title\nMy Extended ngx-user-admin Home Component\n/h1\n\n  \n/div\n\n\n/div\n\n\ndiv class=\nrow\n\n  \ndiv class=\ncol-xs-12\n\n    \nbr /\n\n  \n/div\n\n\n/div\n\n\ndiv class=\nrow\n\n  \ndiv class=\ncol-sm-6 col-xs-12\n\n    \nul class=\nlist-group\n\n      \nli class=\nlist-group-item\n\n        \na routerLink=\n/user/\nMy Create a User\n/a\n\n      \n/li\n\n    \n/ul\n\n  \n/div\n\n\n/div\n\n\n\n\n\nExtended Component Example: User Edit\n\n\nBelow is an example of an extended version of the ngx-user-admin Home Component. This simple example shows how we can provide a custom HTML template to the component so we can provide a different list of links for the user.  \n\n\nA screenshot of this custom component in action:\n\n\n\n\nHere are the two files that make up our custom component:\n\n\n(\nNOTE\n - Custom code will be noted by comments prefixed with \n**UPDATE**\n)\n\n\nFile: \nmyuseredit/myuseredit.component.ts\n\n\n...\n\n// **UPDATE** Import the components \n service we will extend\nimport { UserEditComponent }    from '@erdiko/ngx-user-admin';\nimport { AuthService }          from '@erdiko/ngx-user-admin';\nimport { UsersService }         from '@erdiko/ngx-user-admin';\nimport { MessageService }       from '@erdiko/ngx-user-admin';\n\n@Component({\n  selector: 'app-myusereditcomponent',\n  templateUrl: './myuseredit.component.html',\n\n  // **UPDATE** add the following services as providers\n  providers: [AuthService, UsersService, MessageService]\n})\nexport class MyusereditComponent extends UserEditComponent {\n\n    // **UPDATE** the constructor to accept the services as params\n    constructor(\n            @Inject(UsersService) usersService: UsersService,\n            @Inject(ActivatedRoute) route: ActivatedRoute,\n            @Inject(Router) router: Router,\n            @Inject(MessageService) messageService: MessageService) {\n\n        // **UPDATE** call the parent component's constructor method\n        super(usersService, route, router, messageService);\n    }\n\n}\n\n\n\n\nFile: \nmyuseredit/myuseredit.component.html\n\n\n!-- **UPDATE** copy and paste this html into the template --\n\n\ndiv class=\nrow\n\n    \ndiv class=\ncol-xs-12\n\n        \nbutton class=\nbtn btn-info btn-sm\n routerLink=\n/\n\n            \ni class=\nfa fa-chevron-left\n aria-hidden=\ntrue\n/i\n Back to Home\n        \n/button\n\n    \n/div\n\n\n/div\n\n\ndiv class=\nrow\n\n    \ndiv class=\ncol-xs-12\n\n        \nbr/\n\n    \n/div\n\n\n/div\n\n\ndiv class=\nrow\n\n    \ndiv class=\ncol-xs-12\n\n        \ndiv class=\npanel panel-default\n id=\nedit-update\n\n\n            \nh2\nMy User Edit Component\n/h2\n\n\n            \np\n[Form goes here]\n/p\n\n\n        \n/div\n\n    \n/div\n\n\n/div", 
            "title": "Extending Angular UI"
        }, 
        {
            "location": "/user-admin/extending-angular/#extending-the-ngx-user-admin-package", 
            "text": "Extending the ngx-user-admin package is simple and a safe way to extend the package for usage in your package. While the official  Angular Docs  have more complete instructions and tips on how to extend elements, I have created an example that we dissect below where we extend two components and we provide custom a custom HTML template: Home Component   User Edit Component.  You can see the full example on my  github repo here ).  This example is a \"fresh\" vanilla Angular CLI application I created for this example via the simple command  ng new ngx-user-admin-test .", 
            "title": "Extending the ngx-user-admin Package"
        }, 
        {
            "location": "/user-admin/extending-angular/#why-do-i-need-to-extend-the-components", 
            "text": "Extending components allows you to add or manipulate existing code so you can use it more effectively in your application. The reason we suggest extending this package is for package re-use, the parent class is unaffected no matter what you do in your custom code.  Extending the components also allows the underlying package to be upgraded without need to patch your custom code.", 
            "title": "Why do I need to extend the components?"
        }, 
        {
            "location": "/user-admin/extending-angular/#create-your-components-application-module-set-up", 
            "text": "I created two components (MyhomeComponent   MyusereditComponent) with the following commands:  ng generate component myhome   ng generate component myuseredit  After importing the  @erdiko/ngx-user-admin  module, you will need to import these into your new Application module as seen below:  ( NOTE  - Custom code will be noted by comments prefixed with  **UPDATE** )  File:  app/app.module.ts  ...\n\n// **UPDATE** Import the ngx-user-admin module\nimport { UserAdminModule }      from '@erdiko/ngx-user-admin';\n\n...\n\n// your extended components from ngx-user-admin package added \n// automatically by ng-cli\n\nimport { MyhomeComponent }      from './myhome/myhome.component';\nimport { MyusereditComponent }  from './myuseredit/myuseredit.component';  You will then have to create some custom routing to load your soon to be extended components and import this into your module:  File:  app/app.module.ts  ...\n\n/**\n  **UPDATE** Custom routing to make sure we use our extended components\n */\n\n// clang-format off\nconst routes: Routes = [\n     {\n         path: 'user',\n         component: MyusereditComponent\n     },\n     {\n         path: '',\n         component: MyhomeComponent\n     },\n     {\n         path: '**',\n         redirectTo: ''\n     }\n];\n// clang-format on\n\n@NgModule({\n  declarations: [\n    AppComponent,\n\n    // declare our custom components, this is added automatically by ng-cli\n    MyhomeComponent,\n    MyusereditComponent\n  ],\n  imports: [\n\n    ...\n\n    // **UPDATE** Import our custom routes\n    RouterModule.forRoot(routes),\n  ],\n  providers: [ ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }  And then you will need to update the Application component HTML template to include the  router-outlet  component so we can see the router output.  File:  app/app.component.html  !-- **UPDATE** add all this HTML below to your template --  h1 \n  {{title}} /h1  div class= page-content \n     router-outlet /router-outlet  /div", 
            "title": "Create your Components &amp; Application Module Set Up"
        }, 
        {
            "location": "/user-admin/extending-angular/#extended-component-example-home-component", 
            "text": "Below is an example of an extended version of the ngx-user-admin Home Component. This simple example shows how we can provide a custom HTML template to the component so we can provide a different list of links for the user.   A screenshot of this custom component in action:   Here are the two files that make up our custom component:  ( NOTE  - Custom code will be noted by comments prefixed with  **UPDATE** )  File:  myhome/myhome.component.ts  ...\n\n// **UPDATE** Import the component we will extend\nimport { HomeComponent }   from '@erdiko/ngx-user-admin';\n\n@Component({\n  selector: 'app-myhome',\n  templateUrl: './myhome.component.html'\n})\nexport class MyhomeComponent extends HomeComponent {\n\n  constructor() {\n    // **UPDATE** call the parent component's constructor method\n    super();\n  }\n\n}  File:  myhome/myhome.component.html  !-- **UPDATE** copy and paste this html into the template --  div class= row \n   div class= col-xs-12 \n     h1 id= welcome-title My Extended ngx-user-admin Home Component /h1 \n   /div  /div  div class= row \n   div class= col-xs-12 \n     br / \n   /div  /div  div class= row \n   div class= col-sm-6 col-xs-12 \n     ul class= list-group \n       li class= list-group-item \n         a routerLink= /user/ My Create a User /a \n       /li \n     /ul \n   /div  /div", 
            "title": "Extended Component Example: Home Component"
        }, 
        {
            "location": "/user-admin/extending-angular/#extended-component-example-user-edit", 
            "text": "Below is an example of an extended version of the ngx-user-admin Home Component. This simple example shows how we can provide a custom HTML template to the component so we can provide a different list of links for the user.    A screenshot of this custom component in action:   Here are the two files that make up our custom component:  ( NOTE  - Custom code will be noted by comments prefixed with  **UPDATE** )  File:  myuseredit/myuseredit.component.ts  ...\n\n// **UPDATE** Import the components   service we will extend\nimport { UserEditComponent }    from '@erdiko/ngx-user-admin';\nimport { AuthService }          from '@erdiko/ngx-user-admin';\nimport { UsersService }         from '@erdiko/ngx-user-admin';\nimport { MessageService }       from '@erdiko/ngx-user-admin';\n\n@Component({\n  selector: 'app-myusereditcomponent',\n  templateUrl: './myuseredit.component.html',\n\n  // **UPDATE** add the following services as providers\n  providers: [AuthService, UsersService, MessageService]\n})\nexport class MyusereditComponent extends UserEditComponent {\n\n    // **UPDATE** the constructor to accept the services as params\n    constructor(\n            @Inject(UsersService) usersService: UsersService,\n            @Inject(ActivatedRoute) route: ActivatedRoute,\n            @Inject(Router) router: Router,\n            @Inject(MessageService) messageService: MessageService) {\n\n        // **UPDATE** call the parent component's constructor method\n        super(usersService, route, router, messageService);\n    }\n\n}  File:  myuseredit/myuseredit.component.html  !-- **UPDATE** copy and paste this html into the template --  div class= row \n     div class= col-xs-12 \n         button class= btn btn-info btn-sm  routerLink= / \n             i class= fa fa-chevron-left  aria-hidden= true /i  Back to Home\n         /button \n     /div  /div  div class= row \n     div class= col-xs-12 \n         br/ \n     /div  /div  div class= row \n     div class= col-xs-12 \n         div class= panel panel-default  id= edit-update \n\n             h2 My User Edit Component /h2 \n\n             p [Form goes here] /p \n\n         /div \n     /div  /div", 
            "title": "Extended Component Example: User Edit"
        }, 
        {
            "location": "/user-admin/contributing/", 
            "text": "Contributing to Erdiko\n\n\nWe love when folks from the community get involved.  We welcome pull requests and encourage folks to contribute in any way that makes sense for them.\n\n\nHow to contribute\n\n\nPlease see our \nContributing page\n for more information.", 
            "title": "Contributing"
        }, 
        {
            "location": "/user-admin/contributing/#contributing-to-erdiko", 
            "text": "We love when folks from the community get involved.  We welcome pull requests and encourage folks to contribute in any way that makes sense for them.", 
            "title": "Contributing to Erdiko"
        }, 
        {
            "location": "/user-admin/contributing/#how-to-contribute", 
            "text": "Please see our  Contributing page  for more information.", 
            "title": "How to contribute"
        }, 
        {
            "location": "/users/", 
            "text": "Users\n\n\nerdiko/users package\n\n\nInstallation:\n\n\ncomposer require erdiko/users\n\n\n\n\nGit repo: \nhttps://github.com/Erdiko/users\n\n\nIntro\n\n\nThe \nerdiko/users\n is a package adding Service Models and AJAX endpoints for user\nmanagement in a Erdiko application.\n\n\nThis package provides ORM entities \n service models to manage user records, and exposes AJAX endpoints to allow your application to interact with these service models.\n\n\nPackage Installation \n Setup:\n\n\nInstall the Package\n\n\nInstall the package via composer:\n\n\ncomposer require erdiko/users\n\n\nCreate \n Install the DB\n\n\nThis package relies upon a number of database tables to store user records. You must create the database \n tables before you can use this package.\n\n\nWe highly recomend installing the DB and tables with our install scripts found in the erdiko/user-admin repo (\nscripts/install-db.sh\n). More information can be found on the erdiko/user-admin README file.\n\n\nIf you would like to install the database manually, please use the \nusers\\sql\\dumps\\user-admin.sql\n to create the database defintion.\n\n\nAdd the required routes to your Erdiko application\n\n\nBelow are examples of the minimum required routes to interact with the \nusers\n package:\n\n\n\n\nLogin Controller OR UserAuthenticationAjax Controller Route\n\n\nThe Login Controller exposes self-contained login/logout actions and views, these methods expose an HTML form to allow users to login\n\n\n\"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\UserAjax\"\n\n\n\n\n\n\nThe UserAuthenticationAjax controller provides actions to manage login/logout and password related situations as forgotPass and changePassword. This route is for AJAX login \n logout.\n\n\n\"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\UserAuthenticationAjax\"\n\n\n\n\n\n\n\n\n\n\nUserajax Controller Route\n\n\nProvides actions relative to manage users without privileges, to have it accessible.\n\n\n\"/[ROUTE NAME]]/:action\": \"\\erdiko\\users\\controllers\\UserAjax\"\n\n\n\n\n\n\n\n\n\n\nadmin\\Userajax Controller Route\n\n\nProvides actions relative to manage users as admin level\n\n\n\"/ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\Userajax\"\n\n\n\n\n\n\n\n\n\n\n\n\nExample Route Config\n\n\nBelow is an example config containing all the AJAX endpoints exposed by the package:\n\n\n {\n     \nroutes\n: {\n         \n/ajax/users/admin/:action\n: \n\\erdiko\\users\\controllers\\admin\\UserAjax\n,\n         \n/ajax/users/:action\n: \n\\erdiko\\users\\controllers\\UserAjax\n,\n         \n/ajax/roles/:action\n: \n\\erdiko\\users\\controllers\\RoleAjax\n,\n         \n/ajax/auth/:action\n: \n\\erdiko\\users\\controllers\\UserAuthenticationAjax\n,\n         \n/users/:action\n: \n\\erdiko\\users\\controllers\\Login\n\n     }\n }\n\n\n\n\nCurrent Directory Structure\n\n\nBelow is the current directory structure for the project, with a brief explanation below:\n\n\n\u251c\u2500\u2500 composer.json\n\u251c\u2500\u2500 scripts      \n\u251c\u2500\u2500 sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dumps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 updates\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 entities\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 shared\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 validators\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n\u2514\u2500\u2500 tests\n\n\n\n\nscripts\n\n\nThe scripts directory contains helper scripts to help with package installation, as well some allowing for our CI setup.\n\n\nScripts used to upgrade the DB structure or manipulate persistent data will be stored here in future features.\n\n\nsql\n\n\nThis directory contains complete database dumps and update scripts, named respectively \ndumps\n and \nupdates\n\n\nThe database dumps in \ndumps\n are used to create the initial tables. There is a version of the database structure named \nuser-admin.sql\n that contains the base table definition and an alternate version named \nuser-admin-with-data.sql\n with some sample data used for testing and development of the package.\n\n\nThe \nupdates\n directory contains upgrade SQL scripts used to alter the DB defintion and table structures without touching the existing data in these tables.\n\n\nUpdate File Naming Structure\n\n\nThese files have a naming scheme so we can create a script to run these in order with a future feature. The file name is prepended with an integer indicating the order in which this script needs to be run, the larger the number the later the upgrade.\n\n\nHere is an example filename:\n\n\n[INTEGER WITH LEADING ZEROS]-[USER FRIENDLY NAME].sql\n\n\nsrc\n\n\nThis directory contains all the source files for the package itself: Entities, Models, Controllers, Validator Classes and template partials.\n\n\ntests\n\n\nThis directory contains all the phpunit tests for this package.\n\n\nUnit Testing\n\n\nWe provide unit tests via PHPUnit and we constantly update these tests with feature updates and bug fixes. These tests are run by our CI environment on every commit and build, but you can also run these tests manually from the \ntests\n directory:\n\n\nphpunit AllTests", 
            "title": "Overview"
        }, 
        {
            "location": "/users/#users", 
            "text": "erdiko/users package  Installation:  composer require erdiko/users  Git repo:  https://github.com/Erdiko/users", 
            "title": "Users"
        }, 
        {
            "location": "/users/#intro", 
            "text": "The  erdiko/users  is a package adding Service Models and AJAX endpoints for user\nmanagement in a Erdiko application.  This package provides ORM entities   service models to manage user records, and exposes AJAX endpoints to allow your application to interact with these service models.", 
            "title": "Intro"
        }, 
        {
            "location": "/users/#package-installation-setup", 
            "text": "", 
            "title": "Package Installation &amp; Setup:"
        }, 
        {
            "location": "/users/#install-the-package", 
            "text": "Install the package via composer:  composer require erdiko/users", 
            "title": "Install the Package"
        }, 
        {
            "location": "/users/#create-install-the-db", 
            "text": "This package relies upon a number of database tables to store user records. You must create the database   tables before you can use this package.  We highly recomend installing the DB and tables with our install scripts found in the erdiko/user-admin repo ( scripts/install-db.sh ). More information can be found on the erdiko/user-admin README file.  If you would like to install the database manually, please use the  users\\sql\\dumps\\user-admin.sql  to create the database defintion.", 
            "title": "Create &amp; Install the DB"
        }, 
        {
            "location": "/users/#add-the-required-routes-to-your-erdiko-application", 
            "text": "Below are examples of the minimum required routes to interact with the  users  package:   Login Controller OR UserAuthenticationAjax Controller Route  The Login Controller exposes self-contained login/logout actions and views, these methods expose an HTML form to allow users to login  \"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\UserAjax\"    The UserAuthenticationAjax controller provides actions to manage login/logout and password related situations as forgotPass and changePassword. This route is for AJAX login   logout.  \"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\UserAuthenticationAjax\"      Userajax Controller Route  Provides actions relative to manage users without privileges, to have it accessible.  \"/[ROUTE NAME]]/:action\": \"\\erdiko\\users\\controllers\\UserAjax\"      admin\\Userajax Controller Route  Provides actions relative to manage users as admin level  \"/ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\Userajax\"", 
            "title": "Add the required routes to your Erdiko application"
        }, 
        {
            "location": "/users/#example-route-config", 
            "text": "Below is an example config containing all the AJAX endpoints exposed by the package:   {\n      routes : {\n          /ajax/users/admin/:action :  \\erdiko\\users\\controllers\\admin\\UserAjax ,\n          /ajax/users/:action :  \\erdiko\\users\\controllers\\UserAjax ,\n          /ajax/roles/:action :  \\erdiko\\users\\controllers\\RoleAjax ,\n          /ajax/auth/:action :  \\erdiko\\users\\controllers\\UserAuthenticationAjax ,\n          /users/:action :  \\erdiko\\users\\controllers\\Login \n     }\n }", 
            "title": "Example Route Config"
        }, 
        {
            "location": "/users/#current-directory-structure", 
            "text": "Below is the current directory structure for the project, with a brief explanation below:  \u251c\u2500\u2500 composer.json\n\u251c\u2500\u2500 scripts      \n\u251c\u2500\u2500 sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dumps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 updates\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 entities\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 shared\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 validators\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n\u2514\u2500\u2500 tests", 
            "title": "Current Directory Structure"
        }, 
        {
            "location": "/users/#scripts", 
            "text": "The scripts directory contains helper scripts to help with package installation, as well some allowing for our CI setup.  Scripts used to upgrade the DB structure or manipulate persistent data will be stored here in future features.", 
            "title": "scripts"
        }, 
        {
            "location": "/users/#sql", 
            "text": "This directory contains complete database dumps and update scripts, named respectively  dumps  and  updates  The database dumps in  dumps  are used to create the initial tables. There is a version of the database structure named  user-admin.sql  that contains the base table definition and an alternate version named  user-admin-with-data.sql  with some sample data used for testing and development of the package.  The  updates  directory contains upgrade SQL scripts used to alter the DB defintion and table structures without touching the existing data in these tables.", 
            "title": "sql"
        }, 
        {
            "location": "/users/#update-file-naming-structure", 
            "text": "These files have a naming scheme so we can create a script to run these in order with a future feature. The file name is prepended with an integer indicating the order in which this script needs to be run, the larger the number the later the upgrade.  Here is an example filename:  [INTEGER WITH LEADING ZEROS]-[USER FRIENDLY NAME].sql", 
            "title": "Update File Naming Structure"
        }, 
        {
            "location": "/users/#src", 
            "text": "This directory contains all the source files for the package itself: Entities, Models, Controllers, Validator Classes and template partials.", 
            "title": "src"
        }, 
        {
            "location": "/users/#tests", 
            "text": "This directory contains all the phpunit tests for this package.", 
            "title": "tests"
        }, 
        {
            "location": "/users/#unit-testing", 
            "text": "We provide unit tests via PHPUnit and we constantly update these tests with feature updates and bug fixes. These tests are run by our CI environment on every commit and build, but you can also run these tests manually from the  tests  directory:  phpunit AllTests", 
            "title": "Unit Testing"
        }, 
        {
            "location": "/users/ajax/", 
            "text": "Users Ajax Endpoints\n\n\nIntro\n\n\nThe Users package exposes some AJAX endpoints to allow your Erdiko Application to interact with the underlying service models. \n\n\nSome of these endpoints require an authenticated user and will be noted as such.\n\n\nUnique Response Object Valuess\n\n\nAll of these AJAX endpoints return a JSON formatted response and contain some unique responses as well as common values indicating the success or failure of the request.\n\n\nHere is a brief list of the common response variables:\n\n\n\n\nmethod\n\n\nString indicating the requested method\n\n\n\n\n\n\nsuccess\n\n\nBoolean flag set to true for a successful login attempt, else this is false\n\n\n\n\n\n\nerror_code\n\n\nError code if the login attempt is unsuccessful\n\n\n\n\n\n\nerror_message\n\n\nError message if the login attempt is unsuccessful \n\n\n\n\n\n\n\n\nHere is an example of a successful request response:\n\n\n{\n    \nmethod\n:           \nlogin\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \ntoken\n:            \n1234asdf\n,\n}\n\n\n\n\nIf a request is unsuccessful, we return flags and messaging explaining the error. Here is an example:\n\n\n{\n    \nmethod\n:           \nlogin\n,\n    \nsuccess\n:          false,\n    \nerror_code\n:       1,\n    \nerror_message\n:    \nInvalid email or password provided; User was not found\n\n}\n\n\n\n\nUser Authentication\n\n\npostLogin\n\n\nPOST endpoint that logs a user in via the JWTAuthenticator (\nerdiko\\authenticate\\services\\JWTAuthenticator\n) from the Erdiko\\Authenticate package. \n\n\nAfter successfully validating the user's email and password with the JWTAuthenticator class, the AJAX response will return a JWT token.\n\n\nURL\n\n\n[ROUTE]/login/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nUser's email\n\n\n\n\n\n\npassword\n\n\nUser's password\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\ntoken\n\n\nJWT token generated by the JWTAuthenticator class\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlogin\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \ntoken\n:            \n1234asdf\n,\n}\n\n\n\n\ngetLogout\n\n\nGET endpoint that logs a user out via the BasicAuthenticator (\nerdiko\\authenticate\\services\\BasicAuthenticator\n) from the Erdiko\\Authenticate package. \n\n\nURL\n\n\n[ROUTE]/logout/\n\n\nRequired Parameters\n\n\nn/a\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlogout\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}\n\n\n\n\npostChangepass\n\n\nPOST endpoint that attempts to change a password for an existing user via the BasicAuthenticator (\nerdiko\\authenticate\\services\\BasicAuthenticator\n) from the Erdiko\\Authenticate package. \n\n\nThis method will return false if the user's email and password do not match an existing user.\n\n\nURL\n\n\n[ROUTE]/changepass/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nExisting user's email\n\n\n\n\n\n\ncurrentpass\n\n\nCurrent user's password\n\n\n\n\n\n\nnewpass\n\n\nNew user's password \n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nchangepass\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}\n\n\n\n\npostForgotpass\n\n\nPOST endpoint that will send a \"Reset Password\" email to a user after resetting the user's email to a random string.\n\n\nThis method will return false if the email is not found in the user database.\n\n\nURL\n\n\n[ROUTE]/forgotpass/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nExisting user's email\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nforgotpass\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}\n\n\n\n\nRole\n\n\nAll Role AJAX routes require an authenticated user, and will check for a valid JWT bearer token.\n\n\ngetRoles\n\n\nGET endpoint that returns a list of active roles found in the DB and a count of active users associated with the role.\n\n\nURL\n\n\n[ROUTE]/roles/\n\n\nRequired Parameters\n\n\nn/a\n\n\nUnique Response Object Values\n\n\n\n\nroles\n\n\nArray of existing roles \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nroles\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nroles\n: [\n        {\n            \nid\n: 42,\n            \nname\n: \nCustomer\n,\n            \nactive\n: true,\n            \nusers\n: 30\n        },\n        {\n            \nid\n: 43,\n            \nname\n: \nAdmin\n,\n            \nactive\n: true,\n            \nusers\n: 3\n        }\n    ]\n}\n\n\n\n\ngetRole\n\n\nGET endpoint that returns a JSON representation of a valid Role for a provided ID\nalong with a list of users associate with this role.\n\n\nURL\n\n\n[ROUTE]/role/\n\n\nRequired Parameters\n\n\nn/a\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nObject representation of the role found for the provided ID \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nrole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n: {\n        \nid\n:       43,\n        \nname\n:     \nAdmin\n,\n        \nactive\n:   true,\n        \nusers\n: [\n            {\n                \nid\n:       2,\n                \nemail\n:    \njohn.smith@example.com\n,\n                \nname\n:     \nJohn Smith\n\n            }\n        ]\n    }\n}\n\n\n\n\npostCreaterole\n\n\nPOST endpoint that create a Role record with the provided values.\n\n\nURL\n\n\n[ROUTE]/createrole/\n\n\nRequired Parameters\n\n\n\n\nname\n\n\nstring representing the new role name \n\n\n\n\n\n\nactive\n\n\nboolean flag set to TRUE if the new role is active, false if inactive\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nObject representation of the role created with the request \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ncreaterole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n: {\n        \nid\n:       43,\n        \nname\n:     \nAdmin\n,\n        \nactive\n:   true,\n        \nusers\n: [\n            {\n                \nid\n:       2,\n                \nemail\n:    \njohn.smith@example.com\n,\n                \nname\n:     \nJohn Smith\n\n            }\n        ]\n    }\n}\n\n\n\n\npostUpdaterole\n\n\nPOST endpoint that updates a Role record for a provided ID with the provided value.\n\n\nURL\n\n\n[ROUTE]/updaterole/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nid for the role record to update\n\n\n\n\n\n\nname\n\n\nstring representing the role name to update\n\n\n\n\n\n\nactive\n\n\nboolean flag set to TRUE if the role is active, false if inactive\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nObject representation of the role created with the request \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nupdaterole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n: {\n        \nid\n:       43,\n        \nname\n:     \nAdmin\n,\n        \nactive\n:   true,\n        \nusers\n: [\n            {\n                \nid\n:       2,\n                \nemail\n:    \njohn.smith@example.com\n,\n                \nname\n:     \nJohn Smith\n\n            }\n        ]\n    }\n}\n\n\n\n\npostDeleterole\n\n\nPOST endpoint that deletes a Role based on a provided ID.\n\n\nURL\n\n\n[ROUTE]/deleterole/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nid for the role record to update\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nID of the role that was deleted\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ndeleteerole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n:             43\n}\n\n\n\n\nUser\n\n\nAll User AJAX routes require an authenticated user, and will check for a valid JWT bearer token.\n\n\npostRegister\n\n\nPOST endpoint that creates a User record with the provided values. This mehod returns false if the provided email is already found in the database.\n\n\nURL\n\n\n[ROUTE]/register/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nnew user's email\n\n\n\n\n\n\npassword\n\n\nnew user's password\n\n\n\n\n\n\nrole\n\n\nid for the new user's role, must be a valid role id\n\n\n\n\n\n\nname\n\n\nnew user's name\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nJSON representation of the new user created by the request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nregister\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\ngetList\n\n\nGET endpoint that returns a list of active users found in the DB.\n\n\nURL\n\n\n[ROUTE]/list/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npagesize\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"id\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"desc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nusers\n\n\nObject representation of the role created with the request \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlist\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nusers\n: [\n                {\n                    \nid\n:       2,\n                    \nemail\n:    \njohn.smith@example.com\n,\n                    \nname\n:     \nJohn Smith\n\n                }\n    ]\n}\n\n\n\n\ngetRetrieve\n\n\nGET endpoint that returns a JSON representation of a valid User for a provided ID along with a list of users associate with this role.\n\n\nURL\n\n\n[ROUTE]/retrieve/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn ID for an existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the found for this ID\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nretrieve\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\npostUpdate\n\n\nPOST endpoint that updates a user record for a provided ID with the provided values\n\n\nURL\n\n\n[ROUTE]/update/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn id for an existing user\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\nNone of these parameters are required, but will update the user record if any or all are provided.\n\n\n\n\nname\n\n\nNew name value for the existing user\n\n\n\n\n\n\nemail\n\n\nnew email for the existing user\n\n\n\n\n\n\npassword\n\n\nNew password for the existing user\n\n\n\n\n\n\nrole\n\n\nNew role ID for the existing user\n\n\n\n\n\n\ngateway_customer_id    \n\n\nGateway ID for the existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the user updated by this request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nupdate\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\ngetCancel\n\n\nGET method to deactivate a user for a provided ID.\n\n\nURL\n\n\n[ROUTE]/cancel/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn id for an existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nID for the user that was deactivated\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ncancel\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: 42\n}\n\n\n\n\npostAddUserEvent\n\n\nPOST method to create a new event Log for current user\n\n\nURL\n\n\n[ROUTE]/adduserevent/\n\n\nRequired Parameters\n\n\n\n\nevent\n\n\nstring indicating the event type\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\nNone of these parameters are required, but will update the user record if any or all are provided.\n\n\n\n\nevent_data\n\n\nJSON object containing event log data\n\n\n\n\n\n\nevent_source\n\n\nString indicating the event log source, defaults to \"front_end\"    \n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nlog\n\n\nObject representing the user logged event     \n\n\nuser_id\n\n\nID for the user that just had an event logged\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nadduserevent\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nlog\n: {\n        \nevent\n:        \nbutton-click\n,\n        \nevent_data\n:   \n{'id': 2}\n,\n        \ncreated_at\n:   \n2017-07-01 00:00:01\n\n    },\n    \nuser_id\n:          42\n}\n\n\n\n\nAdmin User\n\n\nAll Admin User AJAX routes require an authenticated Admin User, and will check for a valid JWT bearer token.\n\n\npostCreate\n\n\nPOST method to create a new user record. Returns false if the email exists in the database already.\n\n\nURL\n\n\n[ROUTE]/create/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nnew user's email\n\n\n\n\n\n\npassword\n\n\nnew user's password\n\n\n\n\n\n\nrole\n\n\nid for the new user's role, must be a valid role id\n\n\n\n\n\n\nname\n\n\nnew user's name\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nJSON representation of the new user created by the request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ncreate\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\ngetList\n\n\nGET method to return a paginated list of users\n\n\nURL\n\n\n[ROUTE]/list/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npagesize\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"id\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"desc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nusers\n\n\nArray of users found by this request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlist\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nusers\n: [\n                {\n                    \nid\n:       2,\n                    \nemail\n:    \njohn.smith@example.com\n,\n                    \nname\n:     \nJohn Smith\n\n                }\n                ...\n    ]\n}\n\n\n\n\ngetRetrieve\n\n\nGET Method to return a single user record based on a provided ID\n\n\nURL\n\n\n[ROUTE]/retrieve/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn ID for an existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the found for this ID\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nretrieve\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\npostUpdate\n\n\nPOST method to update an existing user record based on the provided parameters\n\n\nURL\n\n\n[ROUTE]/update/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn id for an existing user\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\nNone of these parameters are required, but will update the user record if any or all are provided.\n\n\n\n\nname\n\n\nNew name value for the existing user\n\n\n\n\n\n\nemail\n\n\nnew email for the existing user\n\n\n\n\n\n\npassword\n\n\nNew password for the existing user\n\n\n\n\n\n\nrole\n\n\nNew role ID for the existing user\n\n\n\n\n\n\ngateway_customer_id    \n\n\nGateway ID for the existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the found for this ID\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nupdate\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\npostDelete\n\n\nPOST method to delete a user based on a provided ID\n\n\nURL\n\n\n[ROUTE]/delete/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nid for the user record to delete\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nID of the user that was deleted\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ndelete\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n:             43\n}\n\n\n\n\ngetUserActivity\n\n\nGET method to return the event logs for a provided user if an ID is provided, or the current user if the user ID is not provided.\n\n\nURL\n\n\n[ROUTE]/eventlogs/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\nuser_id\n\n\nID for an existing user\n\n\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npage_size\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"created_at\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"asc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nlogs\n\n\nArray of user log events  \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nuseractivity\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nlogs\n: [\n                {\n                    \nid\n:           2,\n                    \nuser_id\n:      42,                                                 \nevent\n:        \nbutton-click\n,\n                    \nemail\n:        \n{'foo': true}\n,\n                    \ncreated_at\n:   \n2017-07-01 00:00:01\n\n                }\n                ...\n    ]\n}\n\n\n\n\ngetEventLogs\n\n\nGET method to return an array of all user event logs\n\n\nURL\n\n\n[ROUTE]/eventlogs/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npage_size\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"created_at\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"asc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nlogs\n\n\nArray of user log events  \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ngeteventlogs\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nlogs\n: [\n                {\n                    \nid\n:           2,\n                    \nuser_id\n:      42,                                                 \nevent\n:        \nbutton-click\n,\n                    \nemail\n:        \n{'foo': true}\n,\n                    \ncreated_at\n:   \n2017-07-01 00:00:01\n\n                }\n                ...\n    ]\n}\n\n\n\n\npostChangepass\n\n\nPOST method to update an existing user's password\n\n\nURL\n\n\n[ROUTE]/changepass/\n\n\nRequired Parameters\n\n\n\n\nemail OR id\n\n\nExisting user's email or ID. one of these values is required\n\n\n\n\n\n\nnewpass\n\n\nNew user's password \n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nchangepass\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}", 
            "title": "Ajax endpoints"
        }, 
        {
            "location": "/users/ajax/#users-ajax-endpoints", 
            "text": "", 
            "title": "Users Ajax Endpoints"
        }, 
        {
            "location": "/users/ajax/#intro", 
            "text": "The Users package exposes some AJAX endpoints to allow your Erdiko Application to interact with the underlying service models.   Some of these endpoints require an authenticated user and will be noted as such.", 
            "title": "Intro"
        }, 
        {
            "location": "/users/ajax/#unique-response-object-valuess", 
            "text": "All of these AJAX endpoints return a JSON formatted response and contain some unique responses as well as common values indicating the success or failure of the request.  Here is a brief list of the common response variables:   method  String indicating the requested method    success  Boolean flag set to true for a successful login attempt, else this is false    error_code  Error code if the login attempt is unsuccessful    error_message  Error message if the login attempt is unsuccessful      Here is an example of a successful request response:  {\n     method :            login ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     token :             1234asdf ,\n}  If a request is unsuccessful, we return flags and messaging explaining the error. Here is an example:  {\n     method :            login ,\n     success :          false,\n     error_code :       1,\n     error_message :     Invalid email or password provided; User was not found \n}", 
            "title": "Unique Response Object Valuess"
        }, 
        {
            "location": "/users/ajax/#user-authentication", 
            "text": "", 
            "title": "User Authentication"
        }, 
        {
            "location": "/users/ajax/#postlogin", 
            "text": "POST endpoint that logs a user in via the JWTAuthenticator ( erdiko\\authenticate\\services\\JWTAuthenticator ) from the Erdiko\\Authenticate package.   After successfully validating the user's email and password with the JWTAuthenticator class, the AJAX response will return a JWT token.  URL  [ROUTE]/login/  Required Parameters   email  User's email    password  User's password     Unique Response Object Values   token  JWT token generated by the JWTAuthenticator class     Example Response  {\n     method :            login ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     token :             1234asdf ,\n}", 
            "title": "postLogin"
        }, 
        {
            "location": "/users/ajax/#getlogout", 
            "text": "GET endpoint that logs a user out via the BasicAuthenticator ( erdiko\\authenticate\\services\\BasicAuthenticator ) from the Erdiko\\Authenticate package.   URL  [ROUTE]/logout/  Required Parameters  n/a  Unique Response Object Values  n/a  Example Response  {\n     method :            logout ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "getLogout"
        }, 
        {
            "location": "/users/ajax/#postchangepass", 
            "text": "POST endpoint that attempts to change a password for an existing user via the BasicAuthenticator ( erdiko\\authenticate\\services\\BasicAuthenticator ) from the Erdiko\\Authenticate package.   This method will return false if the user's email and password do not match an existing user.  URL  [ROUTE]/changepass/  Required Parameters   email  Existing user's email    currentpass  Current user's password    newpass  New user's password      Unique Response Object Values  n/a  Example Response  {\n     method :            changepass ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "postChangepass"
        }, 
        {
            "location": "/users/ajax/#postforgotpass", 
            "text": "POST endpoint that will send a \"Reset Password\" email to a user after resetting the user's email to a random string.  This method will return false if the email is not found in the user database.  URL  [ROUTE]/forgotpass/  Required Parameters   email  Existing user's email     Unique Response Object Values  n/a  Example Response  {\n     method :            forgotpass ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "postForgotpass"
        }, 
        {
            "location": "/users/ajax/#role", 
            "text": "All Role AJAX routes require an authenticated user, and will check for a valid JWT bearer token.", 
            "title": "Role"
        }, 
        {
            "location": "/users/ajax/#getroles", 
            "text": "GET endpoint that returns a list of active roles found in the DB and a count of active users associated with the role.  URL  [ROUTE]/roles/  Required Parameters  n/a  Unique Response Object Values   roles  Array of existing roles      Example Response  {\n     method :            roles ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     roles : [\n        {\n             id : 42,\n             name :  Customer ,\n             active : true,\n             users : 30\n        },\n        {\n             id : 43,\n             name :  Admin ,\n             active : true,\n             users : 3\n        }\n    ]\n}", 
            "title": "getRoles"
        }, 
        {
            "location": "/users/ajax/#getrole", 
            "text": "GET endpoint that returns a JSON representation of a valid Role for a provided ID\nalong with a list of users associate with this role.  URL  [ROUTE]/role/  Required Parameters  n/a  Unique Response Object Values   role  Object representation of the role found for the provided ID      Example Response  {\n     method :            role ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role : {\n         id :       43,\n         name :      Admin ,\n         active :   true,\n         users : [\n            {\n                 id :       2,\n                 email :     john.smith@example.com ,\n                 name :      John Smith \n            }\n        ]\n    }\n}", 
            "title": "getRole"
        }, 
        {
            "location": "/users/ajax/#postcreaterole", 
            "text": "POST endpoint that create a Role record with the provided values.  URL  [ROUTE]/createrole/  Required Parameters   name  string representing the new role name     active  boolean flag set to TRUE if the new role is active, false if inactive     Unique Response Object Values   role  Object representation of the role created with the request      Example Response  {\n     method :            createrole ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role : {\n         id :       43,\n         name :      Admin ,\n         active :   true,\n         users : [\n            {\n                 id :       2,\n                 email :     john.smith@example.com ,\n                 name :      John Smith \n            }\n        ]\n    }\n}", 
            "title": "postCreaterole"
        }, 
        {
            "location": "/users/ajax/#postupdaterole", 
            "text": "POST endpoint that updates a Role record for a provided ID with the provided value.  URL  [ROUTE]/updaterole/  Required Parameters   id  id for the role record to update    name  string representing the role name to update    active  boolean flag set to TRUE if the role is active, false if inactive     Unique Response Object Values   role  Object representation of the role created with the request      Example Response  {\n     method :            updaterole ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role : {\n         id :       43,\n         name :      Admin ,\n         active :   true,\n         users : [\n            {\n                 id :       2,\n                 email :     john.smith@example.com ,\n                 name :      John Smith \n            }\n        ]\n    }\n}", 
            "title": "postUpdaterole"
        }, 
        {
            "location": "/users/ajax/#postdeleterole", 
            "text": "POST endpoint that deletes a Role based on a provided ID.  URL  [ROUTE]/deleterole/  Required Parameters   id  id for the role record to update     Unique Response Object Values   role  ID of the role that was deleted     Example Response  {\n     method :            deleteerole ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role :             43\n}", 
            "title": "postDeleterole"
        }, 
        {
            "location": "/users/ajax/#user", 
            "text": "All User AJAX routes require an authenticated user, and will check for a valid JWT bearer token.", 
            "title": "User"
        }, 
        {
            "location": "/users/ajax/#postregister", 
            "text": "POST endpoint that creates a User record with the provided values. This mehod returns false if the provided email is already found in the database.  URL  [ROUTE]/register/  Required Parameters   email  new user's email    password  new user's password    role  id for the new user's role, must be a valid role id    name  new user's name     Unique Response Object Values   user  JSON representation of the new user created by the request     Example Response  {\n     method :            register ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "postRegister"
        }, 
        {
            "location": "/users/ajax/#getlist", 
            "text": "GET endpoint that returns a list of active users found in the DB.  URL  [ROUTE]/list/  Required Parameters  n/a", 
            "title": "getList"
        }, 
        {
            "location": "/users/ajax/#optional-parameters", 
            "text": "page  Integer indicating the requested page. Defaults to 0.    pagesize  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"id\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"desc\"     Unique Response Object Values   users  Object representation of the role created with the request      Example Response  {\n     method :            list ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     users : [\n                {\n                     id :       2,\n                     email :     john.smith@example.com ,\n                     name :      John Smith \n                }\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#getretrieve", 
            "text": "GET endpoint that returns a JSON representation of a valid User for a provided ID along with a list of users associate with this role.  URL  [ROUTE]/retrieve/  Required Parameters   id  An ID for an existing user     Unique Response Object Values   user  Object representation of the found for this ID     Example Response  {\n     method :            retrieve ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "getRetrieve"
        }, 
        {
            "location": "/users/ajax/#postupdate", 
            "text": "POST endpoint that updates a user record for a provided ID with the provided values  URL  [ROUTE]/update/  Required Parameters   id  An id for an existing user", 
            "title": "postUpdate"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_1", 
            "text": "None of these parameters are required, but will update the user record if any or all are provided.   name  New name value for the existing user    email  new email for the existing user    password  New password for the existing user    role  New role ID for the existing user    gateway_customer_id      Gateway ID for the existing user     Unique Response Object Values   user  Object representation of the user updated by this request     Example Response  {\n     method :            update ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#getcancel", 
            "text": "GET method to deactivate a user for a provided ID.  URL  [ROUTE]/cancel/  Required Parameters   id  An id for an existing user     Unique Response Object Values   user  ID for the user that was deactivated     Example Response  {\n     method :            cancel ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : 42\n}", 
            "title": "getCancel"
        }, 
        {
            "location": "/users/ajax/#postadduserevent", 
            "text": "POST method to create a new event Log for current user  URL  [ROUTE]/adduserevent/  Required Parameters   event  string indicating the event type", 
            "title": "postAddUserEvent"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_2", 
            "text": "None of these parameters are required, but will update the user record if any or all are provided.   event_data  JSON object containing event log data    event_source  String indicating the event log source, defaults to \"front_end\"         Unique Response Object Values   log  Object representing the user logged event       user_id  ID for the user that just had an event logged     Example Response  {\n     method :            adduserevent ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     log : {\n         event :         button-click ,\n         event_data :    {'id': 2} ,\n         created_at :    2017-07-01 00:00:01 \n    },\n     user_id :          42\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#admin-user", 
            "text": "All Admin User AJAX routes require an authenticated Admin User, and will check for a valid JWT bearer token.", 
            "title": "Admin User"
        }, 
        {
            "location": "/users/ajax/#postcreate", 
            "text": "POST method to create a new user record. Returns false if the email exists in the database already.  URL  [ROUTE]/create/  Required Parameters   email  new user's email    password  new user's password    role  id for the new user's role, must be a valid role id    name  new user's name     Unique Response Object Values   user  JSON representation of the new user created by the request     Example Response  {\n     method :            create ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "postCreate"
        }, 
        {
            "location": "/users/ajax/#getlist_1", 
            "text": "GET method to return a paginated list of users  URL  [ROUTE]/list/  Required Parameters  n/a", 
            "title": "getList"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_3", 
            "text": "page  Integer indicating the requested page. Defaults to 0.    pagesize  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"id\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"desc\"     Unique Response Object Values   users  Array of users found by this request     Example Response  {\n     method :            list ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     users : [\n                {\n                     id :       2,\n                     email :     john.smith@example.com ,\n                     name :      John Smith \n                }\n                ...\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#getretrieve_1", 
            "text": "GET Method to return a single user record based on a provided ID  URL  [ROUTE]/retrieve/  Required Parameters   id  An ID for an existing user     Unique Response Object Values   user  Object representation of the found for this ID     Example Response  {\n     method :            retrieve ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "getRetrieve"
        }, 
        {
            "location": "/users/ajax/#postupdate_1", 
            "text": "POST method to update an existing user record based on the provided parameters  URL  [ROUTE]/update/  Required Parameters   id  An id for an existing user", 
            "title": "postUpdate"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_4", 
            "text": "None of these parameters are required, but will update the user record if any or all are provided.   name  New name value for the existing user    email  new email for the existing user    password  New password for the existing user    role  New role ID for the existing user    gateway_customer_id      Gateway ID for the existing user     Unique Response Object Values   user  Object representation of the found for this ID     Example Response  {\n     method :            update ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#postdelete", 
            "text": "POST method to delete a user based on a provided ID  URL  [ROUTE]/delete/  Required Parameters   id  id for the user record to delete     Unique Response Object Values   user  ID of the user that was deleted     Example Response  {\n     method :            delete ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user :             43\n}", 
            "title": "postDelete"
        }, 
        {
            "location": "/users/ajax/#getuseractivity", 
            "text": "GET method to return the event logs for a provided user if an ID is provided, or the current user if the user ID is not provided.  URL  [ROUTE]/eventlogs/  Required Parameters  n/a", 
            "title": "getUserActivity"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_5", 
            "text": "user_id  ID for an existing user    page  Integer indicating the requested page. Defaults to 0.    page_size  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"created_at\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"asc\"     Unique Response Object Values   logs  Array of user log events       Example Response  {\n     method :            useractivity ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     logs : [\n                {\n                     id :           2,\n                     user_id :      42,                                                  event :         button-click ,\n                     email :         {'foo': true} ,\n                     created_at :    2017-07-01 00:00:01 \n                }\n                ...\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#geteventlogs", 
            "text": "GET method to return an array of all user event logs  URL  [ROUTE]/eventlogs/  Required Parameters  n/a", 
            "title": "getEventLogs"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_6", 
            "text": "page  Integer indicating the requested page. Defaults to 0.    page_size  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"created_at\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"asc\"     Unique Response Object Values   logs  Array of user log events       Example Response  {\n     method :            geteventlogs ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     logs : [\n                {\n                     id :           2,\n                     user_id :      42,                                                  event :         button-click ,\n                     email :         {'foo': true} ,\n                     created_at :    2017-07-01 00:00:01 \n                }\n                ...\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#postchangepass_1", 
            "text": "POST method to update an existing user's password  URL  [ROUTE]/changepass/  Required Parameters   email OR id  Existing user's email or ID. one of these values is required    newpass  New user's password      Unique Response Object Values  n/a  Example Response  {\n     method :            changepass ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "postChangepass"
        }, 
        {
            "location": "/users/models/", 
            "text": "Models\n\n\nIntro\n\n\nThis package uses a combination of ORM Entities and Service Models to manipulate the user records stored in the database tables. This package relies upon Doctrine as an ORM framework.\n\n\nAll interactions with the data model must be performed via entity models, and all interactions with the entities must be performed via service model methods.\n\n\nEntities\n\n\nThe entities in this package relate directly to a mapped database table, and an instance of an entity represents a single table row.\n\n\nAll entity properties have a protected scope, and must use the provided getter/setters to retrieve and manipulate their values. \n\n\nIn addition to the getter/setters, all entities have a few lifecycle setters to set values based upon record creates and updates. These special case methods are indicated in this documentation.\n\n\nRole\n\n\nThis entity represents the \nroles\n table.\n\n\nProperties\n\n\n\n\nprotected\n \nint\n \n$id\n\n\nRepresents the autoincrement ID for Roles Table\n\n\n\n\n\n\nprotected\n \nint\n \n$active\n\n\nInteger flag representing boolean; Role is active if value is \"1\"/true, inactive if value is \"0\"/false\n\n\n\n\n\n\nprotected\n \nstring\n \n$name\n\n\nString representing the Role name\n\n\n\n\n\n\nprotected\n \nstring\n \n$created\n\n\nDate string for the timestamp when the record was created\n\n\n\n\n\n\nprotected\n \nstring\n \n$updated\n\n\nDate string for timestamp when the record was last updated\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \ngetId()\n\n\nReturns the current record $id\n\n\n\n\n\n\npublic\n \nsetId(\nint\n $id)\n\n\nSets the current record $id with a provided value\n\n\n\n\n\n\npublic\n \ngetActive()\n\n\nReturns the current record $active value\n\n\n\n\n\n\npublic\n \nsetActive(\nstring\n $active)\n\n\nSets the current record $active with a provided value\n\n\n\n\n\n\npublic\n \ngetName()\n\n\nReturns the current record $name value\n\n\n\n\n\n\npublic\n \nsetName(\nstring\n $name)\n\n\nSets the current record $name with a provided value\n\n\n\n\n\n\npublic\n \ngetCreated()\n\n\nReturns the current record $created value\n\n\n\n\n\n\npublic\n \nsetCreated(\nstring\n $created)\n\n\nSets the current record $created with a provided value\n\n\n\n\n\n\npublic\n \ngetUpdated()\n\n\nReturns the current record $updated value\n\n\n\n\n\n\npublic\n \nsetUpdated(\nstring\n $updated)\n\n\nSets the current record $updated with a provided value\n\n\n\n\n\n\npublic\n \ndoStuffOnPrePersist()\n\n\nLifecycle method called on initial record create via @PrePersist annotation\n\n\nCalls existing \nsetCreated()\n method with current timestamp as value\n\n\n\n\n\n\npublic\n \ndoStuffOnPreMerge()\n\n\nLifecycle method called on record update via @PreUpdate annotation\n\n\nCalls existing \nsetUpdated()\n method with current timestamp as value\n\n\n\n\n\n\n\n\nUser\n\n\nThis entity represents the \nusers\n table.\n\n\nProperties\n\n\n\n\nprotected\n \nint\n \n$id\n\n\nRepresents the autoincrement ID for Users Table\n\n\n\n\n\n\nprotected\n \nstring\n \n$email\n\n\nRepresents the email for a user\n\n\n\n\n\n\nprotected\n \nstring\n \n$password\n\n\nRepresents the user's hashed password \n\n\n\n\n\n\nprotected\n \nint\n \n$role\n\n\nForeign Key ID to the role table; represents a user's role\n\n\n\n\n\n\nprotected\n \nstring\n \n$name\n\n\nRepresents a user's name   \n\n\n\n\n\n\nprotected\n \nstring\n \n$gateway_customer_id\n\n\nForeign Key Id to a payment gateway table; represents a user's relationship to a payement gateway\n\n\nPlease Note\n: this will be implemented in a future feature.\n\n\n\n\n\n\nprotected\n \nstring\n \n$last_login\n\n\nTimestamp of the user's last successful login\n\n\n\n\n\n\nprotected\n \nstring\n \n$created\n\n\nTimestamp when the record was created\n\n\n\n\n\n\nprotected\n \nstring\n \nupdated\n\n\nTimestamp when the record was last updated\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \ngetId()\n\n\nReturns the current record $id\n\n\n\n\n\n\npublic\n \nsetId(\nint\n $id)\n\n\nSets the current record $id with a provided value\n\n\n\n\n\n\npublic\n \ngetEmail()\n\n\nReturns the current record $email value\n\n\n\n\n\n\npublic\n \nsetEmail(\nstring\n $email)\n\n\nSets the current record $email with a provided value\n\n\n\n\n\n\npublic\n \ngetPassword()\n\n\nDescription: Returns the current record $password value\n\n\n\n\n\n\npublic\n \nsetPassword(\npassword\n $password)\n\n\nDescription: MD5 encodes the provided string and sets the current record's $password value to this hashed string\n\n\n\n\n\n\npublic\n \ngetRole()\n\n\nDescription: Returns the current record $role value\n\n\n\n\n\n\npublic\n \nsetRole(\nstring\n $role)\n\n\nSets the current record $role value with a provided value\n\n\npublic\n \ngetName()\n\n\nReturns the current record $name value\n\n\n\n\n\n\npublic\n \nsetName(\nstring\n $name)\n\n\nSets the current record $name with a provided value\n\n\npublic\n \ngetGatewayCustomerId()\n\n\nReturns the current record gateway_customer_id value\n\n\n\n\n\n\npublic\n \nsetGatewayCustomerId(\nint\n $gateway_customer_id)\n\n\nSets the current record $gateway_customer_id with a provided value\n\n\n\n\n\n\npublic\n \ngetLastLogin()\n\n\nReturns the current record $last_login value\n\n\n\n\n\n\npublic\n \nsetLastLogin(\nstring\n $last_login)\n\n\nSets the current record $last_login to the provided value\n\n\n\n\n\n\npublic\n \ngetCreatedAt()\n\n\nReturns the current record $created_at value\n\n\n\n\n\n\npublic\n \nsetCreatedAt(\nstring\n $created_at)\n\n\nSets the current record $created_at to the provided value\n\n\n\n\n\n\npublic\n \ngetUpdatedAt()\n\n\nReturns the current record $created_at value\n\n\n\n\n\n\npublic\n \nsetUpdatedAt()\n\n\nSets the current record $updated_at to the provided value\n\n\n\n\n\n\npublic\n \ndoStuffOnPrePersist()\n\n\nLifecycle method called on initial record create via @PrePersist annotation\n\n\nCalls existing \nsetCreatedAt()\n method with current timestamp as value\n\n\n\n\n\n\npublic\n \ndoStuffOnPreMerge()\n\n\nLifecycle method called on record update via @PreUpdate annotation\n\n\nCalls existing \nsetUpdatedAt()\n method with current timestamp as value\n\n\n\n\n\n\npublic\n \nmarshall(\nstring\n $type = 'json')\n\n\nMethod that returns a current record as a 'safe' datatype\n\n\nUsed for serializing a record  \n\n\n\n\n\n\n\n\nUser/Log\n\n\nThis entity represents the \nuser_event_log\n table.\n\n\nProperties\n\n\n\n\nprotected\n \nint\n \n$id\n\n\nRepresents the autoincrement ID for User Event Log Table\n\n\n\n\n\n\nprotected\n \nint\n \n$user_id\n\n\nForeign Key ID to the role table; represents a user record and associates it to this log record\n\n\n\n\n\n\nprotected\n \nstring\n \n$event_log\n\n\nA string indicating the type of user event logged\n\n\n\n\n\n\nprotected\n \nstring\n \n$event_data\n\n\nA JSON serialized object string representing a user logged event\n\n\n\n\n\n\nprotected\n \nstring\n \n$created_at\n\n\nDate string for the timestamp when the record was created\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \ngetId()\n\n\nReturns the current record $id\n\n\n\n\n\n\npublic\n \nsetId(\nint\n $id)\n\n\nSets the current record $id\n\n\n\n\n\n\npublic\n \ngetUserId()\n\n\nReturns the current record $user_id value\n\n\n\n\n\n\npublic\n \nsetUserId(\nstring\n $userId)\n\n\nSets the current record $user_id to the provided value\n\n\n\n\n\n\npublic\n \ngetEventLog()\n\n\nReturns the current record $event_log value\n\n\n\n\n\n\npublic\n \nsetEventLog(\nstring\n $eventLog)\n\n\nSets the current record $event_log to the provided value\n\n\n\n\n\n\npublic\n \ngetEventData()\n\n\njson_decodes\n and returns the current record $event_data value\n\n\n\n\n\n\npublic\n \nsetEventData(\nstring\n $eventData)\n\n\njson_encodes\n the provided value and sets this to the current record $event_data value\n\n\n\n\n\n\npublic\n \ngetCreatedAt()\n\n\nReturns the current record $created_at value\n\n\n\n\n\n\npublic\n \nsetCreatedAt(\nstring\n $created)\n\n\nSets the current record $created_at to the provided value\n\n\n\n\n\n\npublic\n \ndoStuffOnPrePersist()\n\n\nLifecycle method called on initial record create via @PrePersist annotation\n\n\nCalls existing \nsetCreatedAt()\n method with current timestamp as value\n\n\n\n\n\n\n\n\nService Models\n\n\nMailgun\n\n\nThe Mailgun service model provides an interface to Mailgun to send emails following user events.\n\n\nThis service model extends the \nMailgun\\Mailgun\n model provided by the Mailgun composer package.\n\n\nProperties\n\n\n\n\nstring\n \n$domain\n\n\nString representing the sender domain for this erdiko instance. \n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct()\n\n\nCreates an instance of the Mailgun service model.\n\n\nLoads a config file and sets some local variables from this loaded config, before calling the parent constructor in \nMailgun\\Mailgun\n\n\n\n\n\n\nprotected\n \ngetDefaults()\n\n\nReturns an array of default values for mailgun settings\n\n\n\n\n\n\npublic\n \nsendMail(\nobject\n $postData)\n\n\nSends an email with provided data. \n\n\nFilters the provided $postData object after typecasting to an array, returns the method call to the parent class \nsendMessage\n method call\n\n\n\n\n\n\npublic\n \nforgotPassword(\nstring\n $email, \nstring\n $html)\n\n\nSends an email to a provided email using the provided HTML template string\n\n\nCalls the class \nsendMail\n method with provided values\n\n\n\n\n\n\n\n\nRole\n\n\nThe Role service model provides an interface to create and manipulate role records via the Role entity.\n\n\nThis class uses the Erdiko Doctrine EntityTrait to allow it to get \n set the entity manager.\n\n\nProperties\n\n\n\n\nprivate\n \nEntityManager\n \n$_em\n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct()\n\n\nCreates an instance of the Role service model.\n\n\n\n\n\n\npublic\n \ncreate(\nobject\n $data)\n\n\nCreate a new role entity instance\n\n\n\n\n\n\npublic\n \nfindById(\nint\n|\nstring\n $id)\n\n\nReturn a Role entity by id\n\n\n\n\n\n\npublic\n \nfindByName(\nstring\n $name)\n\n\nReturn a Role entity with a name given\n\n\n\n\n\n\npublic\n \nfindByStatus(\nint\n $status)\n\n\nReturn an array of Roles that have the provided status\n\n\n\n\n\n\npublic\n \ngetCountByRole(\nstring\n $role)\n\n\nReturn a count for role records for the provided role name\n\n\n\n\n\n\npublic\n \ngetUsersForRole(\nstring\n $role)\n\n\nReturn a list of users for a provided role name\n\n\n\n\n\n\npublic\n \nsave(\narray\n $data)\n\n\nSave/Persist a new role entity for the provided values\n\n\n\n\n\n\npublic\n \ngetEntity(\narray\n $filter)\n\n\nReturns a Role entity record based on the provided parameters, if none found return an empty entity\n\n\n\n\n\n\npublic\n \ndelete(\nstring\n $id)\n\n\nDelete a Role entity record for the provided id\n\n\n\n\n\n\n\n\nUser\n\n\nThe User service model provides an interface to create and manipulate user records via the User entity.\n\n\nThis class uses the Erdiko Doctrine EntityTrait to allow it to get \n set the entity manager.\n\n\nProperties\n\n\n\n\nCONST\n PASSWORDSALT\n\n\nString used to salt a password before hashing\n\n\nNote\n This will eventually be moved to a config file, currently it is just a class constant\n\n\n\n\n\n\nprotected\n \nEntity/User\n $_user\n\n\nprotected\n \nEntityManager\n $_em \n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct(\nEntityManager\n $em = null)\n\n\nCreates an instance of the User service model.\n\n\nOptional EntityManager parameter to substitute the one provided by the trait\n\n\n\n\n\n\npublic\n \nsetEntity(\nEntity/User\n $entity)\n\n\nSets $_user to a provided \nEntity/User\n\n\n\n\n\n\npublic\n \ngetEntity()\n\n\nReturns the current $_user value\n\n\n\n\n\n\npublic\n \nunmarshall(\nstring\n $encoded)\n\n\nUnserializes a user object and returns a populated User Entity \n\n\nRequired by the iErdikoUser Interface\n\n\n\n\n\n\nprotected\n \ncreateAnonymous()\n\n\nReturns a new anonymous user entity\n\n\nRequired by the iErdikoUser Interface\n\n\n\n\n\n\npublic\n \nstatic\n \ngetAnonymous()\n\n\nReturns a new anonymous user entity\n\n\nRequired by the iErdikoUser Interface\n\n\n\n\n\n\npublic\n \nmarshall(\nstring\n $type = 'json')\n\n\nSerializes a populated User Entity\n\n\n\n\n\n\npublic\n \ngetUsername()\n\n\nReturns current $_user name value\n\n\n\n\n\n\npublic\n \ngetDisplayName()\n\n\nReturns current $_user name value\n\n\n\n\n\n\npublic\n \ncreateUser(\narray\n $data)\n\n\nCreate a new entity and set it to current user model\n\n\n\n\n\n\npublic\n \ngetSalted(\nstring\n $password)\n\n\nReturns password string concat'd with password salt \n\n\n\n\n\n\npublic\n \nauthenticate(\nstring\n $email, \nstring\n $password)\n\n\nAttempt to validate the user by querying the DB with the provided email and password. Returns populated User Entity if found, else returns false\n\n\n\n\n\n\npublic\n \nisLoggedIn()\n\n\nReturns true if the user is logged in\n\n\n\n\n\n\npublic\n \nisEmailUnique()\n\n\nReturns true if provided email was not found in the user table \n\n\n\n\n\n\npublic\n \ngetRoles()\n\n\nReturn the friendly user role names\n\n\n\n\n\n\npublic\n \nisAdmin()\n\n\nReturns true if the current $_user has an Admin role\n\n\n\n\n\n\npublic\n \nisAnonymous()\n\n\nReturns true if the current $_user has an anonymous role \n\n\n\n\n\n\npublic\n \nhasRole(\nstring\n $role = 'anonymous')\n\n\nReturns true if current user has the provided role\n\n\n\n\n\n\npublic\n \ngetRole()\n\n\nReturns current $_user role value\n\n\n\n\n\n\npublic\n \ngetUsers(\nint\n $page = 0, \nint\n $pagesize = 100, \nstring\n $sort = 'id', \nstring\n $direction = 'asc')\n\n\nReturn all the users paginated by parameters\n\n\n\n\n\n\npublic\n \ndeleteUser(\nint\n|\nstring\n $id)\n\n\nDelete a user record for a provided id. Returns false if a user record is not found, and returns true if successful deletion\n\n\n\n\n\n\npublic\n \ngetUserId()\n\n\nReturns current $_user id value\n\n\n\n\n\n\npublic\n \nsave(\nobject\n $data)\n\n\nUpdate an existing user or return a new user populated with data provided.\n\n\n\n\n\n\npublic\n \ngetById(\nint\n|\nstring\n $id)\n\n\nReturn a user by id\n\n\n\n\n\n\npublic\n \ngetByParams(\narray\n $params)\n\n\nReturn users using params as query filter\n\n\n\n\n\n\npublic\n \ngetGatewayCustomerId(\nint\n|\nstring\n $uid)\n\n\nReturn the Gateway Customer ID for a provided user id\n\n\n\n\n\n\n\n\nUser/Event/Log\n\n\nThe User/Event/Log service model provides an interface to create an manipulate user event log records via the User/Log entity.\n\n\nThis class uses the Erdiko Doctrine EntityTrait to allow it to get \n set the entity manager.\n\n\nProperties\n\n\n\n\nprotected\n \nEntityManager\n $_em \n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct()\n\n\nCreates an instance of the User/Log service model. \n\n\n\n\n\n\npublic\n \nsave(\nEntity/User/Log\n $logEntity)\n\n\nPersist and save the provided User/Log entity\n\n\n\n\n\n\npublic\n \ngenerateEntity(\nint\n|\nstring\n $uid, \nstring\n $event_log, \nstring\n $event_data = null)\n\n\nReturn a populated User/Log entity with the provided values\n\n\n\n\n\n\npublic\n \ngetAllLogs()\n\n\nReturn all User/Log records as an array of User/Log entities\n\n\n\n\n\n\npublic\n \ngetLogs(\nint\n $page = 0, \nint\n $pagesize = 100, \nstring\n $sort = 'id', $direction = 'asc')\n\n\nReturn an array of User/Log records based on provided parameters\n\n\n\n\n\n\npublic\n \ngetLogsByUserId(\nint\n $id, \nint\n $page = 0, \nint\n $pagesize = 100, \nstring\n $sort = 'id', \nstring\n $direction = 'asc')\n\n\nReturn an array of User/Log records for a provided user, filtered by additional parameters\n\n\n\n\n\n\npublic\n \nfindById(\nint\n|\nstring\n $id)\n\n\nReturn a single User/Log entity for a provided ID\n\n\n\n\n\n\npublic\n \ncreate(\nint\n|\nstring\n $user_id = null, \nstring\n $event_log = null, \nstring\n $event_data = null)\n\n\nCreate a new User/Log entity, wrapper for \ngenerateEntity()\n method", 
            "title": "Models"
        }, 
        {
            "location": "/users/models/#models", 
            "text": "", 
            "title": "Models"
        }, 
        {
            "location": "/users/models/#intro", 
            "text": "This package uses a combination of ORM Entities and Service Models to manipulate the user records stored in the database tables. This package relies upon Doctrine as an ORM framework.  All interactions with the data model must be performed via entity models, and all interactions with the entities must be performed via service model methods.", 
            "title": "Intro"
        }, 
        {
            "location": "/users/models/#entities", 
            "text": "The entities in this package relate directly to a mapped database table, and an instance of an entity represents a single table row.  All entity properties have a protected scope, and must use the provided getter/setters to retrieve and manipulate their values.   In addition to the getter/setters, all entities have a few lifecycle setters to set values based upon record creates and updates. These special case methods are indicated in this documentation.", 
            "title": "Entities"
        }, 
        {
            "location": "/users/models/#role", 
            "text": "This entity represents the  roles  table.", 
            "title": "Role"
        }, 
        {
            "location": "/users/models/#properties", 
            "text": "protected   int   $id  Represents the autoincrement ID for Roles Table    protected   int   $active  Integer flag representing boolean; Role is active if value is \"1\"/true, inactive if value is \"0\"/false    protected   string   $name  String representing the Role name    protected   string   $created  Date string for the timestamp when the record was created    protected   string   $updated  Date string for timestamp when the record was last updated", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods", 
            "text": "public   getId()  Returns the current record $id    public   setId( int  $id)  Sets the current record $id with a provided value    public   getActive()  Returns the current record $active value    public   setActive( string  $active)  Sets the current record $active with a provided value    public   getName()  Returns the current record $name value    public   setName( string  $name)  Sets the current record $name with a provided value    public   getCreated()  Returns the current record $created value    public   setCreated( string  $created)  Sets the current record $created with a provided value    public   getUpdated()  Returns the current record $updated value    public   setUpdated( string  $updated)  Sets the current record $updated with a provided value    public   doStuffOnPrePersist()  Lifecycle method called on initial record create via @PrePersist annotation  Calls existing  setCreated()  method with current timestamp as value    public   doStuffOnPreMerge()  Lifecycle method called on record update via @PreUpdate annotation  Calls existing  setUpdated()  method with current timestamp as value", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#user", 
            "text": "This entity represents the  users  table.", 
            "title": "User"
        }, 
        {
            "location": "/users/models/#properties_1", 
            "text": "protected   int   $id  Represents the autoincrement ID for Users Table    protected   string   $email  Represents the email for a user    protected   string   $password  Represents the user's hashed password     protected   int   $role  Foreign Key ID to the role table; represents a user's role    protected   string   $name  Represents a user's name       protected   string   $gateway_customer_id  Foreign Key Id to a payment gateway table; represents a user's relationship to a payement gateway  Please Note : this will be implemented in a future feature.    protected   string   $last_login  Timestamp of the user's last successful login    protected   string   $created  Timestamp when the record was created    protected   string   updated  Timestamp when the record was last updated", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_1", 
            "text": "public   getId()  Returns the current record $id    public   setId( int  $id)  Sets the current record $id with a provided value    public   getEmail()  Returns the current record $email value    public   setEmail( string  $email)  Sets the current record $email with a provided value    public   getPassword()  Description: Returns the current record $password value    public   setPassword( password  $password)  Description: MD5 encodes the provided string and sets the current record's $password value to this hashed string    public   getRole()  Description: Returns the current record $role value    public   setRole( string  $role)  Sets the current record $role value with a provided value  public   getName()  Returns the current record $name value    public   setName( string  $name)  Sets the current record $name with a provided value  public   getGatewayCustomerId()  Returns the current record gateway_customer_id value    public   setGatewayCustomerId( int  $gateway_customer_id)  Sets the current record $gateway_customer_id with a provided value    public   getLastLogin()  Returns the current record $last_login value    public   setLastLogin( string  $last_login)  Sets the current record $last_login to the provided value    public   getCreatedAt()  Returns the current record $created_at value    public   setCreatedAt( string  $created_at)  Sets the current record $created_at to the provided value    public   getUpdatedAt()  Returns the current record $created_at value    public   setUpdatedAt()  Sets the current record $updated_at to the provided value    public   doStuffOnPrePersist()  Lifecycle method called on initial record create via @PrePersist annotation  Calls existing  setCreatedAt()  method with current timestamp as value    public   doStuffOnPreMerge()  Lifecycle method called on record update via @PreUpdate annotation  Calls existing  setUpdatedAt()  method with current timestamp as value    public   marshall( string  $type = 'json')  Method that returns a current record as a 'safe' datatype  Used for serializing a record", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#userlog", 
            "text": "This entity represents the  user_event_log  table.", 
            "title": "User/Log"
        }, 
        {
            "location": "/users/models/#properties_2", 
            "text": "protected   int   $id  Represents the autoincrement ID for User Event Log Table    protected   int   $user_id  Foreign Key ID to the role table; represents a user record and associates it to this log record    protected   string   $event_log  A string indicating the type of user event logged    protected   string   $event_data  A JSON serialized object string representing a user logged event    protected   string   $created_at  Date string for the timestamp when the record was created", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_2", 
            "text": "public   getId()  Returns the current record $id    public   setId( int  $id)  Sets the current record $id    public   getUserId()  Returns the current record $user_id value    public   setUserId( string  $userId)  Sets the current record $user_id to the provided value    public   getEventLog()  Returns the current record $event_log value    public   setEventLog( string  $eventLog)  Sets the current record $event_log to the provided value    public   getEventData()  json_decodes  and returns the current record $event_data value    public   setEventData( string  $eventData)  json_encodes  the provided value and sets this to the current record $event_data value    public   getCreatedAt()  Returns the current record $created_at value    public   setCreatedAt( string  $created)  Sets the current record $created_at to the provided value    public   doStuffOnPrePersist()  Lifecycle method called on initial record create via @PrePersist annotation  Calls existing  setCreatedAt()  method with current timestamp as value", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#service-models", 
            "text": "", 
            "title": "Service Models"
        }, 
        {
            "location": "/users/models/#mailgun", 
            "text": "The Mailgun service model provides an interface to Mailgun to send emails following user events.  This service model extends the  Mailgun\\Mailgun  model provided by the Mailgun composer package.", 
            "title": "Mailgun"
        }, 
        {
            "location": "/users/models/#properties_3", 
            "text": "string   $domain  String representing the sender domain for this erdiko instance.", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_3", 
            "text": "public   __construct()  Creates an instance of the Mailgun service model.  Loads a config file and sets some local variables from this loaded config, before calling the parent constructor in  Mailgun\\Mailgun    protected   getDefaults()  Returns an array of default values for mailgun settings    public   sendMail( object  $postData)  Sends an email with provided data.   Filters the provided $postData object after typecasting to an array, returns the method call to the parent class  sendMessage  method call    public   forgotPassword( string  $email,  string  $html)  Sends an email to a provided email using the provided HTML template string  Calls the class  sendMail  method with provided values", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#role_1", 
            "text": "The Role service model provides an interface to create and manipulate role records via the Role entity.  This class uses the Erdiko Doctrine EntityTrait to allow it to get   set the entity manager.", 
            "title": "Role"
        }, 
        {
            "location": "/users/models/#properties_4", 
            "text": "private   EntityManager   $_em", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_4", 
            "text": "public   __construct()  Creates an instance of the Role service model.    public   create( object  $data)  Create a new role entity instance    public   findById( int | string  $id)  Return a Role entity by id    public   findByName( string  $name)  Return a Role entity with a name given    public   findByStatus( int  $status)  Return an array of Roles that have the provided status    public   getCountByRole( string  $role)  Return a count for role records for the provided role name    public   getUsersForRole( string  $role)  Return a list of users for a provided role name    public   save( array  $data)  Save/Persist a new role entity for the provided values    public   getEntity( array  $filter)  Returns a Role entity record based on the provided parameters, if none found return an empty entity    public   delete( string  $id)  Delete a Role entity record for the provided id", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#user_1", 
            "text": "The User service model provides an interface to create and manipulate user records via the User entity.  This class uses the Erdiko Doctrine EntityTrait to allow it to get   set the entity manager.", 
            "title": "User"
        }, 
        {
            "location": "/users/models/#properties_5", 
            "text": "CONST  PASSWORDSALT  String used to salt a password before hashing  Note  This will eventually be moved to a config file, currently it is just a class constant    protected   Entity/User  $_user  protected   EntityManager  $_em", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_5", 
            "text": "public   __construct( EntityManager  $em = null)  Creates an instance of the User service model.  Optional EntityManager parameter to substitute the one provided by the trait    public   setEntity( Entity/User  $entity)  Sets $_user to a provided  Entity/User    public   getEntity()  Returns the current $_user value    public   unmarshall( string  $encoded)  Unserializes a user object and returns a populated User Entity   Required by the iErdikoUser Interface    protected   createAnonymous()  Returns a new anonymous user entity  Required by the iErdikoUser Interface    public   static   getAnonymous()  Returns a new anonymous user entity  Required by the iErdikoUser Interface    public   marshall( string  $type = 'json')  Serializes a populated User Entity    public   getUsername()  Returns current $_user name value    public   getDisplayName()  Returns current $_user name value    public   createUser( array  $data)  Create a new entity and set it to current user model    public   getSalted( string  $password)  Returns password string concat'd with password salt     public   authenticate( string  $email,  string  $password)  Attempt to validate the user by querying the DB with the provided email and password. Returns populated User Entity if found, else returns false    public   isLoggedIn()  Returns true if the user is logged in    public   isEmailUnique()  Returns true if provided email was not found in the user table     public   getRoles()  Return the friendly user role names    public   isAdmin()  Returns true if the current $_user has an Admin role    public   isAnonymous()  Returns true if the current $_user has an anonymous role     public   hasRole( string  $role = 'anonymous')  Returns true if current user has the provided role    public   getRole()  Returns current $_user role value    public   getUsers( int  $page = 0,  int  $pagesize = 100,  string  $sort = 'id',  string  $direction = 'asc')  Return all the users paginated by parameters    public   deleteUser( int | string  $id)  Delete a user record for a provided id. Returns false if a user record is not found, and returns true if successful deletion    public   getUserId()  Returns current $_user id value    public   save( object  $data)  Update an existing user or return a new user populated with data provided.    public   getById( int | string  $id)  Return a user by id    public   getByParams( array  $params)  Return users using params as query filter    public   getGatewayCustomerId( int | string  $uid)  Return the Gateway Customer ID for a provided user id", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#usereventlog", 
            "text": "The User/Event/Log service model provides an interface to create an manipulate user event log records via the User/Log entity.  This class uses the Erdiko Doctrine EntityTrait to allow it to get   set the entity manager.", 
            "title": "User/Event/Log"
        }, 
        {
            "location": "/users/models/#properties_6", 
            "text": "protected   EntityManager  $_em", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_6", 
            "text": "public   __construct()  Creates an instance of the User/Log service model.     public   save( Entity/User/Log  $logEntity)  Persist and save the provided User/Log entity    public   generateEntity( int | string  $uid,  string  $event_log,  string  $event_data = null)  Return a populated User/Log entity with the provided values    public   getAllLogs()  Return all User/Log records as an array of User/Log entities    public   getLogs( int  $page = 0,  int  $pagesize = 100,  string  $sort = 'id', $direction = 'asc')  Return an array of User/Log records based on provided parameters    public   getLogsByUserId( int  $id,  int  $page = 0,  int  $pagesize = 100,  string  $sort = 'id',  string  $direction = 'asc')  Return an array of User/Log records for a provided user, filtered by additional parameters    public   findById( int | string  $id)  Return a single User/Log entity for a provided ID    public   create( int | string  $user_id = null,  string  $event_log = null,  string  $event_data = null)  Create a new User/Log entity, wrapper for  generateEntity()  method", 
            "title": "Methods"
        }, 
        {
            "location": "/users/extending/", 
            "text": "Extending the Users Package\n\n\nIntro\n\n\nExtending the Users package allows you to add or modify the existing functionality of this package for use in your application. Since this is a modular package we designed this in a way that you can easily install locally with composer and clear paths to extend this code.\n\n\nIf you find yourself writing a bunch of custom code, we would suggest creating a custom package to store this extended code into.\n\n\nPlease note, this package is still limited by the constraints of PHP's object inheritance. You can only overload methods permitted by PHP \nscoping\n.\n\n\nExtending a Service Model\n\n\nExtending the service models is easy and best explained with an example where we extend the User/Event/Log class where we overload the \ngetAllLogs\n method and do some custom stuff.\n\n\nFor the sake of berevity, we'll pseudo code the custom stuff.\n\n\n?php\n\n/**\n * MyLog extends the existing Log class and over rides the \n * existing `getAllLogs` method\n *\n */\nclass MyLog extends erdiko\\users\\models\\user\\event\\Log {\n\n    /**\n     *\n     *\n     */\n    public function getAllLogs()\n    {\n        // custom code\n\n        // call to the parent method we are overloading\n        $results = parent::getAllLogs();\n\n        // more custom code\n\n        return $results;\n    }\n\n}\n\n\n\n\nExtending the Controllers\n\n\nExtending controllers is just as easy as extending models, but please note that controllers do not return typical datatypes but most commonly set some values for the response object.\n\n\nThe AJAX controllers in this package typically extend the \n\\erdiko\\core\\AjaxController\n class from the Erdiko Core package. Please refer to the relevant documentation for more information on the response object.\n\n\n?php\n\n/**\n * MyUserAjax extends the existing UserAjax controller class \n * and over rides the existing `postRegister` method\n *\n */\nclass MyUserAjax extends \\erdiko\\core\\AjaxController {\n\n    /**\n     *\n     *\n     */\n    public function postRegister()\n    {\n        // custom code goes here\n\n        // send a pretty email to the user\n\n        // set some variables for the response object\n\n    }\n\n}", 
            "title": "Extending"
        }, 
        {
            "location": "/users/extending/#extending-the-users-package", 
            "text": "", 
            "title": "Extending the Users Package"
        }, 
        {
            "location": "/users/extending/#intro", 
            "text": "Extending the Users package allows you to add or modify the existing functionality of this package for use in your application. Since this is a modular package we designed this in a way that you can easily install locally with composer and clear paths to extend this code.  If you find yourself writing a bunch of custom code, we would suggest creating a custom package to store this extended code into.  Please note, this package is still limited by the constraints of PHP's object inheritance. You can only overload methods permitted by PHP  scoping .", 
            "title": "Intro"
        }, 
        {
            "location": "/users/extending/#extending-a-service-model", 
            "text": "Extending the service models is easy and best explained with an example where we extend the User/Event/Log class where we overload the  getAllLogs  method and do some custom stuff.  For the sake of berevity, we'll pseudo code the custom stuff.  ?php\n\n/**\n * MyLog extends the existing Log class and over rides the \n * existing `getAllLogs` method\n *\n */\nclass MyLog extends erdiko\\users\\models\\user\\event\\Log {\n\n    /**\n     *\n     *\n     */\n    public function getAllLogs()\n    {\n        // custom code\n\n        // call to the parent method we are overloading\n        $results = parent::getAllLogs();\n\n        // more custom code\n\n        return $results;\n    }\n\n}", 
            "title": "Extending a Service Model"
        }, 
        {
            "location": "/users/extending/#extending-the-controllers", 
            "text": "Extending controllers is just as easy as extending models, but please note that controllers do not return typical datatypes but most commonly set some values for the response object.  The AJAX controllers in this package typically extend the  \\erdiko\\core\\AjaxController  class from the Erdiko Core package. Please refer to the relevant documentation for more information on the response object.  ?php\n\n/**\n * MyUserAjax extends the existing UserAjax controller class \n * and over rides the existing `postRegister` method\n *\n */\nclass MyUserAjax extends \\erdiko\\core\\AjaxController {\n\n    /**\n     *\n     *\n     */\n    public function postRegister()\n    {\n        // custom code goes here\n\n        // send a pretty email to the user\n\n        // set some variables for the response object\n\n    }\n\n}", 
            "title": "Extending the Controllers"
        }, 
        {
            "location": "/authorize/", 
            "text": "Authorize\n\n\nerdiko/authorize package\n\n\nInstallation:\n\n\ncomposer require erdiko/authorize\n\n\n\n\nGit repo: \nhttps://github.com/Erdiko/authorize\n  \n\n\nOverview\n\n\nThis package implements the authorization process, allowing grant or reject user for performing an action over a resource\nbased on your own business rules.\n\n\nSetup / Configuration\n\n\nRequirements\n\n\nAuthorize uses Pimple and Symfony Security.  These are listed in the package.json file and are automatically downloaded.\n\n\nIn the case of Pimple, we chose this package to manage Dependency Injection, allowing us to add more flexibility and\nextensibility. It also adds compatibility with the Symfony Security package.\n\n\nConfiguration\n\n\nIn \n/app/config/default/\n folder add \nauthorize.json\n like below example:\n\n\n{\n     \nvalidators\n:{\n       \ncustom_types\n: [{\n         \nname\n: \nexample\n,\n         \nnamespace\n: \napp_validators_example\n,\n         \nclassname\n: \nExampleValidator\n,\n         \nenabled\n: false\n       }]\n     }\n   }\n\n\n\n\nIt can be copied from \n/authorize/app/config/default/authorize.json\n. We will discuss this file in detail in \nExtending\n\nsection.", 
            "title": "Overview"
        }, 
        {
            "location": "/authorize/#authorize", 
            "text": "erdiko/authorize package  Installation:  composer require erdiko/authorize  Git repo:  https://github.com/Erdiko/authorize", 
            "title": "Authorize"
        }, 
        {
            "location": "/authorize/#overview", 
            "text": "This package implements the authorization process, allowing grant or reject user for performing an action over a resource\nbased on your own business rules.", 
            "title": "Overview"
        }, 
        {
            "location": "/authorize/#setup-configuration", 
            "text": "", 
            "title": "Setup / Configuration"
        }, 
        {
            "location": "/authorize/#requirements", 
            "text": "Authorize uses Pimple and Symfony Security.  These are listed in the package.json file and are automatically downloaded.  In the case of Pimple, we chose this package to manage Dependency Injection, allowing us to add more flexibility and\nextensibility. It also adds compatibility with the Symfony Security package.", 
            "title": "Requirements"
        }, 
        {
            "location": "/authorize/#configuration", 
            "text": "In  /app/config/default/  folder add  authorize.json  like below example:  {\n      validators :{\n        custom_types : [{\n          name :  example ,\n          namespace :  app_validators_example ,\n          classname :  ExampleValidator ,\n          enabled : false\n       }]\n     }\n   }  It can be copied from  /authorize/app/config/default/authorize.json . We will discuss this file in detail in  Extending \nsection.", 
            "title": "Configuration"
        }, 
        {
            "location": "/authorize/security/", 
            "text": "Security\n\n\nHow to use\n\n\nOnce you have installed the package you are ready to start. Basic Role based Admin validation works out of the box!\n\n\nTo start using it in your code just create an instance of \nAuthorizer\n class. This class will expect an instance of\n\nAuthenticationManagerInterface\n from symfony/security package as a constructor parameter.\n\n\nHere's an example:\n\n\n class AuthenticationManager implements AuthenticationManagerInterface\n {\n     private $authenticationManager;\n\n     public function __construct()\n     {\n         // implements UserProviderInterface\n         $userProvider = new InMemoryUserProvider(\n             array(\n                 'bar@mail.com' =\n array(\n                     'password' =\n 'asdf1234',\n                     'roles'    =\n array('ROLE_ADMIN'),\n                 ),\n                 'foo@mail.com' =\n array(\n                     'password' =\n 'asdf1234',\n                     'roles'    =\n array('ROLE_USER'),\n                 ),\n             )\n         );\n\n         // Create an encoder factory that will \nencode\n passwords\n         $encoderFactory = new \\Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory(array(\n             // We simply use plaintext passwords for users from this specific class\n             'Symfony\\Component\\Security\\Core\\User\\User' =\n new PlaintextPasswordEncoder(),\n         ));\n\n         // The user checker is a simple class that allows to check against different elements (user disabled, account expired etc)\n         $userChecker = new UserChecker();\n         // The (authentication) providers are a way to make sure to match credentials against users based on their \nproviderkey\n.\n         $userProvider = array(\n             new DaoAuthenticationProvider($userProvider, $userChecker, 'main', $encoderFactory, true),\n         );\n\n\n         $this-\nauthenticationManager = new AuthenticationProviderManager($userProvider, true);\n     }\n\n     public function authenticate(TokenInterface $unauthenticatedToken)\n     {\n\n         try {\n             $authenticatedToken = $this-\nauthenticationManager-\nauthenticate($unauthenticatedToken);\n             Authorizer::startSession();\n             $tokenStorage = new TokenStorage();\n             $tokenStorage-\nsetToken($authenticatedToken);\n             $_SESSION['tokenstorage'] = $tokenStorage;\n         } catch (\\Exception $failed) {\n             // authentication failed\n             throw new \\Exception($failed-\ngetMessage());\n         }\n         return $authenticatedToken;\n     }\n }\n\n\n\n\nIt\u2019s a best practice to add instance creation in the \n_before\n hook. An example of this best practice looks like this:\n\n\n public function _before()\n {\n     $authManager = new AuthenticationManager();\n     $this-\nauth = new Authorizer($authManager);\n     // Run the parent before filter to prep the theme\n     parent::_before();\n }\n\n\n\n\nYou will then have a \n$this-\nauth\n attribute available to use in any \nget\n or \npost\n action. This will be used in \ncan\n\nmethods that determine access, allowing you to grant or reject access to a resource.\n\n\nFor example, if current user has ADMIN role, then it will be redirected to admin dashboard (GRANTED), otherwise the user\nwill be redirected to login page (REJECTED).\n\n\npublic function getDashboard()\n{\n    if($this-\nauth-\ncan(\nVIEW_ADMIN_DASHBOARD\n)) {\n        // Add page data\n        $this-\nsetTitle('Erdiko Admin Dashboard');\n        $this-\naddView('examples/admin/dashboard');\n    } else {\n        \\erdiko\\core\\helpers\\FlashMessages::set(\nYou SHALL NO Pass!!\n, \ndanger\n);\n        $this-\nredirect('/users/login');\n    }\n}\n\n\n\n\nNote that in this example, current user is an instance of \nSymfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface\n,\nstored in \n$_SESSION['tokenstorage']\n\n\nAlso available is the \u201cVIEW_ADMIN_DASHBOARD\u201d attribute we will use to grant or reject access for the current user.\n\n\nYou can use the same logic to validate Models by adding a \n__construct\n method where you will place the authorize creation\n\n\npublic function __construct()\n{\n    $authManager = new AuthenticationManager();\n    $this-\nauth = new Authorizer($authManager);\n}\n\n\n\n\nSame for GRANT/REJECT:\n\n\npublic function doSomething1()\n{\n    if($this-\nauth-\ncan(\nCAN_DO_1\n)) {\n        return \nsuccess something one\n;\n    } else {\n        throw new \\Exception(\nYou are not granted\n);\n    }\n}", 
            "title": "Security"
        }, 
        {
            "location": "/authorize/security/#security", 
            "text": "", 
            "title": "Security"
        }, 
        {
            "location": "/authorize/security/#how-to-use", 
            "text": "Once you have installed the package you are ready to start. Basic Role based Admin validation works out of the box!  To start using it in your code just create an instance of  Authorizer  class. This class will expect an instance of AuthenticationManagerInterface  from symfony/security package as a constructor parameter.  Here's an example:   class AuthenticationManager implements AuthenticationManagerInterface\n {\n     private $authenticationManager;\n\n     public function __construct()\n     {\n         // implements UserProviderInterface\n         $userProvider = new InMemoryUserProvider(\n             array(\n                 'bar@mail.com' =  array(\n                     'password' =  'asdf1234',\n                     'roles'    =  array('ROLE_ADMIN'),\n                 ),\n                 'foo@mail.com' =  array(\n                     'password' =  'asdf1234',\n                     'roles'    =  array('ROLE_USER'),\n                 ),\n             )\n         );\n\n         // Create an encoder factory that will  encode  passwords\n         $encoderFactory = new \\Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory(array(\n             // We simply use plaintext passwords for users from this specific class\n             'Symfony\\Component\\Security\\Core\\User\\User' =  new PlaintextPasswordEncoder(),\n         ));\n\n         // The user checker is a simple class that allows to check against different elements (user disabled, account expired etc)\n         $userChecker = new UserChecker();\n         // The (authentication) providers are a way to make sure to match credentials against users based on their  providerkey .\n         $userProvider = array(\n             new DaoAuthenticationProvider($userProvider, $userChecker, 'main', $encoderFactory, true),\n         );\n\n\n         $this- authenticationManager = new AuthenticationProviderManager($userProvider, true);\n     }\n\n     public function authenticate(TokenInterface $unauthenticatedToken)\n     {\n\n         try {\n             $authenticatedToken = $this- authenticationManager- authenticate($unauthenticatedToken);\n             Authorizer::startSession();\n             $tokenStorage = new TokenStorage();\n             $tokenStorage- setToken($authenticatedToken);\n             $_SESSION['tokenstorage'] = $tokenStorage;\n         } catch (\\Exception $failed) {\n             // authentication failed\n             throw new \\Exception($failed- getMessage());\n         }\n         return $authenticatedToken;\n     }\n }  It\u2019s a best practice to add instance creation in the  _before  hook. An example of this best practice looks like this:   public function _before()\n {\n     $authManager = new AuthenticationManager();\n     $this- auth = new Authorizer($authManager);\n     // Run the parent before filter to prep the theme\n     parent::_before();\n }  You will then have a  $this- auth  attribute available to use in any  get  or  post  action. This will be used in  can \nmethods that determine access, allowing you to grant or reject access to a resource.  For example, if current user has ADMIN role, then it will be redirected to admin dashboard (GRANTED), otherwise the user\nwill be redirected to login page (REJECTED).  public function getDashboard()\n{\n    if($this- auth- can( VIEW_ADMIN_DASHBOARD )) {\n        // Add page data\n        $this- setTitle('Erdiko Admin Dashboard');\n        $this- addView('examples/admin/dashboard');\n    } else {\n        \\erdiko\\core\\helpers\\FlashMessages::set( You SHALL NO Pass!! ,  danger );\n        $this- redirect('/users/login');\n    }\n}  Note that in this example, current user is an instance of  Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface ,\nstored in  $_SESSION['tokenstorage']  Also available is the \u201cVIEW_ADMIN_DASHBOARD\u201d attribute we will use to grant or reject access for the current user.  You can use the same logic to validate Models by adding a  __construct  method where you will place the authorize creation  public function __construct()\n{\n    $authManager = new AuthenticationManager();\n    $this- auth = new Authorizer($authManager);\n}  Same for GRANT/REJECT:  public function doSomething1()\n{\n    if($this- auth- can( CAN_DO_1 )) {\n        return  success something one ;\n    } else {\n        throw new \\Exception( You are not granted );\n    }\n}", 
            "title": "How to use"
        }, 
        {
            "location": "/authorize/extending/", 
            "text": "Extending Authorize\n\n\nThis package provides you with a framework to create custom validation. There are two different methods to create custom\nvalidation:\n\n\n\n\n\n\nCustom Voters\n\n\nImplement \nSymfony\\Component\\Security\\Core\\Authorization\\Voter\\VoterInterface\n\ninterface, and pass them in an array as second argument of \nAuthorizer\n constructor.\n\n\n\n\n\n\nCustom Validator\n\n\nOr you can create a \nValidator\n class that implements \nerdiko\\authorize ValidatorInterface\n interface.\nThen you will have to register all validators in \n/app/config/default/authorize.json\n, and voila, all the custom validation\nlogic you've created is already available to the authorizer.  \n\n\n\n\n\n\nauthorize.json\n\n\n{\n     \nvalidators\n:{\n       \ncustom_types\n: [{\n         \nname\n: \nexample\n,\n         \nnamespace\n: \napp_validators_example\n,\n         \nclassname\n: \nExampleValidator\n,\n         \nenabled\n: true\n       }]\n     }\n   }\n\n\n\n\nIn these validator classes you will be able to define custom attributes, \"VIEW_ADMIN_DASHBOARD\" as we mention above,\nwe might want to add \"IS_PREMIUM_ACCOUNT\", or any other attributes you want.\n\n\nNote that \nnamespace\n field of the above JSON indicate the class \nnamespace\n and is related to the app root folder,\ne.g. \n/app/validators/example/ExampleValidator.php\n\n\nLet's implement the example class registered in the example JSON.  \n\n\nclass ExampleValidator implements ValidatorInterface\n{\n    public static function supportedAttributes()\n    {\n        return array('IS_PREMIUM_ACCOUNT');\n    }\n\n    public function supportsAttribute($attribute)\n    {\n        return in_array($attribute, self::supportedAttributes());\n    }\n\n    public function validate($token)\n    {\n        $result = false;\n        $user = $token-\ngetUser();\n        if (!$user instanceof UserInterface) {\n            $result = false;\n        } else {\n            $result = ($user-\ngetRole()=='ROLE_PREMIUM');\n        }\n        return $result;\n    }\n}", 
            "title": "Extending"
        }, 
        {
            "location": "/authorize/extending/#extending-authorize", 
            "text": "This package provides you with a framework to create custom validation. There are two different methods to create custom\nvalidation:    Custom Voters  Implement  Symfony\\Component\\Security\\Core\\Authorization\\Voter\\VoterInterface \ninterface, and pass them in an array as second argument of  Authorizer  constructor.    Custom Validator  Or you can create a  Validator  class that implements  erdiko\\authorize ValidatorInterface  interface.\nThen you will have to register all validators in  /app/config/default/authorize.json , and voila, all the custom validation\nlogic you've created is already available to the authorizer.      authorize.json  {\n      validators :{\n        custom_types : [{\n          name :  example ,\n          namespace :  app_validators_example ,\n          classname :  ExampleValidator ,\n          enabled : true\n       }]\n     }\n   }  In these validator classes you will be able to define custom attributes, \"VIEW_ADMIN_DASHBOARD\" as we mention above,\nwe might want to add \"IS_PREMIUM_ACCOUNT\", or any other attributes you want.  Note that  namespace  field of the above JSON indicate the class  namespace  and is related to the app root folder,\ne.g.  /app/validators/example/ExampleValidator.php  Let's implement the example class registered in the example JSON.    class ExampleValidator implements ValidatorInterface\n{\n    public static function supportedAttributes()\n    {\n        return array('IS_PREMIUM_ACCOUNT');\n    }\n\n    public function supportsAttribute($attribute)\n    {\n        return in_array($attribute, self::supportedAttributes());\n    }\n\n    public function validate($token)\n    {\n        $result = false;\n        $user = $token- getUser();\n        if (!$user instanceof UserInterface) {\n            $result = false;\n        } else {\n            $result = ($user- getRole()=='ROLE_PREMIUM');\n        }\n        return $result;\n    }\n}", 
            "title": "Extending Authorize"
        }, 
        {
            "location": "/authenticate/", 
            "text": "Authenticate\n\n\nerdiko/authenticate package\n\n\ninstallation:\n\n\ncomposer require erdiko/authenticate\n\n\n\n\nGit repo: \nhttps://github.com/Erdiko/authenticate\n  \n\n\nOverview\n\n\nThis package helps you to manage authentication process.\nIt includes JWT as default authenticator.\n\n\nRequirements\n\n\nAuthenticate uses Pimple, Symfony Security and Firebase PHP-JWT. These are listed in the package.json file and are automatically downloaded.\n\n\nIn case of Pimple, we chose this package to manage Dependency Injection, allowing us to add more flexibility and\nextensibility. It also adds compatibility with Symfony Security module. Finally the JWT package, is being used to\nprovide a build in  working example of authentication extension using this protocol.\n\n\nSetup / Configuration\n\n\nBefore you start using this package, it needs some initial setup/config.\n\n\nAdd config\n\n\nAuthenticate needs a config file called \nauthenticate.json\n\n\napp\\config\\default\\authenticate.json\n\n\n\n\nIn this file will be defined two major components, the first one related with storage and the other related with\nauthentication.\n\n\nConfiguration\n\n\nFor the storage we provided a SessionStorage service, but you can add your custom storage service just implementing\n\nerdiko\\authenticate\\StorageInterface\n interface and adding it to the config file. For more details refer to\n\nExtending\n\n\nIn case of authentication, there are two steps, \nAuthenticator\n and \nAuthentication\n that implements\n\nerdiko\\authenticate\\AuthenticatorInterface\n and \nerdiko\\authenticate\\AuthenticationInterface\n respectively.\nWithin your app, let's say LoginController or whenever you place the \nlogin\n, you will use an instance of\n\nAuthenticator\n that will provide you a set of useful method to login, logout, maintain cache among others.\nThis authenticator object will use the \nauthentication\n type you select, between all of the enabled options you defined\nin the \nauthenticate.json\n config, and that is the implementation of the second Interface.\n\n\nThere is an example of config file located in the package. You can copy from \nvendor/erdiko/authenticate/app/config/default/authenticate.json\n\n\n{\n  \nauthentication\n: {\n    \navailable_types\n: [{\n      \nname\n: \njwt_auth\n,\n      \nnamespace\n: \nerdiko_authenticate_services\n,\n      \nclassname\n: \nJWTAuthentication\n,\n      \nenabled\n: true\n    }]\n  },\n  \nstorage\n: {\n    \nselected\n: \nsession\n,\n    \nstorage_types\n: [{\n      \nname\n: \nsession\n,\n      \nnamespace\n: \nerdiko_authenticate_Services\n,\n      \nclassname\n: \nSessionStorage\n,\n      \nenabled\n: true\n    }]\n  }\n}\n\n\n\n\nAs we mention above, the \nauthentication\n will define the available classes that\nimplements the user's validation logic. You can choose between a list of them defined in this config. For example, you\ncan have one class that allows you to authenticate using oAuth methods, other that use LDAP, other that use database,\nand so on.\n\n\nSame for the storage section, except that you should use only one type at time, that's why this section has a \nselected\n\nfield.\n\n\nLet's breakdown the config fields.\nIn both cases:\n\n\n\n\nname\n: is the key will be used to references an individual class.\n\n\nnamespace\n: represents a translated class namespace, e.g.: for \napp\\lib\\service\n should be \napp_lib_services\n,\nthe rule is: replace back slash with underscore.\n\n\nclassname\n: is the exact name of the class and it is case-sensitive.\n\n\nenabled\n: True, if it's available to use, false, if you want to disable temporarily.", 
            "title": "Overview"
        }, 
        {
            "location": "/authenticate/#authenticate", 
            "text": "erdiko/authenticate package  installation:  composer require erdiko/authenticate  Git repo:  https://github.com/Erdiko/authenticate", 
            "title": "Authenticate"
        }, 
        {
            "location": "/authenticate/#overview", 
            "text": "This package helps you to manage authentication process.\nIt includes JWT as default authenticator.", 
            "title": "Overview"
        }, 
        {
            "location": "/authenticate/#requirements", 
            "text": "Authenticate uses Pimple, Symfony Security and Firebase PHP-JWT. These are listed in the package.json file and are automatically downloaded.  In case of Pimple, we chose this package to manage Dependency Injection, allowing us to add more flexibility and\nextensibility. It also adds compatibility with Symfony Security module. Finally the JWT package, is being used to\nprovide a build in  working example of authentication extension using this protocol.", 
            "title": "Requirements"
        }, 
        {
            "location": "/authenticate/#setup-configuration", 
            "text": "Before you start using this package, it needs some initial setup/config.", 
            "title": "Setup / Configuration"
        }, 
        {
            "location": "/authenticate/#add-config", 
            "text": "Authenticate needs a config file called  authenticate.json  app\\config\\default\\authenticate.json  In this file will be defined two major components, the first one related with storage and the other related with\nauthentication.", 
            "title": "Add config"
        }, 
        {
            "location": "/authenticate/#configuration", 
            "text": "For the storage we provided a SessionStorage service, but you can add your custom storage service just implementing erdiko\\authenticate\\StorageInterface  interface and adding it to the config file. For more details refer to Extending  In case of authentication, there are two steps,  Authenticator  and  Authentication  that implements erdiko\\authenticate\\AuthenticatorInterface  and  erdiko\\authenticate\\AuthenticationInterface  respectively.\nWithin your app, let's say LoginController or whenever you place the  login , you will use an instance of Authenticator  that will provide you a set of useful method to login, logout, maintain cache among others.\nThis authenticator object will use the  authentication  type you select, between all of the enabled options you defined\nin the  authenticate.json  config, and that is the implementation of the second Interface.  There is an example of config file located in the package. You can copy from  vendor/erdiko/authenticate/app/config/default/authenticate.json  {\n   authentication : {\n     available_types : [{\n       name :  jwt_auth ,\n       namespace :  erdiko_authenticate_services ,\n       classname :  JWTAuthentication ,\n       enabled : true\n    }]\n  },\n   storage : {\n     selected :  session ,\n     storage_types : [{\n       name :  session ,\n       namespace :  erdiko_authenticate_Services ,\n       classname :  SessionStorage ,\n       enabled : true\n    }]\n  }\n}  As we mention above, the  authentication  will define the available classes that\nimplements the user's validation logic. You can choose between a list of them defined in this config. For example, you\ncan have one class that allows you to authenticate using oAuth methods, other that use LDAP, other that use database,\nand so on.  Same for the storage section, except that you should use only one type at time, that's why this section has a  selected \nfield.  Let's breakdown the config fields.\nIn both cases:   name : is the key will be used to references an individual class.  namespace : represents a translated class namespace, e.g.: for  app\\lib\\service  should be  app_lib_services ,\nthe rule is: replace back slash with underscore.  classname : is the exact name of the class and it is case-sensitive.  enabled : True, if it's available to use, false, if you want to disable temporarily.", 
            "title": "Configuration"
        }, 
        {
            "location": "/authenticate/extending/", 
            "text": "Extending Authenticate\n\n\nStorage\n\n\nWe provide a Session Storage type as default method to manage your user's status and other data. However you can choose\na different storage like database, filesystem or memcached just mention few.\n\n\nIn order to create your own storage service, you will have to create a class that implements \nerdiko\\authenticate\\StorageInterface\n\nlike:\n\n\nClass SessionStorage implements StorageInterface {\n\n    public function persist(UserStorageInterface $user)\n    {\n        $this-\nstartSession();\n        $_SESSION[\ncurrent_user\n] = $user-\nmarshall();\n    }\n\n    public function attemptLoad(UserStorageInterface $userModel)\n    {\n        $user = null;\n\n        $sapi = php_sapi_name();\n        if(!$this-\ncontains('cli', $sapi)){\n            $this-\nstartSession();\n        }\n\n        if(array_key_exists(\ncurrent_user\n, $_SESSION)){\n            $_user = $_SESSION[\ncurrent_user\n];\n            if(!empty($_user)){\n                $user = $userModel::unmarshall($_user);\n            }\n        }\n        return $user;\n    }\n\n    public function contains($needle, $haystack)\n    {\n        return strpos($haystack, $needle) !== false;\n    }\n\n    public function destroy()\n    {\n        $this-\nstartSession();\n        if(array_key_exists(\ncurrent_user\n, $_SESSION)){\n            unset($_SESSION[\ncurrent_user\n]);\n        }\n        @session_destroy();\n    }\n\n    private function startSession()\n    {\n        if(!file_exists(ERDIKO_VAR . \n/session\n)) {\n            mkdir(ERDIKO_VAR . \n/session\n);\n        }\n        ini_set('session.save_path',ERDIKO_VAR . \n/session\n);\n        if(session_id() == '') {\n            @session_start();\n        } else {\n            if (session_status() === PHP_SESSION_NONE) {\n                @session_start();\n            }\n        }\n    }\n}\n\n\n\n\nand edit your \nauthenticate.json\n config by adding new item in the \nstorage\n section and put it as \nselected\n\n\n{\n  \nstorage\n: {\n    \nselected\n: \ncustom\n,\n    \nstorage_types\n: [{\n      \nname\n: \nsession\n,\n      \nnamespace\n: \nerdiko_authenticate_services\n,\n      \nclassname\n: \nSessionStorage\n,\n      \nenabled\n: true\n    },\n    {\n      \nname\n: \ncustom\n,\n      \nnamespace\n: \napp_lib_authenticate_services\n,\n      \nclassname\n: \nCustomStorage\n,\n      \nenabled\n: true\n    }]\n  }\n}\n\n\n\n\nAuthentication types\n\n\nAs we mention before, here we need to split in two, \nauthentication\n and \nauthenticator\n.\nLet's start with __authentication\n, here we will create class that implements \n_\nAuthenticationInterface\n where \nwe will put the custom user's validation logic, no matter if it's just a \nreturn true\n, and \nLDAP\n call or any other\ncrazy algorithm.\n\n\nSame as we did with \nstorage\n, we need to add this new class in the \nauthenticate.json\n within the \navailable_types\n\nsection.\n\n\n{\n  \nauthentication\n: {\n    \navailable_types\n: [{\n      \nname\n: \njwt_auth\n,\n      \nnamespace\n: \nerdiko_authenticate_services\n,\n      \nclassname\n: \nJWTAuthentication\n,\n      \nenabled\n: true\n    },\n    {\n      \nname\n: \ncustom_auth\n,\n      \nnamespace\n: \napp_lib_authenticate_services\n,\n      \nclassname\n: \nCustomAuthentication\n,\n      \nenabled\n: true\n    }]\n  }\n}\n\n\n\n\nThe last step is create an \nauthenticator\n class that implements \nAuthenticatorInterface\n.\nThis class is the one you will use in your app to preform the actual login process.\n\n\nWithin this class you will use previous defined tools to authenticate and store data, based on configuration file.\nHere's an example of login method:\n\n\npublic function login($credentials = array(), $type = 'jwt_auth')\n{\n    $storage = $this-\ncontainer[\nSTORAGES\n][$this-\nselectedStorage];\n    $result = false;\n\n    // checks if it's already logged in\n    $user = $storage-\nattemptLoad($this-\nerdikoUser);\n    if($user instanceof UserStorageInterface) {\n        $this-\nlogout();\n    }\n\n    $auth = $this-\ncontainer[\nAUTHENTICATIONS\n][$type];\n    $result = $auth-\nlogin($credentials);\n    if(isset($result-\nuser))\n        $user = $result-\nuser;\n    else\n        throw new \\Exception(\nUser failed to load\n);\n\n    if(!empty($user) \n (false !== $user)) {\n        $this-\npersistUser( $user );\n        $response = true;\n    }\n\n    return $result;\n}\n\n\n\n\nOf course is your choice what method implement, for example, you can opt to skip \npersistUser\n if you want to use client\nside cookie instead of session or any other method on the server side. Said that, we encourage you to implement\n\n\npersistUser\n method like this:\n\n\npublic function persistUser(UserStorageInterface $user)\n{\n    $this-\ngenerateTokenStorage($user);\n}\n\npublic function generateTokenStorage(UserStorageInterface $user)\n{\n    $entityUser = $user-\ngetEntity();\n\n    $userToken = new UsernamePasswordToken($entityUser-\ngetEmail(),$entityUser-\ngetPassword(),'main',$user-\ngetRoles());\n    $_SESSION['tokenstorage'] = $userToken;\n}\n\n\n\n\nIt will give you the chance to interconnect your authenticated user with other packages like \nerdiko/authorize\n or any\n\nSymfony/Security\n.", 
            "title": "Extending"
        }, 
        {
            "location": "/authenticate/extending/#extending-authenticate", 
            "text": "", 
            "title": "Extending Authenticate"
        }, 
        {
            "location": "/authenticate/extending/#storage", 
            "text": "We provide a Session Storage type as default method to manage your user's status and other data. However you can choose\na different storage like database, filesystem or memcached just mention few.  In order to create your own storage service, you will have to create a class that implements  erdiko\\authenticate\\StorageInterface \nlike:  Class SessionStorage implements StorageInterface {\n\n    public function persist(UserStorageInterface $user)\n    {\n        $this- startSession();\n        $_SESSION[ current_user ] = $user- marshall();\n    }\n\n    public function attemptLoad(UserStorageInterface $userModel)\n    {\n        $user = null;\n\n        $sapi = php_sapi_name();\n        if(!$this- contains('cli', $sapi)){\n            $this- startSession();\n        }\n\n        if(array_key_exists( current_user , $_SESSION)){\n            $_user = $_SESSION[ current_user ];\n            if(!empty($_user)){\n                $user = $userModel::unmarshall($_user);\n            }\n        }\n        return $user;\n    }\n\n    public function contains($needle, $haystack)\n    {\n        return strpos($haystack, $needle) !== false;\n    }\n\n    public function destroy()\n    {\n        $this- startSession();\n        if(array_key_exists( current_user , $_SESSION)){\n            unset($_SESSION[ current_user ]);\n        }\n        @session_destroy();\n    }\n\n    private function startSession()\n    {\n        if(!file_exists(ERDIKO_VAR .  /session )) {\n            mkdir(ERDIKO_VAR .  /session );\n        }\n        ini_set('session.save_path',ERDIKO_VAR .  /session );\n        if(session_id() == '') {\n            @session_start();\n        } else {\n            if (session_status() === PHP_SESSION_NONE) {\n                @session_start();\n            }\n        }\n    }\n}  and edit your  authenticate.json  config by adding new item in the  storage  section and put it as  selected  {\n   storage : {\n     selected :  custom ,\n     storage_types : [{\n       name :  session ,\n       namespace :  erdiko_authenticate_services ,\n       classname :  SessionStorage ,\n       enabled : true\n    },\n    {\n       name :  custom ,\n       namespace :  app_lib_authenticate_services ,\n       classname :  CustomStorage ,\n       enabled : true\n    }]\n  }\n}", 
            "title": "Storage"
        }, 
        {
            "location": "/authenticate/extending/#authentication-types", 
            "text": "As we mention before, here we need to split in two,  authentication  and  authenticator .\nLet's start with __authentication , here we will create class that implements  _ AuthenticationInterface  where \nwe will put the custom user's validation logic, no matter if it's just a  return true , and  LDAP  call or any other\ncrazy algorithm.  Same as we did with  storage , we need to add this new class in the  authenticate.json  within the  available_types \nsection.  {\n   authentication : {\n     available_types : [{\n       name :  jwt_auth ,\n       namespace :  erdiko_authenticate_services ,\n       classname :  JWTAuthentication ,\n       enabled : true\n    },\n    {\n       name :  custom_auth ,\n       namespace :  app_lib_authenticate_services ,\n       classname :  CustomAuthentication ,\n       enabled : true\n    }]\n  }\n}  The last step is create an  authenticator  class that implements  AuthenticatorInterface .\nThis class is the one you will use in your app to preform the actual login process.  Within this class you will use previous defined tools to authenticate and store data, based on configuration file.\nHere's an example of login method:  public function login($credentials = array(), $type = 'jwt_auth')\n{\n    $storage = $this- container[ STORAGES ][$this- selectedStorage];\n    $result = false;\n\n    // checks if it's already logged in\n    $user = $storage- attemptLoad($this- erdikoUser);\n    if($user instanceof UserStorageInterface) {\n        $this- logout();\n    }\n\n    $auth = $this- container[ AUTHENTICATIONS ][$type];\n    $result = $auth- login($credentials);\n    if(isset($result- user))\n        $user = $result- user;\n    else\n        throw new \\Exception( User failed to load );\n\n    if(!empty($user)   (false !== $user)) {\n        $this- persistUser( $user );\n        $response = true;\n    }\n\n    return $result;\n}  Of course is your choice what method implement, for example, you can opt to skip  persistUser  if you want to use client\nside cookie instead of session or any other method on the server side. Said that, we encourage you to implement  persistUser  method like this:  public function persistUser(UserStorageInterface $user)\n{\n    $this- generateTokenStorage($user);\n}\n\npublic function generateTokenStorage(UserStorageInterface $user)\n{\n    $entityUser = $user- getEntity();\n\n    $userToken = new UsernamePasswordToken($entityUser- getEmail(),$entityUser- getPassword(),'main',$user- getRoles());\n    $_SESSION['tokenstorage'] = $userToken;\n}  It will give you the chance to interconnect your authenticated user with other packages like  erdiko/authorize  or any Symfony/Security .", 
            "title": "Authentication types"
        }, 
        {
            "location": "/help/", 
            "text": "Help\n\n\nHaving trouble using Erdiko?\n\n\nRead Erdiko Get Started and Erdiko Documentation\n\n\nCreate a Github issue\n\n\nEmail to us erdiko@arroyolabs.com\n\n\nIf you find an issue with these docs please let us know.  You can also submit a pull request to our \ndocumentation repo\n.  All the pages are markdown so they are easy to edit.", 
            "title": "Submitting Issues"
        }, 
        {
            "location": "/help/#help", 
            "text": "Having trouble using Erdiko?  Read Erdiko Get Started and Erdiko Documentation  Create a Github issue  Email to us erdiko@arroyolabs.com  If you find an issue with these docs please let us know.  You can also submit a pull request to our  documentation repo .  All the pages are markdown so they are easy to edit.", 
            "title": "Help"
        }, 
        {
            "location": "/help/style-guide/", 
            "text": "Erdiko coding style guide\n\n\nAll of the Erdiko code is broken up into convenient packages that are published on either Packagist (PHP) or NPM (JavaScript \n Sass).  All code is stored on \nGithub\n.\n\n\nBelow you will find details on how we write our code.  We do our best to stick to these guidelines.\n\n\nPHP\n\n\nWe adhere to the \nPSR\n coding style guide.  \n\n\nhttp://www.php-fig.org/psr/psr-2/\n\n\nMore useful PHP-FIG links:\n\n\nhttp://www.php-fig.org/bylaws/psr-naming-conventions/\n\n\nhttp://www.php-fig.org/psr/psr-1/\n\n\nJavaScript\n\n\nWe follow Google's JavaScript style guide.\n\n\nhttps://google.github.io/styleguide/jsguide.html\n\n\nHTML / CSS\n\n\nWe follow Google's HTML / CSS style guide as well\n\n\nhttps://google.github.io/styleguide/htmlcssguide.html\n\n\nSass\n\n\nWe adhere to Sass best practices, but we admit there is plenty of room for improvement here as we continue to break apart front-end code into re-usable packages.\n\n\nhttp://sass-lang.com/", 
            "title": "Coding style guide"
        }, 
        {
            "location": "/help/style-guide/#erdiko-coding-style-guide", 
            "text": "All of the Erdiko code is broken up into convenient packages that are published on either Packagist (PHP) or NPM (JavaScript   Sass).  All code is stored on  Github .  Below you will find details on how we write our code.  We do our best to stick to these guidelines.", 
            "title": "Erdiko coding style guide"
        }, 
        {
            "location": "/help/style-guide/#php", 
            "text": "We adhere to the  PSR  coding style guide.    http://www.php-fig.org/psr/psr-2/  More useful PHP-FIG links:  http://www.php-fig.org/bylaws/psr-naming-conventions/  http://www.php-fig.org/psr/psr-1/", 
            "title": "PHP"
        }, 
        {
            "location": "/help/style-guide/#javascript", 
            "text": "We follow Google's JavaScript style guide.  https://google.github.io/styleguide/jsguide.html", 
            "title": "JavaScript"
        }, 
        {
            "location": "/help/style-guide/#html-css", 
            "text": "We follow Google's HTML / CSS style guide as well  https://google.github.io/styleguide/htmlcssguide.html", 
            "title": "HTML / CSS"
        }, 
        {
            "location": "/help/style-guide/#sass", 
            "text": "We adhere to Sass best practices, but we admit there is plenty of room for improvement here as we continue to break apart front-end code into re-usable packages.  http://sass-lang.com/", 
            "title": "Sass"
        }, 
        {
            "location": "/help/about/", 
            "text": "What is Erdiko?\n\n\nErdiko is a micro MVC framework and suite of packages to build lean web apps and APIs.  OK, but what does that mean?\n\n\nObjective\n\n\nCreate great packages that we want to use with our projects and that other developers, architects and product managers find useful for their projects.  \n\n\nWe want all of our packages to:\n\n\n\n\nBe lean\n\n\nBe tested\n\n\nInteroperate with other packages and frameworks\n\n\nHave a great developer experience\n\n\n\n\nCompatibility\n\n\nWe strive to make our packages work as stand alone libraries that can be used in any php project, across numerous frameworks.  Each package should be able to work with and without the erdiko framework.  Using the erdiko framework or slim will make the packages easier to integrate, but from the beginning interoperability has been a key concern for us.\n\n\nHistory\n\n\nErdiko started in 2012 as a small open source framework with the goal of creating a lightweight set of code can makes working with other php platforms and libraries easier.  Back then we called it a mash-up framework ;-)\n\n\nToday erdiko has grown to a suite of packages that adhere to PSR and other best practices to create useful components that can be used in a wide array of tasks.  \n\n\nThe future\n\n\nLots of cool ideas in the works, we'll be filling in folks shortly.  Contribute to Erdiko and help us shape the future of the project and PHP development as a whole.", 
            "title": "About Us"
        }, 
        {
            "location": "/help/about/#what-is-erdiko", 
            "text": "Erdiko is a micro MVC framework and suite of packages to build lean web apps and APIs.  OK, but what does that mean?", 
            "title": "What is Erdiko?"
        }, 
        {
            "location": "/help/about/#objective", 
            "text": "Create great packages that we want to use with our projects and that other developers, architects and product managers find useful for their projects.    We want all of our packages to:   Be lean  Be tested  Interoperate with other packages and frameworks  Have a great developer experience", 
            "title": "Objective"
        }, 
        {
            "location": "/help/about/#compatibility", 
            "text": "We strive to make our packages work as stand alone libraries that can be used in any php project, across numerous frameworks.  Each package should be able to work with and without the erdiko framework.  Using the erdiko framework or slim will make the packages easier to integrate, but from the beginning interoperability has been a key concern for us.", 
            "title": "Compatibility"
        }, 
        {
            "location": "/help/about/#history", 
            "text": "Erdiko started in 2012 as a small open source framework with the goal of creating a lightweight set of code can makes working with other php platforms and libraries easier.  Back then we called it a mash-up framework ;-)  Today erdiko has grown to a suite of packages that adhere to PSR and other best practices to create useful components that can be used in a wide array of tasks.", 
            "title": "History"
        }, 
        {
            "location": "/help/about/#the-future", 
            "text": "Lots of cool ideas in the works, we'll be filling in folks shortly.  Contribute to Erdiko and help us shape the future of the project and PHP development as a whole.", 
            "title": "The future"
        }, 
        {
            "location": "/help/contributing/", 
            "text": "Contributing to Erdiko\n\n\nHow to contribute\n\n\nSee our \nCoding Style Guide\n\n\nContributing to User Admin\n\n\nSee our \ndoc on github\n to set up a development environment", 
            "title": "Contributing"
        }, 
        {
            "location": "/help/contributing/#contributing-to-erdiko", 
            "text": "", 
            "title": "Contributing to Erdiko"
        }, 
        {
            "location": "/help/contributing/#how-to-contribute", 
            "text": "See our  Coding Style Guide", 
            "title": "How to contribute"
        }, 
        {
            "location": "/help/contributing/#contributing-to-user-admin", 
            "text": "See our  doc on github  to set up a development environment", 
            "title": "Contributing to User Admin"
        }
    ]
}