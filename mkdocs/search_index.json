{
    "docs": [
        {
            "location": "/", 
            "text": "Erdiko\n\n\n\n\nA micro MVC framework and suite of packages to build lean web apps and APIs\n\n\nLearn more about Erdiko\n\n\n\n\nWhat is Erdiko?\n \nLearn more about the Erdiko concept and packages\n\n\nErdiko framework Quick Start\n\n\nUser Admin\n \nA complete user system complete with a modular admin", 
            "title": "Home"
        }, 
        {
            "location": "/#erdiko", 
            "text": "A micro MVC framework and suite of packages to build lean web apps and APIs  Learn more about Erdiko   What is Erdiko?   Learn more about the Erdiko concept and packages  Erdiko framework Quick Start  User Admin   A complete user system complete with a modular admin", 
            "title": "Erdiko"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Quick Start\n\n\nExample styles\n\n\nThese are from the Admonition plugin, \nhttp://squidfunk.github.io/mkdocs-material/extensions/admonition/\n\n\n\n\nThis is an example note\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nPavonibus cornua parvoque in inbellemque gentisque bella\n\n\nLorem markdownum cadunt signo: lambentem velut, exequialia Dianae e telum cuius\nmutatus, minabitur. Enipeu exit solus templa sit; ipsaque Babylonia fluctibus\ncapillis rapit praestat suorum. Fata vacat Surrentino, tergo hoc fertur\nindigenis montibus Latona ipsa stant, digitis tubere aggeribus!\n\n\nmotherboard += video_cluster(promInternet, modemWwwTrim *\n        boot_duplex_tablet, docking_sla * 3 * login);\ngpu(cookieSmartphoneParse, sound_view + cdfs);\nsoftWizardUser -= mtu(scsiLunServer, name_emulation_troll, mediaFunction) +\n        1 + emoticon_media_carrier;\n\n\n\nEt esse conponere cui plangente cauda\n\n\nMultum auribus clausit laboribus et etiam vidit antiqua summo congressus flamina\ndeus, dique? \nFerunt dumque edere\n apertis duas umbra munus o robore hanc\nnectare veste \nhabet polumque\n ministrat is abstulit calorem sparsit crines.\n\n\n\n\nSalva tanget spinae contulerant retenta armenta\n\n\nPriamoque Abantiades\n\n\nDevorat aliis\n\n\nEgreditur nocuit\n\n\n\n\nTamen dubitat intus quam quam\n\n\nCapit animam talem reginam gramina alveus nec Cinyras utilis vero tulit auctor.\nSaepe ut qui nec perhorruit plaga cornua avidos tardius?\n\n\n\n\nDanaen pro parva abactas coquiturque respondere auras\n\n\nFame alveus lucos\n\n\nAlbo posse\n\n\nTectam Hectoris positoque serpens remittit lumina insula\n\n\nIngentem sed ceu\n\n\nIn ira niveo non defenditur narrantia ad\n\n\n\n\nCelas \npatentis quisquam\n nomen heros aras et flentemque, deum et coepta\ninducere, praeferri \ntabo cecidere\n. Curvamine urbes inde obnoxius senilis\n\nconamine\n circuit \niaculo non et\n puniceum ipse; opes excipit. Corpus cura\nmundi harenae vetustas fatalis lacerare digitis cladis \nfulgebant auroque\nvideor\n. Corpus \nsubstitit missum\n paras maioris formatus parabam pomaria\nvestibus ipsa: sibi refert pedes. Nam et sed protinus colunt pacifer, ut\npostarum uno \nsternentemque veteres\n latius.", 
            "title": "Quick start"
        }, 
        {
            "location": "/quickstart/#quick-start", 
            "text": "", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quickstart/#example-styles", 
            "text": "These are from the Admonition plugin,  http://squidfunk.github.io/mkdocs-material/extensions/admonition/   This is an example note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.", 
            "title": "Example styles"
        }, 
        {
            "location": "/quickstart/#pavonibus-cornua-parvoque-in-inbellemque-gentisque-bella", 
            "text": "Lorem markdownum cadunt signo: lambentem velut, exequialia Dianae e telum cuius\nmutatus, minabitur. Enipeu exit solus templa sit; ipsaque Babylonia fluctibus\ncapillis rapit praestat suorum. Fata vacat Surrentino, tergo hoc fertur\nindigenis montibus Latona ipsa stant, digitis tubere aggeribus!  motherboard += video_cluster(promInternet, modemWwwTrim *\n        boot_duplex_tablet, docking_sla * 3 * login);\ngpu(cookieSmartphoneParse, sound_view + cdfs);\nsoftWizardUser -= mtu(scsiLunServer, name_emulation_troll, mediaFunction) +\n        1 + emoticon_media_carrier;", 
            "title": "Pavonibus cornua parvoque in inbellemque gentisque bella"
        }, 
        {
            "location": "/quickstart/#et-esse-conponere-cui-plangente-cauda", 
            "text": "Multum auribus clausit laboribus et etiam vidit antiqua summo congressus flamina\ndeus, dique?  Ferunt dumque edere  apertis duas umbra munus o robore hanc\nnectare veste  habet polumque  ministrat is abstulit calorem sparsit crines.   Salva tanget spinae contulerant retenta armenta  Priamoque Abantiades  Devorat aliis  Egreditur nocuit", 
            "title": "Et esse conponere cui plangente cauda"
        }, 
        {
            "location": "/quickstart/#tamen-dubitat-intus-quam-quam", 
            "text": "Capit animam talem reginam gramina alveus nec Cinyras utilis vero tulit auctor.\nSaepe ut qui nec perhorruit plaga cornua avidos tardius?   Danaen pro parva abactas coquiturque respondere auras  Fame alveus lucos  Albo posse  Tectam Hectoris positoque serpens remittit lumina insula  Ingentem sed ceu  In ira niveo non defenditur narrantia ad   Celas  patentis quisquam  nomen heros aras et flentemque, deum et coepta\ninducere, praeferri  tabo cecidere . Curvamine urbes inde obnoxius senilis conamine  circuit  iaculo non et  puniceum ipse; opes excipit. Corpus cura\nmundi harenae vetustas fatalis lacerare digitis cladis  fulgebant auroque\nvideor . Corpus  substitit missum  paras maioris formatus parabam pomaria\nvestibus ipsa: sibi refert pedes. Nam et sed protinus colunt pacifer, ut\npostarum uno  sternentemque veteres  latius.", 
            "title": "Tamen dubitat intus quam quam"
        }, 
        {
            "location": "/sample-app/", 
            "text": "Sample Application\n\n\nPHP", 
            "title": "Sample app"
        }, 
        {
            "location": "/sample-app/#sample-application", 
            "text": "", 
            "title": "Sample Application"
        }, 
        {
            "location": "/sample-app/#php", 
            "text": "", 
            "title": "PHP"
        }, 
        {
            "location": "/user-admin/", 
            "text": "User Admin\n\n\nerdiko/user-admin package\n\n\nInstallation:\n\n\ncomposer create erdiko/user-admin\n\n\n\nIntro\n\n\nThis is what it does...\n\n\nDocker (Quick Start)\n\n\nThe easiest, and recommended, way to get start is to use Docker.  The instructions assume you have Composer, Docker, \n Docker Compose already installed on your machine.\n\n\nTo start your environment do the following.\n\n\ncomposer create erdiko/user-admin\ncd user-admin\ndocker-compose up -d\n\n\n\nIf you are on a PC or mac, the easiest way to install Docker and Docker Compose is to install the \nDocker Toolbox\n on your computer.  It will also install Kitematic and Machine.\n\n\nDefault Login\n\n\nIf you followed the quick start above, it will create a sample admin user for you.  You can login with the following credentials.\n\n\nuser: erdiko@arroyolabs.com\npass: password\n\n\nSetup / Configuration\n\n\nTheming\n\n\nContributing", 
            "title": "Overview"
        }, 
        {
            "location": "/user-admin/#user-admin", 
            "text": "erdiko/user-admin package  Installation:  composer create erdiko/user-admin", 
            "title": "User Admin"
        }, 
        {
            "location": "/user-admin/#intro", 
            "text": "This is what it does...", 
            "title": "Intro"
        }, 
        {
            "location": "/user-admin/#docker-quick-start", 
            "text": "The easiest, and recommended, way to get start is to use Docker.  The instructions assume you have Composer, Docker,   Docker Compose already installed on your machine.  To start your environment do the following.  composer create erdiko/user-admin\ncd user-admin\ndocker-compose up -d  If you are on a PC or mac, the easiest way to install Docker and Docker Compose is to install the  Docker Toolbox  on your computer.  It will also install Kitematic and Machine.", 
            "title": "Docker (Quick Start)"
        }, 
        {
            "location": "/user-admin/#default-login", 
            "text": "If you followed the quick start above, it will create a sample admin user for you.  You can login with the following credentials.  user: erdiko@arroyolabs.com\npass: password", 
            "title": "Default Login"
        }, 
        {
            "location": "/user-admin/#setup-configuration", 
            "text": "", 
            "title": "Setup / Configuration"
        }, 
        {
            "location": "/user-admin/#theming", 
            "text": "", 
            "title": "Theming"
        }, 
        {
            "location": "/user-admin/#contributing", 
            "text": "", 
            "title": "Contributing"
        }, 
        {
            "location": "/user-admin/extending/", 
            "text": "Extending User Admin\n\n\nGeneral customization\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Extending"
        }, 
        {
            "location": "/user-admin/extending/#extending-user-admin", 
            "text": "", 
            "title": "Extending User Admin"
        }, 
        {
            "location": "/user-admin/extending/#general-customization", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "General customization"
        }, 
        {
            "location": "/user-admin/extending/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/user-admin/angular/", 
            "text": "Angular UI\n\n\nWelcome to the Angular UI!\n\n\nIf you are able to see the page in the screenshot below then ..congratulations! \nThe hardest part is now over. \n\n\nNow, let's get started!\n\n\nLog-In\n\n\n\n\nAt the very start of the app, you should see the Email and Password form.\n\n\nYou can use the following credentials to start the log-in process.\n\n\nUser:\n\n\nfoo@mail.com\n\n\n\nPassword:\n\n\nasdf1234\n\n\n\nAssuming everything goes well, you should be brought into the home page and a message that tells you that the Login is Successful.\nLets click on \nCreate User\n below the Erdiko User Admin header title to create our first User.\n\n\n\n\nCreate User\n\n\nWhen Create a User is clicked from the home page, you will be directed to the following page:\n\n\n\n\nThe User information requires a name, valid email address, a role (Admin, User, etc) as well as a password that requires at least a numeric character and at least 5 characters.\n\n\nLet's create a User name created at random ...say Cody Bellinger.\n\n\n\n\nWhen valid name, email address and password is used, a new user will be created.\n\n\n\n\nUser List\n\n\nWhen User List is clicked from either the navigation bar or the content. Below is the list of names containing the names generated from our database. \n(If you have jumped in straight to the User List without creating a user, the list will be empty).\nThe user list will be generated as soon as you start creating users! (Cody Bellinger is available at top of the list from our previous examplef).\n\n\n\n\nUsers-Event-Log\n\n\nErdiko's User Admin package collects significant histories of action taken by each user. When \nUser Event Log\n is clicked, a brief overview of every action every user has made is generated.\n\n\n\n\nEdit / Update User Information\n\n\nIf/When you decide that the user information is outdated and needs to be changed, click on the \nEdit\n link in the Row of a user you would like changed.\nIn the Edit-User Page's \nEdit User\n tab, all the User information is available for change. In the Edit-User page, value of name, email and user's role which are initially given in the Create User section can be changed.\nWhen all the editable information are valid, the \nSave\n button will be enabled. \n\n\n\n\nCody Bellinger's name and email will be replaced by Clark Kent and his email address. (Notice how the User ID, Joined Date as well as Last Login is same as before).\n\n\n\n\nCody Bellinger is now Clark Kent!\n\n\n\n\nYou can go back to the User-List to confirm the change.\n\n\n\n\nEdit / Update User Password\n\n\nJust like changing the User Information, User Password can also be changed with ease.\n\n\nClick on the \nUpdate Password\n tab next to the \nEdit User\n tab to create a new password. Just like as in \nCreate User\n, the new password also requires at least a numeric character and at least 5 characters. \n\n\nPassword being changed is shown below:\n\n\n\n\nUser-Event Log\n\n\nBelow the Edit User form is an User Event Log. This table generates the grid listing all the actions taken by this specified user. Because this user has not taken any action thus far, none is generated.\n\n\nDelete User\n\n\nIf the User happenned to be created by a mistake, the red \nDelete\n button is available at the last column of the \nUser List\n. Please click the Delete button of the User's Row you want deleted.\n\n\nIt will prompt you one last time to ensure this is the action you would want to take.\n\n\n\nAfter confirming the action, quick glance at the top of User List will verify that Clark Kent is no more.\n\n\n\n\nLog-Out\n\n\nIf everything is well finished, click the \nLogout\n link in the Navigation Bar to logout.", 
            "title": "Angular UI"
        }, 
        {
            "location": "/user-admin/angular/#angular-ui", 
            "text": "", 
            "title": "Angular UI"
        }, 
        {
            "location": "/user-admin/angular/#welcome-to-the-angular-ui", 
            "text": "If you are able to see the page in the screenshot below then ..congratulations! \nThe hardest part is now over.   Now, let's get started!", 
            "title": "Welcome to the Angular UI!"
        }, 
        {
            "location": "/user-admin/angular/#log-in", 
            "text": "At the very start of the app, you should see the Email and Password form.  You can use the following credentials to start the log-in process.  User:  foo@mail.com  Password:  asdf1234  Assuming everything goes well, you should be brought into the home page and a message that tells you that the Login is Successful.\nLets click on  Create User  below the Erdiko User Admin header title to create our first User.", 
            "title": "Log-In"
        }, 
        {
            "location": "/user-admin/angular/#create-user", 
            "text": "When Create a User is clicked from the home page, you will be directed to the following page:   The User information requires a name, valid email address, a role (Admin, User, etc) as well as a password that requires at least a numeric character and at least 5 characters.  Let's create a User name created at random ...say Cody Bellinger.   When valid name, email address and password is used, a new user will be created.", 
            "title": "Create User"
        }, 
        {
            "location": "/user-admin/angular/#user-list", 
            "text": "When User List is clicked from either the navigation bar or the content. Below is the list of names containing the names generated from our database. \n(If you have jumped in straight to the User List without creating a user, the list will be empty).\nThe user list will be generated as soon as you start creating users! (Cody Bellinger is available at top of the list from our previous examplef).", 
            "title": "User List"
        }, 
        {
            "location": "/user-admin/angular/#users-event-log", 
            "text": "Erdiko's User Admin package collects significant histories of action taken by each user. When  User Event Log  is clicked, a brief overview of every action every user has made is generated.", 
            "title": "Users-Event-Log"
        }, 
        {
            "location": "/user-admin/angular/#edit-update-user-information", 
            "text": "If/When you decide that the user information is outdated and needs to be changed, click on the  Edit  link in the Row of a user you would like changed.\nIn the Edit-User Page's  Edit User  tab, all the User information is available for change. In the Edit-User page, value of name, email and user's role which are initially given in the Create User section can be changed.\nWhen all the editable information are valid, the  Save  button will be enabled.    Cody Bellinger's name and email will be replaced by Clark Kent and his email address. (Notice how the User ID, Joined Date as well as Last Login is same as before).   Cody Bellinger is now Clark Kent!   You can go back to the User-List to confirm the change.", 
            "title": "Edit / Update User Information"
        }, 
        {
            "location": "/user-admin/angular/#edit-update-user-password", 
            "text": "Just like changing the User Information, User Password can also be changed with ease.  Click on the  Update Password  tab next to the  Edit User  tab to create a new password. Just like as in  Create User , the new password also requires at least a numeric character and at least 5 characters.   Password being changed is shown below:", 
            "title": "Edit / Update User Password"
        }, 
        {
            "location": "/user-admin/angular/#user-event-log", 
            "text": "Below the Edit User form is an User Event Log. This table generates the grid listing all the actions taken by this specified user. Because this user has not taken any action thus far, none is generated.", 
            "title": "User-Event Log"
        }, 
        {
            "location": "/user-admin/angular/#delete-user", 
            "text": "If the User happenned to be created by a mistake, the red  Delete  button is available at the last column of the  User List . Please click the Delete button of the User's Row you want deleted.  It will prompt you one last time to ensure this is the action you would want to take.  After confirming the action, quick glance at the top of User List will verify that Clark Kent is no more.", 
            "title": "Delete User"
        }, 
        {
            "location": "/user-admin/angular/#log-out", 
            "text": "If everything is well finished, click the  Logout  link in the Navigation Bar to logout.", 
            "title": "Log-Out"
        }, 
        {
            "location": "/user-admin/extending-angular/", 
            "text": "Extending the Angular UI", 
            "title": "Extending Angular UI"
        }, 
        {
            "location": "/user-admin/extending-angular/#extending-the-angular-ui", 
            "text": "", 
            "title": "Extending the Angular UI"
        }, 
        {
            "location": "/user-admin/contributing/", 
            "text": "Contributing to Erdiko\n\n\nHow to contribute\n\n\nSee our \nCoding Style Guide", 
            "title": "Contributing"
        }, 
        {
            "location": "/user-admin/contributing/#contributing-to-erdiko", 
            "text": "", 
            "title": "Contributing to Erdiko"
        }, 
        {
            "location": "/user-admin/contributing/#how-to-contribute", 
            "text": "See our  Coding Style Guide", 
            "title": "How to contribute"
        }, 
        {
            "location": "/users/", 
            "text": "Users\n\n\nerdiko/users package\n\n\nThe \nerdiko/users\n is a package adding Service Models and AJAX endpoints for user \nmanagement in a Erdiko application.\n\n\nIntro\n\n\nThis package provides ORM entities \n service models to manage user records, and exposes AJAX endpoints to allow your application to interact with these service models.\n\n\nPackage Installation \n Setup:\n\n\nInstall the Package\n\n\nInstall the package via composer:\n\n\ncomposer require erdiko/users\n\n\nCreate \n Install the DB\n\n\nThis package relies upon a number of database tables to store user records. You must create the database \n tables before you can use this package.\n\n\nWe highly recomend installing the DB and tables with our install scripts found in the erdiko/user-admin repo (\nscripts/install-db.sh\n). More information can be found on the erdiko/user-admin README file.\n\n\nIf you would like to install the database manually, please use the \nusers\\sql\\dumps\\user-admin.sql\n to create the database defintion.\n\n\nAdd the required routes to your Erdiko application\n\n\nBelow are examples of the minimum required routes to interact with the \nusers\n package:\n\n\n\n\nLogin Controller OR UserAuthenticationAjax Controller Route\n\n\nThe Login Controller exposes self-contained login/logout actions and views, these methods expose an HTML form to allow users to login\n\n\n\"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\UserAjax\"\n\n\n\n\n\n\nThe UserAuthenticationAjax controller provides actions to manage login/logout and password related situations as forgotPass and changePassword. This route is for AJAX login \n logout.\n\n\n\"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\UserAuthenticationAjax\"\n\n\n\n\n\n\n\n\n\n\nUserajax Controller Route\n\n\nProvides actions relative to manage users without privileges, to have it accessible.\n\n\n\"/[ROUTE NAME]]/:action\": \"\\erdiko\\users\\controllers\\UserAjax\"\n\n\n\n\n\n\n\n\n\n\nadmin\\Userajax Controller Route\n\n\nProvides actions relative to manage users as admin level\n\n\n\"/ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\Userajax\"\n\n\n\n\n\n\n\n\n\n\n\n\nExample Route Config\n\n\nBelow is an example config containing all the AJAX endpoints exposed by the package:\n\n\n {\n     \nroutes\n: {\n         \n/ajax/users/admin/:action\n: \n\\erdiko\\users\\controllers\\admin\\UserAjax\n,\n         \n/ajax/users/:action\n: \n\\erdiko\\users\\controllers\\UserAjax\n,\n         \n/ajax/roles/:action\n: \n\\erdiko\\users\\controllers\\RoleAjax\n,\n         \n/ajax/auth/:action\n: \n\\erdiko\\users\\controllers\\UserAuthenticationAjax\n,\n         \n/users/:action\n: \n\\erdiko\\users\\controllers\\Login\n\n     }\n }\n\n\n\n\nCurrent Directory Structure\n\n\nBelow is the current directory structure for the project, with a brief explanation below:\n\n\n\u251c\u2500\u2500 composer.json   \n\u251c\u2500\u2500 scripts      \n\u251c\u2500\u2500 sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dumps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 updates\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 entities\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 shared\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 validators\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n\u2514\u2500\u2500 tests\n\n\n\n\nscripts\n\n\nThe scripts directory contains helper scripts to help with package installation, as well some allowing for our CI setup.\n\n\nScripts used to upgrade the DB structure or manipulate persistent data will be stored here in future features.\n\n\nsql\n\n\nThis directory contains complete database dumps and update scripts, named respectively \ndumps\n and \nupdates\n\n\nThe database dumps in \ndumps\n are used to create the initial tables. There is a version of the database structure named \nuser-admin.sql\n that contains the base table definition and an alternate version named \nuser-admin-with-data.sql\n with some sample data used for testing and development of the package.\n\n\nThe \nupdates\n directory contains upgrade SQL scripts used to alter the DB defintion and table structures without touching the existing data in these tables. \n\n\nUpdate File Naming Structure\n\n\nThese files have a naming scheme so we can create a script to run these in order with a future feature. The file name is prepended with an integer indicating the order in which this script needs to be run, the larger the number the later the upgrade. \n\n\nHere is an example filename:\n\n\n[INTEGER WITH LEADING ZEROS]-[USER FRIENDLY NAME].sql\n\n\nsrc\n\n\nThis directory contains all the source files for the package itself: Entities, Models, Controllers, Validator Classes and template partials.\n\n\ntests\n\n\nThis directory contains all the phpunit tests for this package.\n\n\nUnit Testing\n\n\nWe provide unit tests via PHPUnit and we constantly update these tests with feature updates and bug fixes. These tests are run by our CI environment on every commit and build, but you can also run these tests manually from the \ntests\n directory:\n\n\nphpunit AllTests", 
            "title": "Overview"
        }, 
        {
            "location": "/users/#users", 
            "text": "erdiko/users package  The  erdiko/users  is a package adding Service Models and AJAX endpoints for user \nmanagement in a Erdiko application.", 
            "title": "Users"
        }, 
        {
            "location": "/users/#intro", 
            "text": "This package provides ORM entities   service models to manage user records, and exposes AJAX endpoints to allow your application to interact with these service models.", 
            "title": "Intro"
        }, 
        {
            "location": "/users/#package-installation-setup", 
            "text": "", 
            "title": "Package Installation &amp; Setup:"
        }, 
        {
            "location": "/users/#install-the-package", 
            "text": "Install the package via composer:  composer require erdiko/users", 
            "title": "Install the Package"
        }, 
        {
            "location": "/users/#create-install-the-db", 
            "text": "This package relies upon a number of database tables to store user records. You must create the database   tables before you can use this package.  We highly recomend installing the DB and tables with our install scripts found in the erdiko/user-admin repo ( scripts/install-db.sh ). More information can be found on the erdiko/user-admin README file.  If you would like to install the database manually, please use the  users\\sql\\dumps\\user-admin.sql  to create the database defintion.", 
            "title": "Create &amp; Install the DB"
        }, 
        {
            "location": "/users/#add-the-required-routes-to-your-erdiko-application", 
            "text": "Below are examples of the minimum required routes to interact with the  users  package:   Login Controller OR UserAuthenticationAjax Controller Route  The Login Controller exposes self-contained login/logout actions and views, these methods expose an HTML form to allow users to login  \"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\UserAjax\"    The UserAuthenticationAjax controller provides actions to manage login/logout and password related situations as forgotPass and changePassword. This route is for AJAX login   logout.  \"/[ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\UserAuthenticationAjax\"      Userajax Controller Route  Provides actions relative to manage users without privileges, to have it accessible.  \"/[ROUTE NAME]]/:action\": \"\\erdiko\\users\\controllers\\UserAjax\"      admin\\Userajax Controller Route  Provides actions relative to manage users as admin level  \"/ROUTE NAME]/:action\": \"\\erdiko\\users\\controllers\\admin\\Userajax\"", 
            "title": "Add the required routes to your Erdiko application"
        }, 
        {
            "location": "/users/#example-route-config", 
            "text": "Below is an example config containing all the AJAX endpoints exposed by the package:   {\n      routes : {\n          /ajax/users/admin/:action :  \\erdiko\\users\\controllers\\admin\\UserAjax ,\n          /ajax/users/:action :  \\erdiko\\users\\controllers\\UserAjax ,\n          /ajax/roles/:action :  \\erdiko\\users\\controllers\\RoleAjax ,\n          /ajax/auth/:action :  \\erdiko\\users\\controllers\\UserAuthenticationAjax ,\n          /users/:action :  \\erdiko\\users\\controllers\\Login \n     }\n }", 
            "title": "Example Route Config"
        }, 
        {
            "location": "/users/#current-directory-structure", 
            "text": "Below is the current directory structure for the project, with a brief explanation below:  \u251c\u2500\u2500 composer.json   \n\u251c\u2500\u2500 scripts      \n\u251c\u2500\u2500 sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dumps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 updates\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 entities\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 shared\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 validators\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n\u2514\u2500\u2500 tests", 
            "title": "Current Directory Structure"
        }, 
        {
            "location": "/users/#scripts", 
            "text": "The scripts directory contains helper scripts to help with package installation, as well some allowing for our CI setup.  Scripts used to upgrade the DB structure or manipulate persistent data will be stored here in future features.", 
            "title": "scripts"
        }, 
        {
            "location": "/users/#sql", 
            "text": "This directory contains complete database dumps and update scripts, named respectively  dumps  and  updates  The database dumps in  dumps  are used to create the initial tables. There is a version of the database structure named  user-admin.sql  that contains the base table definition and an alternate version named  user-admin-with-data.sql  with some sample data used for testing and development of the package.  The  updates  directory contains upgrade SQL scripts used to alter the DB defintion and table structures without touching the existing data in these tables.", 
            "title": "sql"
        }, 
        {
            "location": "/users/#update-file-naming-structure", 
            "text": "These files have a naming scheme so we can create a script to run these in order with a future feature. The file name is prepended with an integer indicating the order in which this script needs to be run, the larger the number the later the upgrade.   Here is an example filename:  [INTEGER WITH LEADING ZEROS]-[USER FRIENDLY NAME].sql", 
            "title": "Update File Naming Structure"
        }, 
        {
            "location": "/users/#src", 
            "text": "This directory contains all the source files for the package itself: Entities, Models, Controllers, Validator Classes and template partials.", 
            "title": "src"
        }, 
        {
            "location": "/users/#tests", 
            "text": "This directory contains all the phpunit tests for this package.", 
            "title": "tests"
        }, 
        {
            "location": "/users/#unit-testing", 
            "text": "We provide unit tests via PHPUnit and we constantly update these tests with feature updates and bug fixes. These tests are run by our CI environment on every commit and build, but you can also run these tests manually from the  tests  directory:  phpunit AllTests", 
            "title": "Unit Testing"
        }, 
        {
            "location": "/users/ajax/", 
            "text": "Users Ajax Endpoints\n\n\nIntro\n\n\nThe Users package exposes some AJAX endpoints to allow your Erdiko Application to interact with the underlying service models. \n\n\nSome of these endpoints require an authenticated user and will be noted as such.\n\n\nUnique Response Object Valuess\n\n\nAll of these AJAX endpoints return a JSON formatted response and contain some unique responses as well as common values indicating the success or failure of the request.\n\n\nHere is a brief list of the common response variables:\n\n\n\n\nmethod\n\n\nString indicating the requested method\n\n\n\n\n\n\nsuccess\n\n\nBoolean flag set to true for a successful login attempt, else this is false\n\n\n\n\n\n\nerror_code\n\n\nError code if the login attempt is unsuccessful\n\n\n\n\n\n\nerror_message\n\n\nError message if the login attempt is unsuccessful \n\n\n\n\n\n\n\n\nHere is an example of a successful request response:\n\n\n{\n    \nmethod\n:           \nlogin\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \ntoken\n:            \n1234asdf\n,\n}\n\n\n\n\nIf a request is unsuccessful, we return flags and messaging explaining the error. Here is an example:\n\n\n{\n    \nmethod\n:           \nlogin\n,\n    \nsuccess\n:          false,\n    \nerror_code\n:       1,\n    \nerror_message\n:    \nInvalid email or password provided; User was not found\n\n}\n\n\n\n\nUser Authentication\n\n\npostLogin\n\n\nPOST endpoint that logs a user in via the JWTAuthenticator (\nerdiko\\authenticate\\services\\JWTAuthenticator\n) from the Erdiko\\Authenticate package. \n\n\nAfter successfully validating the user's email and password with the JWTAuthenticator class, the AJAX response will return a JWT token.\n\n\nURL\n\n\n[ROUTE]/login/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nUser's email\n\n\n\n\n\n\npassword\n\n\nUser's password\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\ntoken\n\n\nJWT token generated by the JWTAuthenticator class\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlogin\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \ntoken\n:            \n1234asdf\n,\n}\n\n\n\n\ngetLogout\n\n\nGET endpoint that logs a user out via the BasicAuthenticator (\nerdiko\\authenticate\\services\\BasicAuthenticator\n) from the Erdiko\\Authenticate package. \n\n\nURL\n\n\n[ROUTE]/logout/\n\n\nRequired Parameters\n\n\nn/a\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlogout\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}\n\n\n\n\npostChangepass\n\n\nPOST endpoint that attempts to change a password for an existing user via the BasicAuthenticator (\nerdiko\\authenticate\\services\\BasicAuthenticator\n) from the Erdiko\\Authenticate package. \n\n\nThis method will return false if the user's email and password do not match an existing user.\n\n\nURL\n\n\n[ROUTE]/changepass/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nExisting user's email\n\n\n\n\n\n\ncurrentpass\n\n\nCurrent user's password\n\n\n\n\n\n\nnewpass\n\n\nNew user's password \n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nchangepass\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}\n\n\n\n\npostForgotpass\n\n\nPOST endpoint that will send a \"Reset Password\" email to a user after resetting the user's email to a random string.\n\n\nThis method will return false if the email is not found in the user database.\n\n\nURL\n\n\n[ROUTE]/forgotpass/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nExisting user's email\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nforgotpass\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}\n\n\n\n\nRole\n\n\nAll Role AJAX routes require an authenticated user, and will check for a valid JWT bearer token.\n\n\ngetRoles\n\n\nGET endpoint that returns a list of active roles found in the DB and a count of active users associated with the role.\n\n\nURL\n\n\n[ROUTE]/roles/\n\n\nRequired Parameters\n\n\nn/a\n\n\nUnique Response Object Values\n\n\n\n\nroles\n\n\nArray of existing roles \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nroles\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nroles\n: [\n        {\n            \nid\n: 42,\n            \nname\n: \nCustomer\n,\n            \nactive\n: true,\n            \nusers\n: 30\n        },\n        {\n            \nid\n: 43,\n            \nname\n: \nAdmin\n,\n            \nactive\n: true,\n            \nusers\n: 3\n        }\n    ]\n}\n\n\n\n\ngetRole\n\n\nGET endpoint that returns a JSON representation of a valid Role for a provided ID\nalong with a list of users associate with this role.\n\n\nURL\n\n\n[ROUTE]/role/\n\n\nRequired Parameters\n\n\nn/a\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nObject representation of the role found for the provided ID \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nrole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n: {\n        \nid\n:       43,\n        \nname\n:     \nAdmin\n,\n        \nactive\n:   true,\n        \nusers\n: [\n            {\n                \nid\n:       2,\n                \nemail\n:    \njohn.smith@example.com\n,\n                \nname\n:     \nJohn Smith\n\n            }\n        ]\n    }\n}\n\n\n\n\npostCreaterole\n\n\nPOST endpoint that create a Role record with the provided values.\n\n\nURL\n\n\n[ROUTE]/createrole/\n\n\nRequired Parameters\n\n\n\n\nname\n\n\nstring representing the new role name \n\n\n\n\n\n\nactive\n\n\nboolean flag set to TRUE if the new role is active, false if inactive\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nObject representation of the role created with the request \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ncreaterole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n: {\n        \nid\n:       43,\n        \nname\n:     \nAdmin\n,\n        \nactive\n:   true,\n        \nusers\n: [\n            {\n                \nid\n:       2,\n                \nemail\n:    \njohn.smith@example.com\n,\n                \nname\n:     \nJohn Smith\n\n            }\n        ]\n    }\n}\n\n\n\n\npostUpdaterole\n\n\nPOST endpoint that updates a Role record for a provided ID with the provided value.\n\n\nURL\n\n\n[ROUTE]/updaterole/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nid for the role record to update\n\n\n\n\n\n\nname\n\n\nstring representing the role name to update\n\n\n\n\n\n\nactive\n\n\nboolean flag set to TRUE if the role is active, false if inactive\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nObject representation of the role created with the request \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nupdaterole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n: {\n        \nid\n:       43,\n        \nname\n:     \nAdmin\n,\n        \nactive\n:   true,\n        \nusers\n: [\n            {\n                \nid\n:       2,\n                \nemail\n:    \njohn.smith@example.com\n,\n                \nname\n:     \nJohn Smith\n\n            }\n        ]\n    }\n}\n\n\n\n\npostDeleterole\n\n\nPOST endpoint that deletes a Role based on a provided ID.\n\n\nURL\n\n\n[ROUTE]/deleterole/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nid for the role record to update\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nrole\n\n\nID of the role that was deleted\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ndeleteerole\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nrole\n:             43\n}\n\n\n\n\nUser\n\n\nAll User AJAX routes require an authenticated user, and will check for a valid JWT bearer token.\n\n\npostRegister\n\n\nPOST endpoint that creates a User record with the provided values. This mehod returns false if the provided email is already found in the database.\n\n\nURL\n\n\n[ROUTE]/register/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nnew user's email\n\n\n\n\n\n\npassword\n\n\nnew user's password\n\n\n\n\n\n\nrole\n\n\nid for the new user's role, must be a valid role id\n\n\n\n\n\n\nname\n\n\nnew user's name\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nJSON representation of the new user created by the request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nregister\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\ngetList\n\n\nGET endpoint that returns a list of active users found in the DB.\n\n\nURL\n\n\n[ROUTE]/list/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npagesize\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"id\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"desc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nusers\n\n\nObject representation of the role created with the request \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlist\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nusers\n: [\n                {\n                    \nid\n:       2,\n                    \nemail\n:    \njohn.smith@example.com\n,\n                    \nname\n:     \nJohn Smith\n\n                }\n    ]\n}\n\n\n\n\ngetRetrieve\n\n\nGET endpoint that returns a JSON representation of a valid User for a provided ID along with a list of users associate with this role.\n\n\nURL\n\n\n[ROUTE]/retrieve/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn ID for an existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the found for this ID\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nretrieve\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\npostUpdate\n\n\nPOST endpoint that updates a user record for a provided ID with the provided values\n\n\nURL\n\n\n[ROUTE]/update/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn id for an existing user\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\nNone of these parameters are required, but will update the user record if any or all are provided.\n\n\n\n\nname\n\n\nNew name value for the existing user\n\n\n\n\n\n\nemail\n\n\nnew email for the existing user\n\n\n\n\n\n\npassword\n\n\nNew password for the existing user\n\n\n\n\n\n\nrole\n\n\nNew role ID for the existing user\n\n\n\n\n\n\ngateway_customer_id    \n\n\nGateway ID for the existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the user updated by this request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nupdate\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\ngetCancel\n\n\nGET method to deactivate a user for a provided ID.\n\n\nURL\n\n\n[ROUTE]/cancel/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn id for an existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nID for the user that was deactivated\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ncancel\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: 42\n}\n\n\n\n\npostAddUserEvent\n\n\nPOST method to create a new event Log for current user\n\n\nURL\n\n\n[ROUTE]/adduserevent/\n\n\nRequired Parameters\n\n\n\n\nevent\n\n\nstring indicating the event type\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\nNone of these parameters are required, but will update the user record if any or all are provided.\n\n\n\n\nevent_data\n\n\nJSON object containing event log data\n\n\n\n\n\n\nevent_source\n\n\nString indicating the event log source, defaults to \"front_end\"    \n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nlog\n\n\nObject representing the user logged event     \n\n\nuser_id\n\n\nID for the user that just had an event logged\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nadduserevent\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nlog\n: {\n        \nevent\n:        \nbutton-click\n,\n        \nevent_data\n:   \n{'id': 2}\n,\n        \ncreated_at\n:   \n2017-07-01 00:00:01\n\n    },\n    \nuser_id\n:          42\n}\n\n\n\n\nAdmin User\n\n\nAll Admin User AJAX routes require an authenticated Admin User, and will check for a valid JWT bearer token.\n\n\npostCreate\n\n\nPOST method to create a new user record. Returns false if the email exists in the database already.\n\n\nURL\n\n\n[ROUTE]/create/\n\n\nRequired Parameters\n\n\n\n\nemail\n\n\nnew user's email\n\n\n\n\n\n\npassword\n\n\nnew user's password\n\n\n\n\n\n\nrole\n\n\nid for the new user's role, must be a valid role id\n\n\n\n\n\n\nname\n\n\nnew user's name\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nJSON representation of the new user created by the request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ncreate\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\ngetList\n\n\nGET method to return a paginated list of users\n\n\nURL\n\n\n[ROUTE]/list/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npagesize\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"id\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"desc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nusers\n\n\nArray of users found by this request\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nlist\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nusers\n: [\n                {\n                    \nid\n:       2,\n                    \nemail\n:    \njohn.smith@example.com\n,\n                    \nname\n:     \nJohn Smith\n\n                }\n                ...\n    ]\n}\n\n\n\n\ngetRetrieve\n\n\nGET Method to return a single user record based on a provided ID\n\n\nURL\n\n\n[ROUTE]/retrieve/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn ID for an existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the found for this ID\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nretrieve\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\npostUpdate\n\n\nPOST method to update an existing user record based on the provided parameters\n\n\nURL\n\n\n[ROUTE]/update/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nAn id for an existing user\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\nNone of these parameters are required, but will update the user record if any or all are provided.\n\n\n\n\nname\n\n\nNew name value for the existing user\n\n\n\n\n\n\nemail\n\n\nnew email for the existing user\n\n\n\n\n\n\npassword\n\n\nNew password for the existing user\n\n\n\n\n\n\nrole\n\n\nNew role ID for the existing user\n\n\n\n\n\n\ngateway_customer_id    \n\n\nGateway ID for the existing user\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nObject representation of the found for this ID\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nupdate\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n: {\n        \nid\n:                   43,\n        \nemail\n:                \nfoo@email.com\n\n        \nrole\n:                 1,\n        \nname\n:                 \nJohn Smith\n\n        \nlast_login\n:           \n2017-07-01 00:00:01\n\n        \ngateway_customer_id\n:  \n\n    }\n}\n\n\n\n\npostDelete\n\n\nPOST method to delete a user based on a provided ID\n\n\nURL\n\n\n[ROUTE]/delete/\n\n\nRequired Parameters\n\n\n\n\nid\n\n\nid for the user record to delete\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nuser\n\n\nID of the user that was deleted\n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ndelete\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nuser\n:             43\n}\n\n\n\n\ngetUserActivity\n\n\nGET method to return the event logs for a provided user if an ID is provided, or the current user if the user ID is not provided.\n\n\nURL\n\n\n[ROUTE]/eventlogs/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\nuser_id\n\n\nID for an existing user\n\n\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npage_size\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"created_at\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"asc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nlogs\n\n\nArray of user log events  \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nuseractivity\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nlogs\n: [\n                {\n                    \nid\n:           2,\n                    \nuser_id\n:      42,                                                 \nevent\n:        \nbutton-click\n,\n                    \nemail\n:        \n{'foo': true}\n,\n                    \ncreated_at\n:   \n2017-07-01 00:00:01\n\n                }\n                ...\n    ]\n}\n\n\n\n\ngetEventLogs\n\n\nGET method to return an array of all user event logs\n\n\nURL\n\n\n[ROUTE]/eventlogs/\n\n\nRequired Parameters\n\n\nn/a\n\n\nOptional Parameters\n\n\n\n\npage\n\n\nInteger indicating the requested page. Defaults to 0.\n\n\n\n\n\n\npage_size\n\n\nInteger indicating the requested number of records to return. Defaults to 100.\n\n\n\n\n\n\nsort\n\n\nString indicating the column to sort the records. Defaults to \"created_at\"\n\n\n\n\n\n\ndirection\n\n\nString indicating the direction to be used when sorting the records. Defaults to \"asc\"\n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\n\n\nlogs\n\n\nArray of user log events  \n\n\n\n\n\n\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \ngeteventlogs\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n,\n    \nlogs\n: [\n                {\n                    \nid\n:           2,\n                    \nuser_id\n:      42,                                                 \nevent\n:        \nbutton-click\n,\n                    \nemail\n:        \n{'foo': true}\n,\n                    \ncreated_at\n:   \n2017-07-01 00:00:01\n\n                }\n                ...\n    ]\n}\n\n\n\n\npostChangepass\n\n\nPOST method to update an existing user's password\n\n\nURL\n\n\n[ROUTE]/changepass/\n\n\nRequired Parameters\n\n\n\n\nemail OR id\n\n\nExisting user's email or ID. one of these values is required\n\n\n\n\n\n\nnewpass\n\n\nNew user's password \n\n\n\n\n\n\n\n\nUnique Response Object Values\n\n\nn/a\n\n\nExample Response\n\n\n{\n    \nmethod\n:           \nchangepass\n,\n    \nsuccess\n:          true,\n    \nerror_code\n:       0,\n    \nerror_message\n:    \n\n}", 
            "title": "Ajax endpoints"
        }, 
        {
            "location": "/users/ajax/#users-ajax-endpoints", 
            "text": "", 
            "title": "Users Ajax Endpoints"
        }, 
        {
            "location": "/users/ajax/#intro", 
            "text": "The Users package exposes some AJAX endpoints to allow your Erdiko Application to interact with the underlying service models.   Some of these endpoints require an authenticated user and will be noted as such.", 
            "title": "Intro"
        }, 
        {
            "location": "/users/ajax/#unique-response-object-valuess", 
            "text": "All of these AJAX endpoints return a JSON formatted response and contain some unique responses as well as common values indicating the success or failure of the request.  Here is a brief list of the common response variables:   method  String indicating the requested method    success  Boolean flag set to true for a successful login attempt, else this is false    error_code  Error code if the login attempt is unsuccessful    error_message  Error message if the login attempt is unsuccessful      Here is an example of a successful request response:  {\n     method :            login ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     token :             1234asdf ,\n}  If a request is unsuccessful, we return flags and messaging explaining the error. Here is an example:  {\n     method :            login ,\n     success :          false,\n     error_code :       1,\n     error_message :     Invalid email or password provided; User was not found \n}", 
            "title": "Unique Response Object Valuess"
        }, 
        {
            "location": "/users/ajax/#user-authentication", 
            "text": "", 
            "title": "User Authentication"
        }, 
        {
            "location": "/users/ajax/#postlogin", 
            "text": "POST endpoint that logs a user in via the JWTAuthenticator ( erdiko\\authenticate\\services\\JWTAuthenticator ) from the Erdiko\\Authenticate package.   After successfully validating the user's email and password with the JWTAuthenticator class, the AJAX response will return a JWT token.  URL  [ROUTE]/login/  Required Parameters   email  User's email    password  User's password     Unique Response Object Values   token  JWT token generated by the JWTAuthenticator class     Example Response  {\n     method :            login ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     token :             1234asdf ,\n}", 
            "title": "postLogin"
        }, 
        {
            "location": "/users/ajax/#getlogout", 
            "text": "GET endpoint that logs a user out via the BasicAuthenticator ( erdiko\\authenticate\\services\\BasicAuthenticator ) from the Erdiko\\Authenticate package.   URL  [ROUTE]/logout/  Required Parameters  n/a  Unique Response Object Values  n/a  Example Response  {\n     method :            logout ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "getLogout"
        }, 
        {
            "location": "/users/ajax/#postchangepass", 
            "text": "POST endpoint that attempts to change a password for an existing user via the BasicAuthenticator ( erdiko\\authenticate\\services\\BasicAuthenticator ) from the Erdiko\\Authenticate package.   This method will return false if the user's email and password do not match an existing user.  URL  [ROUTE]/changepass/  Required Parameters   email  Existing user's email    currentpass  Current user's password    newpass  New user's password      Unique Response Object Values  n/a  Example Response  {\n     method :            changepass ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "postChangepass"
        }, 
        {
            "location": "/users/ajax/#postforgotpass", 
            "text": "POST endpoint that will send a \"Reset Password\" email to a user after resetting the user's email to a random string.  This method will return false if the email is not found in the user database.  URL  [ROUTE]/forgotpass/  Required Parameters   email  Existing user's email     Unique Response Object Values  n/a  Example Response  {\n     method :            forgotpass ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "postForgotpass"
        }, 
        {
            "location": "/users/ajax/#role", 
            "text": "All Role AJAX routes require an authenticated user, and will check for a valid JWT bearer token.", 
            "title": "Role"
        }, 
        {
            "location": "/users/ajax/#getroles", 
            "text": "GET endpoint that returns a list of active roles found in the DB and a count of active users associated with the role.  URL  [ROUTE]/roles/  Required Parameters  n/a  Unique Response Object Values   roles  Array of existing roles      Example Response  {\n     method :            roles ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     roles : [\n        {\n             id : 42,\n             name :  Customer ,\n             active : true,\n             users : 30\n        },\n        {\n             id : 43,\n             name :  Admin ,\n             active : true,\n             users : 3\n        }\n    ]\n}", 
            "title": "getRoles"
        }, 
        {
            "location": "/users/ajax/#getrole", 
            "text": "GET endpoint that returns a JSON representation of a valid Role for a provided ID\nalong with a list of users associate with this role.  URL  [ROUTE]/role/  Required Parameters  n/a  Unique Response Object Values   role  Object representation of the role found for the provided ID      Example Response  {\n     method :            role ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role : {\n         id :       43,\n         name :      Admin ,\n         active :   true,\n         users : [\n            {\n                 id :       2,\n                 email :     john.smith@example.com ,\n                 name :      John Smith \n            }\n        ]\n    }\n}", 
            "title": "getRole"
        }, 
        {
            "location": "/users/ajax/#postcreaterole", 
            "text": "POST endpoint that create a Role record with the provided values.  URL  [ROUTE]/createrole/  Required Parameters   name  string representing the new role name     active  boolean flag set to TRUE if the new role is active, false if inactive     Unique Response Object Values   role  Object representation of the role created with the request      Example Response  {\n     method :            createrole ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role : {\n         id :       43,\n         name :      Admin ,\n         active :   true,\n         users : [\n            {\n                 id :       2,\n                 email :     john.smith@example.com ,\n                 name :      John Smith \n            }\n        ]\n    }\n}", 
            "title": "postCreaterole"
        }, 
        {
            "location": "/users/ajax/#postupdaterole", 
            "text": "POST endpoint that updates a Role record for a provided ID with the provided value.  URL  [ROUTE]/updaterole/  Required Parameters   id  id for the role record to update    name  string representing the role name to update    active  boolean flag set to TRUE if the role is active, false if inactive     Unique Response Object Values   role  Object representation of the role created with the request      Example Response  {\n     method :            updaterole ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role : {\n         id :       43,\n         name :      Admin ,\n         active :   true,\n         users : [\n            {\n                 id :       2,\n                 email :     john.smith@example.com ,\n                 name :      John Smith \n            }\n        ]\n    }\n}", 
            "title": "postUpdaterole"
        }, 
        {
            "location": "/users/ajax/#postdeleterole", 
            "text": "POST endpoint that deletes a Role based on a provided ID.  URL  [ROUTE]/deleterole/  Required Parameters   id  id for the role record to update     Unique Response Object Values   role  ID of the role that was deleted     Example Response  {\n     method :            deleteerole ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     role :             43\n}", 
            "title": "postDeleterole"
        }, 
        {
            "location": "/users/ajax/#user", 
            "text": "All User AJAX routes require an authenticated user, and will check for a valid JWT bearer token.", 
            "title": "User"
        }, 
        {
            "location": "/users/ajax/#postregister", 
            "text": "POST endpoint that creates a User record with the provided values. This mehod returns false if the provided email is already found in the database.  URL  [ROUTE]/register/  Required Parameters   email  new user's email    password  new user's password    role  id for the new user's role, must be a valid role id    name  new user's name     Unique Response Object Values   user  JSON representation of the new user created by the request     Example Response  {\n     method :            register ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "postRegister"
        }, 
        {
            "location": "/users/ajax/#getlist", 
            "text": "GET endpoint that returns a list of active users found in the DB.  URL  [ROUTE]/list/  Required Parameters  n/a", 
            "title": "getList"
        }, 
        {
            "location": "/users/ajax/#optional-parameters", 
            "text": "page  Integer indicating the requested page. Defaults to 0.    pagesize  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"id\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"desc\"     Unique Response Object Values   users  Object representation of the role created with the request      Example Response  {\n     method :            list ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     users : [\n                {\n                     id :       2,\n                     email :     john.smith@example.com ,\n                     name :      John Smith \n                }\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#getretrieve", 
            "text": "GET endpoint that returns a JSON representation of a valid User for a provided ID along with a list of users associate with this role.  URL  [ROUTE]/retrieve/  Required Parameters   id  An ID for an existing user     Unique Response Object Values   user  Object representation of the found for this ID     Example Response  {\n     method :            retrieve ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "getRetrieve"
        }, 
        {
            "location": "/users/ajax/#postupdate", 
            "text": "POST endpoint that updates a user record for a provided ID with the provided values  URL  [ROUTE]/update/  Required Parameters   id  An id for an existing user", 
            "title": "postUpdate"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_1", 
            "text": "None of these parameters are required, but will update the user record if any or all are provided.   name  New name value for the existing user    email  new email for the existing user    password  New password for the existing user    role  New role ID for the existing user    gateway_customer_id      Gateway ID for the existing user     Unique Response Object Values   user  Object representation of the user updated by this request     Example Response  {\n     method :            update ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#getcancel", 
            "text": "GET method to deactivate a user for a provided ID.  URL  [ROUTE]/cancel/  Required Parameters   id  An id for an existing user     Unique Response Object Values   user  ID for the user that was deactivated     Example Response  {\n     method :            cancel ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : 42\n}", 
            "title": "getCancel"
        }, 
        {
            "location": "/users/ajax/#postadduserevent", 
            "text": "POST method to create a new event Log for current user  URL  [ROUTE]/adduserevent/  Required Parameters   event  string indicating the event type", 
            "title": "postAddUserEvent"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_2", 
            "text": "None of these parameters are required, but will update the user record if any or all are provided.   event_data  JSON object containing event log data    event_source  String indicating the event log source, defaults to \"front_end\"         Unique Response Object Values   log  Object representing the user logged event       user_id  ID for the user that just had an event logged     Example Response  {\n     method :            adduserevent ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     log : {\n         event :         button-click ,\n         event_data :    {'id': 2} ,\n         created_at :    2017-07-01 00:00:01 \n    },\n     user_id :          42\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#admin-user", 
            "text": "All Admin User AJAX routes require an authenticated Admin User, and will check for a valid JWT bearer token.", 
            "title": "Admin User"
        }, 
        {
            "location": "/users/ajax/#postcreate", 
            "text": "POST method to create a new user record. Returns false if the email exists in the database already.  URL  [ROUTE]/create/  Required Parameters   email  new user's email    password  new user's password    role  id for the new user's role, must be a valid role id    name  new user's name     Unique Response Object Values   user  JSON representation of the new user created by the request     Example Response  {\n     method :            create ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "postCreate"
        }, 
        {
            "location": "/users/ajax/#getlist_1", 
            "text": "GET method to return a paginated list of users  URL  [ROUTE]/list/  Required Parameters  n/a", 
            "title": "getList"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_3", 
            "text": "page  Integer indicating the requested page. Defaults to 0.    pagesize  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"id\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"desc\"     Unique Response Object Values   users  Array of users found by this request     Example Response  {\n     method :            list ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     users : [\n                {\n                     id :       2,\n                     email :     john.smith@example.com ,\n                     name :      John Smith \n                }\n                ...\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#getretrieve_1", 
            "text": "GET Method to return a single user record based on a provided ID  URL  [ROUTE]/retrieve/  Required Parameters   id  An ID for an existing user     Unique Response Object Values   user  Object representation of the found for this ID     Example Response  {\n     method :            retrieve ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "getRetrieve"
        }, 
        {
            "location": "/users/ajax/#postupdate_1", 
            "text": "POST method to update an existing user record based on the provided parameters  URL  [ROUTE]/update/  Required Parameters   id  An id for an existing user", 
            "title": "postUpdate"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_4", 
            "text": "None of these parameters are required, but will update the user record if any or all are provided.   name  New name value for the existing user    email  new email for the existing user    password  New password for the existing user    role  New role ID for the existing user    gateway_customer_id      Gateway ID for the existing user     Unique Response Object Values   user  Object representation of the found for this ID     Example Response  {\n     method :            update ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user : {\n         id :                   43,\n         email :                 foo@email.com \n         role :                 1,\n         name :                  John Smith \n         last_login :            2017-07-01 00:00:01 \n         gateway_customer_id :   \n    }\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#postdelete", 
            "text": "POST method to delete a user based on a provided ID  URL  [ROUTE]/delete/  Required Parameters   id  id for the user record to delete     Unique Response Object Values   user  ID of the user that was deleted     Example Response  {\n     method :            delete ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     user :             43\n}", 
            "title": "postDelete"
        }, 
        {
            "location": "/users/ajax/#getuseractivity", 
            "text": "GET method to return the event logs for a provided user if an ID is provided, or the current user if the user ID is not provided.  URL  [ROUTE]/eventlogs/  Required Parameters  n/a", 
            "title": "getUserActivity"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_5", 
            "text": "user_id  ID for an existing user    page  Integer indicating the requested page. Defaults to 0.    page_size  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"created_at\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"asc\"     Unique Response Object Values   logs  Array of user log events       Example Response  {\n     method :            useractivity ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     logs : [\n                {\n                     id :           2,\n                     user_id :      42,                                                  event :         button-click ,\n                     email :         {'foo': true} ,\n                     created_at :    2017-07-01 00:00:01 \n                }\n                ...\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#geteventlogs", 
            "text": "GET method to return an array of all user event logs  URL  [ROUTE]/eventlogs/  Required Parameters  n/a", 
            "title": "getEventLogs"
        }, 
        {
            "location": "/users/ajax/#optional-parameters_6", 
            "text": "page  Integer indicating the requested page. Defaults to 0.    page_size  Integer indicating the requested number of records to return. Defaults to 100.    sort  String indicating the column to sort the records. Defaults to \"created_at\"    direction  String indicating the direction to be used when sorting the records. Defaults to \"asc\"     Unique Response Object Values   logs  Array of user log events       Example Response  {\n     method :            geteventlogs ,\n     success :          true,\n     error_code :       0,\n     error_message :     ,\n     logs : [\n                {\n                     id :           2,\n                     user_id :      42,                                                  event :         button-click ,\n                     email :         {'foo': true} ,\n                     created_at :    2017-07-01 00:00:01 \n                }\n                ...\n    ]\n}", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/users/ajax/#postchangepass_1", 
            "text": "POST method to update an existing user's password  URL  [ROUTE]/changepass/  Required Parameters   email OR id  Existing user's email or ID. one of these values is required    newpass  New user's password      Unique Response Object Values  n/a  Example Response  {\n     method :            changepass ,\n     success :          true,\n     error_code :       0,\n     error_message :     \n}", 
            "title": "postChangepass"
        }, 
        {
            "location": "/users/models/", 
            "text": "Models\n\n\nIntro\n\n\nThis package uses a combination of ORM Entities and Service Models to manipulate the user records stored in the database tables. This package relies upon Doctrine as an ORM framework.\n\n\nAll interactions with the data model must be performed via entity models, and all interactions with the entities must be performed via service model methods.\n\n\nEntities\n\n\nThe entities in this package relate directly to a mapped database table, and an instance of an entity represents a single table row.\n\n\nAll entity properties have a protected scope, and must use the provided getter/setters to retrieve and manipulate their values. \n\n\nIn addition to the getter/setters, all entities have a few lifecycle setters to set values based upon record creates and updates. These special case methods are indicated in this documentation.\n\n\nRole\n\n\nThis entity represents the \nroles\n table.\n\n\nProperties\n\n\n\n\nprotected\n \nint\n \n$id\n\n\nRepresents the autoincrement ID for Roles Table\n\n\n\n\n\n\nprotected\n \nint\n \n$active\n\n\nInteger flag representing boolean; Role is active if value is \"1\"/true, inactive if value is \"0\"/false\n\n\n\n\n\n\nprotected\n \nstring\n \n$name\n\n\nString representing the Role name\n\n\n\n\n\n\nprotected\n \nstring\n \n$created\n\n\nDate string for the timestamp when the record was created\n\n\n\n\n\n\nprotected\n \nstring\n \n$updated\n\n\nDate string for timestamp when the record was last updated\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \ngetId()\n\n\nReturns the current record $id\n\n\n\n\n\n\npublic\n \nsetId(\nint\n $id)\n\n\nSets the current record $id with a provided value\n\n\n\n\n\n\npublic\n \ngetActive()\n\n\nReturns the current record $active value\n\n\n\n\n\n\npublic\n \nsetActive(\nstring\n $active)\n\n\nSets the current record $active with a provided value\n\n\n\n\n\n\npublic\n \ngetName()\n\n\nReturns the current record $name value\n\n\n\n\n\n\npublic\n \nsetName(\nstring\n $name)\n\n\nSets the current record $name with a provided value\n\n\n\n\n\n\npublic\n \ngetCreated()\n\n\nReturns the current record $created value\n\n\n\n\n\n\npublic\n \nsetCreated(\nstring\n $created)\n\n\nSets the current record $created with a provided value\n\n\n\n\n\n\npublic\n \ngetUpdated()\n\n\nReturns the current record $updated value\n\n\n\n\n\n\npublic\n \nsetUpdated(\nstring\n $updated)\n\n\nSets the current record $updated with a provided value\n\n\n\n\n\n\npublic\n \ndoStuffOnPrePersist()\n\n\nLifecycle method called on initial record create via @PrePersist annotation\n\n\nCalls existing \nsetCreated()\n method with current timestamp as value\n\n\n\n\n\n\npublic\n \ndoStuffOnPreMerge()\n\n\nLifecycle method called on record update via @PreUpdate annotation\n\n\nCalls existing \nsetUpdated()\n method with current timestamp as value\n\n\n\n\n\n\n\n\nUser\n\n\nThis entity represents the \nusers\n table.\n\n\nProperties\n\n\n\n\nprotected\n \nint\n \n$id\n\n\nRepresents the autoincrement ID for Users Table\n\n\n\n\n\n\nprotected\n \nstring\n \n$email\n\n\nRepresents the email for a user\n\n\n\n\n\n\nprotected\n \nstring\n \n$password\n\n\nRepresents the user's hashed password \n\n\n\n\n\n\nprotected\n \nint\n \n$role\n\n\nForeign Key ID to the role table; represents a user's role\n\n\n\n\n\n\nprotected\n \nstring\n \n$name\n\n\nRepresents a user's name   \n\n\n\n\n\n\nprotected\n \nstring\n \n$gateway_customer_id\n\n\nForeign Key Id to a payment gateway table; represents a user's relationship to a payement gateway\n\n\nPlease Note\n: this will be implemented in a future feature.\n\n\n\n\n\n\nprotected\n \nstring\n \n$last_login\n\n\nTimestamp of the user's last successful login\n\n\n\n\n\n\nprotected\n \nstring\n \n$created\n\n\nTimestamp when the record was created\n\n\n\n\n\n\nprotected\n \nstring\n \nupdated\n\n\nTimestamp when the record was last updated\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \ngetId()\n\n\nReturns the current record $id\n\n\n\n\n\n\npublic\n \nsetId(\nint\n $id)\n\n\nSets the current record $id with a provided value\n\n\n\n\n\n\npublic\n \ngetEmail()\n\n\nReturns the current record $email value\n\n\n\n\n\n\npublic\n \nsetEmail(\nstring\n $email)\n\n\nSets the current record $email with a provided value\n\n\n\n\n\n\npublic\n \ngetPassword()\n\n\nDescription: Returns the current record $password value\n\n\n\n\n\n\npublic\n \nsetPassword(\npassword\n $password)\n\n\nDescription: MD5 encodes the provided string and sets the current record's $password value to this hashed string\n\n\n\n\n\n\npublic\n \ngetRole()\n\n\nDescription: Returns the current record $role value\n\n\n\n\n\n\npublic\n \nsetRole(\nstring\n $role)\n\n\nSets the current record $role value with a provided value\n\n\npublic\n \ngetName()\n\n\nReturns the current record $name value\n\n\n\n\n\n\npublic\n \nsetName(\nstring\n $name)\n\n\nSets the current record $name with a provided value\n\n\npublic\n \ngetGatewayCustomerId()\n\n\nReturns the current record gateway_customer_id value\n\n\n\n\n\n\npublic\n \nsetGatewayCustomerId(\nint\n $gateway_customer_id)\n\n\nSets the current record $gateway_customer_id with a provided value\n\n\n\n\n\n\npublic\n \ngetLastLogin()\n\n\nReturns the current record $last_login value\n\n\n\n\n\n\npublic\n \nsetLastLogin(\nstring\n $last_login)\n\n\nSets the current record $last_login to the provided value\n\n\n\n\n\n\npublic\n \ngetCreatedAt()\n\n\nReturns the current record $created_at value\n\n\n\n\n\n\npublic\n \nsetCreatedAt(\nstring\n $created_at)\n\n\nSets the current record $created_at to the provided value\n\n\n\n\n\n\npublic\n \ngetUpdatedAt()\n\n\nReturns the current record $created_at value\n\n\n\n\n\n\npublic\n \nsetUpdatedAt()\n\n\nSets the current record $updated_at to the provided value\n\n\n\n\n\n\npublic\n \ndoStuffOnPrePersist()\n\n\nLifecycle method called on initial record create via @PrePersist annotation\n\n\nCalls existing \nsetCreatedAt()\n method with current timestamp as value\n\n\n\n\n\n\npublic\n \ndoStuffOnPreMerge()\n\n\nLifecycle method called on record update via @PreUpdate annotation\n\n\nCalls existing \nsetUpdatedAt()\n method with current timestamp as value\n\n\n\n\n\n\npublic\n \nmarshall(\nstring\n $type = 'json')\n\n\nMethod that returns a current record as a 'safe' datatype\n\n\nUsed for serializing a record  \n\n\n\n\n\n\n\n\nUser/Log\n\n\nThis entity represents the \nuser_event_log\n table.\n\n\nProperties\n\n\n\n\nprotected\n \nint\n \n$id\n\n\nRepresents the autoincrement ID for User Event Log Table\n\n\n\n\n\n\nprotected\n \nint\n \n$user_id\n\n\nForeign Key ID to the role table; represents a user record and associates it to this log record\n\n\n\n\n\n\nprotected\n \nstring\n \n$event_log\n\n\nA string indicating the type of user event logged\n\n\n\n\n\n\nprotected\n \nstring\n \n$event_data\n\n\nA JSON serialized object string representing a user logged event\n\n\n\n\n\n\nprotected\n \nstring\n \n$created_at\n\n\nDate string for the timestamp when the record was created\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \ngetId()\n\n\nReturns the current record $id\n\n\n\n\n\n\npublic\n \nsetId(\nint\n $id)\n\n\nSets the current record $id\n\n\n\n\n\n\npublic\n \ngetUserId()\n\n\nReturns the current record $user_id value\n\n\n\n\n\n\npublic\n \nsetUserId(\nstring\n $userId)\n\n\nSets the current record $user_id to the provided value\n\n\n\n\n\n\npublic\n \ngetEventLog()\n\n\nReturns the current record $event_log value\n\n\n\n\n\n\npublic\n \nsetEventLog(\nstring\n $eventLog)\n\n\nSets the current record $event_log to the provided value\n\n\n\n\n\n\npublic\n \ngetEventData()\n\n\njson_decodes\n and returns the current record $event_data value\n\n\n\n\n\n\npublic\n \nsetEventData(\nstring\n $eventData)\n\n\njson_encodes\n the provided value and sets this to the current record $event_data value\n\n\n\n\n\n\npublic\n \ngetCreatedAt()\n\n\nReturns the current record $created_at value\n\n\n\n\n\n\npublic\n \nsetCreatedAt(\nstring\n $created)\n\n\nSets the current record $created_at to the provided value\n\n\n\n\n\n\npublic\n \ndoStuffOnPrePersist()\n\n\nLifecycle method called on initial record create via @PrePersist annotation\n\n\nCalls existing \nsetCreatedAt()\n method with current timestamp as value\n\n\n\n\n\n\n\n\nService Models\n\n\nMailgun\n\n\nThe Mailgun service model provides an interface to Mailgun to send emails following user events.\n\n\nThis service model extends the \nMailgun\\Mailgun\n model provided by the Mailgun composer package.\n\n\nProperties\n\n\n\n\nstring\n \n$domain\n\n\nString representing the sender domain for this erdiko instance. \n\n\n\n\n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct()\n\n\nCreates an instance of the Mailgun service model.\n\n\nLoads a config file and sets some local variables from this loaded config, before calling the parent constructor in \nMailgun\\Mailgun\n\n\n\n\n\n\nprotected\n \ngetDefaults()\n\n\nReturns an array of default values for mailgun settings\n\n\n\n\n\n\npublic\n \nsendMail(\nobject\n $postData)\n\n\nSends an email with provided data. \n\n\nFilters the provided $postData object after typecasting to an array, returns the method call to the parent class \nsendMessage\n method call\n\n\n\n\n\n\npublic\n \nforgotPassword(\nstring\n $email, \nstring\n $html)\n\n\nSends an email to a provided email using the provided HTML template string\n\n\nCalls the class \nsendMail\n method with provided values\n\n\n\n\n\n\n\n\nRole\n\n\nThe Role service model provides an interface to create and manipulate role records via the Role entity.\n\n\nThis class uses the Erdiko Doctrine EntityTrait to allow it to get \n set the entity manager.\n\n\nProperties\n\n\n\n\nprivate\n \nEntityManager\n \n$_em\n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct()\n\n\nCreates an instance of the Role service model.\n\n\n\n\n\n\npublic\n \ncreate(\nobject\n $data)\n\n\nCreate a new role entity instance\n\n\n\n\n\n\npublic\n \nfindById(\nint\n|\nstring\n $id)\n\n\nReturn a Role entity by id\n\n\n\n\n\n\npublic\n \nfindByName(\nstring\n $name)\n\n\nReturn a Role entity with a name given\n\n\n\n\n\n\npublic\n \nfindByStatus(\nint\n $status)\n\n\nReturn an array of Roles that have the provided status\n\n\n\n\n\n\npublic\n \ngetCountByRole(\nstring\n $role)\n\n\nReturn a count for role records for the provided role name\n\n\n\n\n\n\npublic\n \ngetUsersForRole(\nstring\n $role)\n\n\nReturn a list of users for a provided role name\n\n\n\n\n\n\npublic\n \nsave(\narray\n $data)\n\n\nSave/Persist a new role entity for the provided values\n\n\n\n\n\n\npublic\n \ngetEntity(\narray\n $filter)\n\n\nReturns a Role entity record based on the provided parameters, if none found return an empty entity\n\n\n\n\n\n\npublic\n \ndelete(\nstring\n $id)\n\n\nDelete a Role entity record for the provided id\n\n\n\n\n\n\n\n\nUser\n\n\nThe User service model provides an interface to create and manipulate user records via the User entity.\n\n\nThis class uses the Erdiko Doctrine EntityTrait to allow it to get \n set the entity manager.\n\n\nProperties\n\n\n\n\nCONST\n PASSWORDSALT\n\n\nString used to salt a password before hashing\n\n\nNote\n This will eventually be moved to a config file, currently it is just a class constant\n\n\n\n\n\n\nprotected\n \nEntity/User\n $_user\n\n\nprotected\n \nEntityManager\n $_em \n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct(\nEntityManager\n $em = null)\n\n\nCreates an instance of the User service model.\n\n\nOptional EntityManager parameter to substitute the one provided by the trait\n\n\n\n\n\n\npublic\n \nsetEntity(\nEntity/User\n $entity)\n\n\nSets $_user to a provided \nEntity/User\n\n\n\n\n\n\npublic\n \ngetEntity()\n\n\nReturns the current $_user value\n\n\n\n\n\n\npublic\n \nunmarshall(\nstring\n $encoded)\n\n\nUnserializes a user object and returns a populated User Entity \n\n\nRequired by the iErdikoUser Interface\n\n\n\n\n\n\nprotected\n \ncreateAnonymous()\n\n\nReturns a new anonymous user entity\n\n\nRequired by the iErdikoUser Interface\n\n\n\n\n\n\npublic\n \nstatic\n \ngetAnonymous()\n\n\nReturns a new anonymous user entity\n\n\nRequired by the iErdikoUser Interface\n\n\n\n\n\n\npublic\n \nmarshall(\nstring\n $type = 'json')\n\n\nSerializes a populated User Entity\n\n\n\n\n\n\npublic\n \ngetUsername()\n\n\nReturns current $_user name value\n\n\n\n\n\n\npublic\n \ngetDisplayName()\n\n\nReturns current $_user name value\n\n\n\n\n\n\npublic\n \ncreateUser(\narray\n $data)\n\n\nCreate a new entity and set it to current user model\n\n\n\n\n\n\npublic\n \ngetSalted(\nstring\n $password)\n\n\nReturns password string concat'd with password salt \n\n\n\n\n\n\npublic\n \nauthenticate(\nstring\n $email, \nstring\n $password)\n\n\nAttempt to validate the user by querying the DB with the provided email and password. Returns populated User Entity if found, else returns false\n\n\n\n\n\n\npublic\n \nisLoggedIn()\n\n\nReturns true if the user is logged in\n\n\n\n\n\n\npublic\n \nisEmailUnique()\n\n\nReturns true if provided email was not found in the user table \n\n\n\n\n\n\npublic\n \ngetRoles()\n\n\nReturn the friendly user role names\n\n\n\n\n\n\npublic\n \nisAdmin()\n\n\nReturns true if the current $_user has an Admin role\n\n\n\n\n\n\npublic\n \nisAnonymous()\n\n\nReturns true if the current $_user has an anonymous role \n\n\n\n\n\n\npublic\n \nhasRole(\nstring\n $role = 'anonymous')\n\n\nReturns true if current user has the provided role\n\n\n\n\n\n\npublic\n \ngetRole()\n\n\nReturns current $_user role value\n\n\n\n\n\n\npublic\n \ngetUsers(\nint\n $page = 0, \nint\n $pagesize = 100, \nstring\n $sort = 'id', \nstring\n $direction = 'asc')\n\n\nReturn all the users paginated by parameters\n\n\n\n\n\n\npublic\n \ndeleteUser(\nint\n|\nstring\n $id)\n\n\nDelete a user record for a provided id. Returns false if a user record is not found, and returns true if successful deletion\n\n\n\n\n\n\npublic\n \ngetUserId()\n\n\nReturns current $_user id value\n\n\n\n\n\n\npublic\n \nsave(\nobject\n $data)\n\n\nUpdate an existing user or return a new user populated with data provided.\n\n\n\n\n\n\npublic\n \ngetById(\nint\n|\nstring\n $id)\n\n\nReturn a user by id\n\n\n\n\n\n\npublic\n \ngetByParams(\narray\n $params)\n\n\nReturn users using params as query filter\n\n\n\n\n\n\npublic\n \ngetGatewayCustomerId(\nint\n|\nstring\n $uid)\n\n\nReturn the Gateway Customer ID for a provided user id\n\n\n\n\n\n\n\n\nUser/Event/Log\n\n\nThe User/Event/Log service model provides an interface to create an manipulate user event log records via the User/Log entity.\n\n\nThis class uses the Erdiko Doctrine EntityTrait to allow it to get \n set the entity manager.\n\n\nProperties\n\n\n\n\nprotected\n \nEntityManager\n $_em \n\n\n\n\nMethods\n\n\n\n\npublic\n \n__construct()\n\n\nCreates an instance of the User/Log service model. \n\n\n\n\n\n\npublic\n \nsave(\nEntity/User/Log\n $logEntity)\n\n\nPersist and save the provided User/Log entity\n\n\n\n\n\n\npublic\n \ngenerateEntity(\nint\n|\nstring\n $uid, \nstring\n $event_log, \nstring\n $event_data = null)\n\n\nReturn a populated User/Log entity with the provided values\n\n\n\n\n\n\npublic\n \ngetAllLogs()\n\n\nReturn all User/Log records as an array of User/Log entities\n\n\n\n\n\n\npublic\n \ngetLogs(\nint\n $page = 0, \nint\n $pagesize = 100, \nstring\n $sort = 'id', $direction = 'asc')\n\n\nReturn an array of User/Log records based on provided parameters\n\n\n\n\n\n\npublic\n \ngetLogsByUserId(\nint\n $id, \nint\n $page = 0, \nint\n $pagesize = 100, \nstring\n $sort = 'id', \nstring\n $direction = 'asc')\n\n\nReturn an array of User/Log records for a provided user, filtered by additional parameters\n\n\n\n\n\n\npublic\n \nfindById(\nint\n|\nstring\n $id)\n\n\nReturn a single User/Log entity for a provided ID\n\n\n\n\n\n\npublic\n \ncreate(\nint\n|\nstring\n $user_id = null, \nstring\n $event_log = null, \nstring\n $event_data = null)\n\n\nCreate a new User/Log entity, wrapper for \ngenerateEntity()\n method", 
            "title": "Models"
        }, 
        {
            "location": "/users/models/#models", 
            "text": "", 
            "title": "Models"
        }, 
        {
            "location": "/users/models/#intro", 
            "text": "This package uses a combination of ORM Entities and Service Models to manipulate the user records stored in the database tables. This package relies upon Doctrine as an ORM framework.  All interactions with the data model must be performed via entity models, and all interactions with the entities must be performed via service model methods.", 
            "title": "Intro"
        }, 
        {
            "location": "/users/models/#entities", 
            "text": "The entities in this package relate directly to a mapped database table, and an instance of an entity represents a single table row.  All entity properties have a protected scope, and must use the provided getter/setters to retrieve and manipulate their values.   In addition to the getter/setters, all entities have a few lifecycle setters to set values based upon record creates and updates. These special case methods are indicated in this documentation.", 
            "title": "Entities"
        }, 
        {
            "location": "/users/models/#role", 
            "text": "This entity represents the  roles  table.", 
            "title": "Role"
        }, 
        {
            "location": "/users/models/#properties", 
            "text": "protected   int   $id  Represents the autoincrement ID for Roles Table    protected   int   $active  Integer flag representing boolean; Role is active if value is \"1\"/true, inactive if value is \"0\"/false    protected   string   $name  String representing the Role name    protected   string   $created  Date string for the timestamp when the record was created    protected   string   $updated  Date string for timestamp when the record was last updated", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods", 
            "text": "public   getId()  Returns the current record $id    public   setId( int  $id)  Sets the current record $id with a provided value    public   getActive()  Returns the current record $active value    public   setActive( string  $active)  Sets the current record $active with a provided value    public   getName()  Returns the current record $name value    public   setName( string  $name)  Sets the current record $name with a provided value    public   getCreated()  Returns the current record $created value    public   setCreated( string  $created)  Sets the current record $created with a provided value    public   getUpdated()  Returns the current record $updated value    public   setUpdated( string  $updated)  Sets the current record $updated with a provided value    public   doStuffOnPrePersist()  Lifecycle method called on initial record create via @PrePersist annotation  Calls existing  setCreated()  method with current timestamp as value    public   doStuffOnPreMerge()  Lifecycle method called on record update via @PreUpdate annotation  Calls existing  setUpdated()  method with current timestamp as value", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#user", 
            "text": "This entity represents the  users  table.", 
            "title": "User"
        }, 
        {
            "location": "/users/models/#properties_1", 
            "text": "protected   int   $id  Represents the autoincrement ID for Users Table    protected   string   $email  Represents the email for a user    protected   string   $password  Represents the user's hashed password     protected   int   $role  Foreign Key ID to the role table; represents a user's role    protected   string   $name  Represents a user's name       protected   string   $gateway_customer_id  Foreign Key Id to a payment gateway table; represents a user's relationship to a payement gateway  Please Note : this will be implemented in a future feature.    protected   string   $last_login  Timestamp of the user's last successful login    protected   string   $created  Timestamp when the record was created    protected   string   updated  Timestamp when the record was last updated", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_1", 
            "text": "public   getId()  Returns the current record $id    public   setId( int  $id)  Sets the current record $id with a provided value    public   getEmail()  Returns the current record $email value    public   setEmail( string  $email)  Sets the current record $email with a provided value    public   getPassword()  Description: Returns the current record $password value    public   setPassword( password  $password)  Description: MD5 encodes the provided string and sets the current record's $password value to this hashed string    public   getRole()  Description: Returns the current record $role value    public   setRole( string  $role)  Sets the current record $role value with a provided value  public   getName()  Returns the current record $name value    public   setName( string  $name)  Sets the current record $name with a provided value  public   getGatewayCustomerId()  Returns the current record gateway_customer_id value    public   setGatewayCustomerId( int  $gateway_customer_id)  Sets the current record $gateway_customer_id with a provided value    public   getLastLogin()  Returns the current record $last_login value    public   setLastLogin( string  $last_login)  Sets the current record $last_login to the provided value    public   getCreatedAt()  Returns the current record $created_at value    public   setCreatedAt( string  $created_at)  Sets the current record $created_at to the provided value    public   getUpdatedAt()  Returns the current record $created_at value    public   setUpdatedAt()  Sets the current record $updated_at to the provided value    public   doStuffOnPrePersist()  Lifecycle method called on initial record create via @PrePersist annotation  Calls existing  setCreatedAt()  method with current timestamp as value    public   doStuffOnPreMerge()  Lifecycle method called on record update via @PreUpdate annotation  Calls existing  setUpdatedAt()  method with current timestamp as value    public   marshall( string  $type = 'json')  Method that returns a current record as a 'safe' datatype  Used for serializing a record", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#userlog", 
            "text": "This entity represents the  user_event_log  table.", 
            "title": "User/Log"
        }, 
        {
            "location": "/users/models/#properties_2", 
            "text": "protected   int   $id  Represents the autoincrement ID for User Event Log Table    protected   int   $user_id  Foreign Key ID to the role table; represents a user record and associates it to this log record    protected   string   $event_log  A string indicating the type of user event logged    protected   string   $event_data  A JSON serialized object string representing a user logged event    protected   string   $created_at  Date string for the timestamp when the record was created", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_2", 
            "text": "public   getId()  Returns the current record $id    public   setId( int  $id)  Sets the current record $id    public   getUserId()  Returns the current record $user_id value    public   setUserId( string  $userId)  Sets the current record $user_id to the provided value    public   getEventLog()  Returns the current record $event_log value    public   setEventLog( string  $eventLog)  Sets the current record $event_log to the provided value    public   getEventData()  json_decodes  and returns the current record $event_data value    public   setEventData( string  $eventData)  json_encodes  the provided value and sets this to the current record $event_data value    public   getCreatedAt()  Returns the current record $created_at value    public   setCreatedAt( string  $created)  Sets the current record $created_at to the provided value    public   doStuffOnPrePersist()  Lifecycle method called on initial record create via @PrePersist annotation  Calls existing  setCreatedAt()  method with current timestamp as value", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#service-models", 
            "text": "", 
            "title": "Service Models"
        }, 
        {
            "location": "/users/models/#mailgun", 
            "text": "The Mailgun service model provides an interface to Mailgun to send emails following user events.  This service model extends the  Mailgun\\Mailgun  model provided by the Mailgun composer package.", 
            "title": "Mailgun"
        }, 
        {
            "location": "/users/models/#properties_3", 
            "text": "string   $domain  String representing the sender domain for this erdiko instance.", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_3", 
            "text": "public   __construct()  Creates an instance of the Mailgun service model.  Loads a config file and sets some local variables from this loaded config, before calling the parent constructor in  Mailgun\\Mailgun    protected   getDefaults()  Returns an array of default values for mailgun settings    public   sendMail( object  $postData)  Sends an email with provided data.   Filters the provided $postData object after typecasting to an array, returns the method call to the parent class  sendMessage  method call    public   forgotPassword( string  $email,  string  $html)  Sends an email to a provided email using the provided HTML template string  Calls the class  sendMail  method with provided values", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#role_1", 
            "text": "The Role service model provides an interface to create and manipulate role records via the Role entity.  This class uses the Erdiko Doctrine EntityTrait to allow it to get   set the entity manager.", 
            "title": "Role"
        }, 
        {
            "location": "/users/models/#properties_4", 
            "text": "private   EntityManager   $_em", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_4", 
            "text": "public   __construct()  Creates an instance of the Role service model.    public   create( object  $data)  Create a new role entity instance    public   findById( int | string  $id)  Return a Role entity by id    public   findByName( string  $name)  Return a Role entity with a name given    public   findByStatus( int  $status)  Return an array of Roles that have the provided status    public   getCountByRole( string  $role)  Return a count for role records for the provided role name    public   getUsersForRole( string  $role)  Return a list of users for a provided role name    public   save( array  $data)  Save/Persist a new role entity for the provided values    public   getEntity( array  $filter)  Returns a Role entity record based on the provided parameters, if none found return an empty entity    public   delete( string  $id)  Delete a Role entity record for the provided id", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#user_1", 
            "text": "The User service model provides an interface to create and manipulate user records via the User entity.  This class uses the Erdiko Doctrine EntityTrait to allow it to get   set the entity manager.", 
            "title": "User"
        }, 
        {
            "location": "/users/models/#properties_5", 
            "text": "CONST  PASSWORDSALT  String used to salt a password before hashing  Note  This will eventually be moved to a config file, currently it is just a class constant    protected   Entity/User  $_user  protected   EntityManager  $_em", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_5", 
            "text": "public   __construct( EntityManager  $em = null)  Creates an instance of the User service model.  Optional EntityManager parameter to substitute the one provided by the trait    public   setEntity( Entity/User  $entity)  Sets $_user to a provided  Entity/User    public   getEntity()  Returns the current $_user value    public   unmarshall( string  $encoded)  Unserializes a user object and returns a populated User Entity   Required by the iErdikoUser Interface    protected   createAnonymous()  Returns a new anonymous user entity  Required by the iErdikoUser Interface    public   static   getAnonymous()  Returns a new anonymous user entity  Required by the iErdikoUser Interface    public   marshall( string  $type = 'json')  Serializes a populated User Entity    public   getUsername()  Returns current $_user name value    public   getDisplayName()  Returns current $_user name value    public   createUser( array  $data)  Create a new entity and set it to current user model    public   getSalted( string  $password)  Returns password string concat'd with password salt     public   authenticate( string  $email,  string  $password)  Attempt to validate the user by querying the DB with the provided email and password. Returns populated User Entity if found, else returns false    public   isLoggedIn()  Returns true if the user is logged in    public   isEmailUnique()  Returns true if provided email was not found in the user table     public   getRoles()  Return the friendly user role names    public   isAdmin()  Returns true if the current $_user has an Admin role    public   isAnonymous()  Returns true if the current $_user has an anonymous role     public   hasRole( string  $role = 'anonymous')  Returns true if current user has the provided role    public   getRole()  Returns current $_user role value    public   getUsers( int  $page = 0,  int  $pagesize = 100,  string  $sort = 'id',  string  $direction = 'asc')  Return all the users paginated by parameters    public   deleteUser( int | string  $id)  Delete a user record for a provided id. Returns false if a user record is not found, and returns true if successful deletion    public   getUserId()  Returns current $_user id value    public   save( object  $data)  Update an existing user or return a new user populated with data provided.    public   getById( int | string  $id)  Return a user by id    public   getByParams( array  $params)  Return users using params as query filter    public   getGatewayCustomerId( int | string  $uid)  Return the Gateway Customer ID for a provided user id", 
            "title": "Methods"
        }, 
        {
            "location": "/users/models/#usereventlog", 
            "text": "The User/Event/Log service model provides an interface to create an manipulate user event log records via the User/Log entity.  This class uses the Erdiko Doctrine EntityTrait to allow it to get   set the entity manager.", 
            "title": "User/Event/Log"
        }, 
        {
            "location": "/users/models/#properties_6", 
            "text": "protected   EntityManager  $_em", 
            "title": "Properties"
        }, 
        {
            "location": "/users/models/#methods_6", 
            "text": "public   __construct()  Creates an instance of the User/Log service model.     public   save( Entity/User/Log  $logEntity)  Persist and save the provided User/Log entity    public   generateEntity( int | string  $uid,  string  $event_log,  string  $event_data = null)  Return a populated User/Log entity with the provided values    public   getAllLogs()  Return all User/Log records as an array of User/Log entities    public   getLogs( int  $page = 0,  int  $pagesize = 100,  string  $sort = 'id', $direction = 'asc')  Return an array of User/Log records based on provided parameters    public   getLogsByUserId( int  $id,  int  $page = 0,  int  $pagesize = 100,  string  $sort = 'id',  string  $direction = 'asc')  Return an array of User/Log records for a provided user, filtered by additional parameters    public   findById( int | string  $id)  Return a single User/Log entity for a provided ID    public   create( int | string  $user_id = null,  string  $event_log = null,  string  $event_data = null)  Create a new User/Log entity, wrapper for  generateEntity()  method", 
            "title": "Methods"
        }, 
        {
            "location": "/users/extending/", 
            "text": "Extending the Users Package\n\n\nIntro\n\n\nExtending the Users package allows you to add or modify the existing functionality of this package for use in your application. Since this is a modular package we designed this in a way that you can easily install locally with composer and clear paths to extend this code.\n\n\nIf you find yourself writing a bunch of custom code, we would suggest creating a custom package to store this extended code into.\n\n\nPlease note, this package is still limited by the constraints of PHP's object inheritance. You can only overload methods permitted by PHP \nscoping\n.\n\n\nExtending a Service Model\n\n\nExtending the service models is easy and best explained with an example where we extend the User/Event/Log class where we overload the \ngetAllLogs\n method and do some custom stuff.\n\n\nFor the sake of berevity, we'll pseudo code the custom stuff.\n\n\n?php\n\n/**\n * MyLog extends the existing Log class and over rides the \n * existing `getAllLogs` method\n *\n */\nclass MyLog extends erdiko\\users\\models\\user\\event\\Log {\n\n    /**\n     *\n     *\n     */\n    public function getAllLogs()\n    {\n        // custom code\n\n        // call to the parent method we are overloading\n        $results = parent::getAllLogs();\n\n        // more custom code\n\n        return $results;\n    }\n\n}\n\n\n\n\nExtending the Controllers\n\n\nExtending controllers is just as easy as extending models, but please note that controllers do not return typical datatypes but most commonly set some values for the response object.\n\n\nThe AJAX controllers in this package typically extend the \n\\erdiko\\core\\AjaxController\n class from the Erdiko Core package. Please refer to the relevant documentation for more information on the response object.\n\n\n?php\n\n/**\n * MyUserAjax extends the existing UserAjax controller class \n * and over rides the existing `postRegister` method\n *\n */\nclass MyUserAjax extends \\erdiko\\core\\AjaxController {\n\n    /**\n     *\n     *\n     */\n    public function postRegister()\n    {\n        // custom code goes here\n\n        // send a pretty email to the user\n\n        // set some variables for the response object\n\n    }\n\n}", 
            "title": "Extending"
        }, 
        {
            "location": "/users/extending/#extending-the-users-package", 
            "text": "", 
            "title": "Extending the Users Package"
        }, 
        {
            "location": "/users/extending/#intro", 
            "text": "Extending the Users package allows you to add or modify the existing functionality of this package for use in your application. Since this is a modular package we designed this in a way that you can easily install locally with composer and clear paths to extend this code.  If you find yourself writing a bunch of custom code, we would suggest creating a custom package to store this extended code into.  Please note, this package is still limited by the constraints of PHP's object inheritance. You can only overload methods permitted by PHP  scoping .", 
            "title": "Intro"
        }, 
        {
            "location": "/users/extending/#extending-a-service-model", 
            "text": "Extending the service models is easy and best explained with an example where we extend the User/Event/Log class where we overload the  getAllLogs  method and do some custom stuff.  For the sake of berevity, we'll pseudo code the custom stuff.  ?php\n\n/**\n * MyLog extends the existing Log class and over rides the \n * existing `getAllLogs` method\n *\n */\nclass MyLog extends erdiko\\users\\models\\user\\event\\Log {\n\n    /**\n     *\n     *\n     */\n    public function getAllLogs()\n    {\n        // custom code\n\n        // call to the parent method we are overloading\n        $results = parent::getAllLogs();\n\n        // more custom code\n\n        return $results;\n    }\n\n}", 
            "title": "Extending a Service Model"
        }, 
        {
            "location": "/users/extending/#extending-the-controllers", 
            "text": "Extending controllers is just as easy as extending models, but please note that controllers do not return typical datatypes but most commonly set some values for the response object.  The AJAX controllers in this package typically extend the  \\erdiko\\core\\AjaxController  class from the Erdiko Core package. Please refer to the relevant documentation for more information on the response object.  ?php\n\n/**\n * MyUserAjax extends the existing UserAjax controller class \n * and over rides the existing `postRegister` method\n *\n */\nclass MyUserAjax extends \\erdiko\\core\\AjaxController {\n\n    /**\n     *\n     *\n     */\n    public function postRegister()\n    {\n        // custom code goes here\n\n        // send a pretty email to the user\n\n        // set some variables for the response object\n\n    }\n\n}", 
            "title": "Extending the Controllers"
        }, 
        {
            "location": "/authorize/", 
            "text": "Authorize\n\n\nerdiko/authorize package\n\n\ninstallation:\n\n\ncomposer require erdiko/authorize\n\n\n\nOverview\n\n\nSetup / Configuration", 
            "title": "Overview"
        }, 
        {
            "location": "/authorize/#authorize", 
            "text": "erdiko/authorize package  installation:  composer require erdiko/authorize", 
            "title": "Authorize"
        }, 
        {
            "location": "/authorize/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/authorize/#setup-configuration", 
            "text": "", 
            "title": "Setup / Configuration"
        }, 
        {
            "location": "/authorize/security/", 
            "text": "Security", 
            "title": "Security"
        }, 
        {
            "location": "/authorize/security/#security", 
            "text": "", 
            "title": "Security"
        }, 
        {
            "location": "/authorize/extending/", 
            "text": "Extending Authorize", 
            "title": "Extending"
        }, 
        {
            "location": "/authorize/extending/#extending-authorize", 
            "text": "", 
            "title": "Extending Authorize"
        }, 
        {
            "location": "/authenticate/", 
            "text": "Authenticate\n\n\nerdiko/authenticate package\n\n\ninstallation:\n\n\ncomposer require erdiko/authenticate\n\n\n\nOverview\n\n\nSetup / Configuration", 
            "title": "Overview"
        }, 
        {
            "location": "/authenticate/#authenticate", 
            "text": "erdiko/authenticate package  installation:  composer require erdiko/authenticate", 
            "title": "Authenticate"
        }, 
        {
            "location": "/authenticate/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/authenticate/#setup-configuration", 
            "text": "", 
            "title": "Setup / Configuration"
        }, 
        {
            "location": "/authenticate/extending/", 
            "text": "Extending Authenticate", 
            "title": "Extending"
        }, 
        {
            "location": "/authenticate/extending/#extending-authenticate", 
            "text": "", 
            "title": "Extending Authenticate"
        }, 
        {
            "location": "/help/", 
            "text": "Help\n\n\nHaving trouble using Erdiko?\n\n\nRead Erdiko Get Started and Erdiko Documentation\n\n\nCreate a Github issue\n\n\nEmail to us erdiko@arroyolabs.com\n\n\nIf you find an issue with these docs please let us know.  You can also submit a pull request to our \ndocumentation repo\n.  All the pages are markdown so they are easy to edit.", 
            "title": "Submitting Issues"
        }, 
        {
            "location": "/help/#help", 
            "text": "Having trouble using Erdiko?  Read Erdiko Get Started and Erdiko Documentation  Create a Github issue  Email to us erdiko@arroyolabs.com  If you find an issue with these docs please let us know.  You can also submit a pull request to our  documentation repo .  All the pages are markdown so they are easy to edit.", 
            "title": "Help"
        }, 
        {
            "location": "/style-guide/", 
            "text": "Erdiko coding style guide\n\n\nAll of the erdiko code is broken up into convenient packages that are published on either Packagist (PHP) or NPM (JavaScript \n Sass).  All code is stored on \nGithub\n.\n\n\nBelow you will find details on how we write our code.  We do our best to stick to these guidelines.\n\n\nPHP\n\n\nWe adhere to the \nPSR\n coding style guide.  \n\n\nhttp://www.php-fig.org/psr/psr-2/\n\n\nMore useful PHP-FIG links:\n\n\nhttp://www.php-fig.org/bylaws/psr-naming-conventions/\n\n\nhttp://www.php-fig.org/psr/psr-1/\n\n\nJavaScript\n\n\nWe follow Google's JavaScript style guide.\n\n\nhttps://google.github.io/styleguide/jsguide.html\n\n\nHTML\n\n\nWe follow Google's HTML style guide as well\n\n\nhttps://google.github.io/styleguide/htmlcssguide.html\n\n\nCSS\n\n\nSass\n\n\nhttp://sass-lang.com/", 
            "title": "Coding style guide"
        }, 
        {
            "location": "/style-guide/#erdiko-coding-style-guide", 
            "text": "All of the erdiko code is broken up into convenient packages that are published on either Packagist (PHP) or NPM (JavaScript   Sass).  All code is stored on  Github .  Below you will find details on how we write our code.  We do our best to stick to these guidelines.", 
            "title": "Erdiko coding style guide"
        }, 
        {
            "location": "/style-guide/#php", 
            "text": "We adhere to the  PSR  coding style guide.    http://www.php-fig.org/psr/psr-2/  More useful PHP-FIG links:  http://www.php-fig.org/bylaws/psr-naming-conventions/  http://www.php-fig.org/psr/psr-1/", 
            "title": "PHP"
        }, 
        {
            "location": "/style-guide/#javascript", 
            "text": "We follow Google's JavaScript style guide.  https://google.github.io/styleguide/jsguide.html", 
            "title": "JavaScript"
        }, 
        {
            "location": "/style-guide/#html", 
            "text": "We follow Google's HTML style guide as well  https://google.github.io/styleguide/htmlcssguide.html", 
            "title": "HTML"
        }, 
        {
            "location": "/style-guide/#css", 
            "text": "", 
            "title": "CSS"
        }, 
        {
            "location": "/style-guide/#sass", 
            "text": "http://sass-lang.com/", 
            "title": "Sass"
        }, 
        {
            "location": "/about/", 
            "text": "What is Erdiko?\n\n\nErdiko is a micro MVC framework and suite of packages to build lean web apps and APIs.  OK, but what does that mean?\n\n\nObjective\n\n\nCompatibility\n\n\nHistory\n\n\nThe future", 
            "title": "About Us"
        }, 
        {
            "location": "/about/#what-is-erdiko", 
            "text": "Erdiko is a micro MVC framework and suite of packages to build lean web apps and APIs.  OK, but what does that mean?", 
            "title": "What is Erdiko?"
        }, 
        {
            "location": "/about/#objective", 
            "text": "", 
            "title": "Objective"
        }, 
        {
            "location": "/about/#compatibility", 
            "text": "", 
            "title": "Compatibility"
        }, 
        {
            "location": "/about/#history", 
            "text": "", 
            "title": "History"
        }, 
        {
            "location": "/about/#the-future", 
            "text": "", 
            "title": "The future"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to Erdiko\n\n\nHow to contribute\n\n\nSee our \nCoding Style Guide\n\n\nContributing to User Admin\n\n\nSee our doc on github to set up a development environment", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing-to-erdiko", 
            "text": "", 
            "title": "Contributing to Erdiko"
        }, 
        {
            "location": "/contributing/#how-to-contribute", 
            "text": "See our  Coding Style Guide", 
            "title": "How to contribute"
        }, 
        {
            "location": "/contributing/#contributing-to-user-admin", 
            "text": "See our doc on github to set up a development environment", 
            "title": "Contributing to User Admin"
        }
    ]
}